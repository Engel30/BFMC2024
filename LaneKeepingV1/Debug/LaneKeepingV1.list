
LaneKeepingV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b544  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800b6e8  0800b6e8  0001b6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd88  0800bd88  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd88  0800bd88  0001bd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd90  0800bd90  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd90  0800bd90  0001bd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bd98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  200001e8  0800bf7c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  0800bf7c  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012092  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d2  00000000  00000000  000322e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00034ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e12  00000000  00000000  00035ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199d5  00000000  00000000  00036ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000158eb  00000000  00000000  00050487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f2b4  00000000  00000000  00065d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061f8  00000000  00000000  00105028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0010b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b6cc 	.word	0x0800b6cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800b6cc 	.word	0x0800b6cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <DegreeSec2RPM>:
#include <DC_motor.h>

float DegreeSec2RPM(float speed_degsec){
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = speed_degsec * 60/360;
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001038 <DegreeSec2RPM+0x38>
 8001012:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001016:	eddf 6a09 	vldr	s13, [pc, #36]	; 800103c <DegreeSec2RPM+0x3c>
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	ee07 3a90 	vmov	s15, r3
}
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	42700000 	.word	0x42700000
 800103c:	43b40000 	.word	0x43b40000

08001040 <Voltage2Duty>:

float Voltage2Duty(float u){
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]

	float duty = 100*u/V_MAX;
 800104a:	edd7 7a01 	vldr	s15, [r7, #4]
 800104e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80010a4 <Voltage2Duty+0x64>
 8001052:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001056:	eef1 6a0e 	vmov.f32	s13, #30	; 0x40f00000  7.5
 800105a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105e:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty>100){
 8001062:	edd7 7a03 	vldr	s15, [r7, #12]
 8001066:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010a4 <Voltage2Duty+0x64>
 800106a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	dd02      	ble.n	800107a <Voltage2Duty+0x3a>
		duty=100;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <Voltage2Duty+0x68>)
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e009      	b.n	800108e <Voltage2Duty+0x4e>
	} else if(duty<0){
 800107a:	edd7 7a03 	vldr	s15, [r7, #12]
 800107e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001086:	d502      	bpl.n	800108e <Voltage2Duty+0x4e>
		duty = 0;
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
	}

	return duty;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	42c80000 	.word	0x42c80000
 80010a8:	42c80000 	.word	0x42c80000

080010ac <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;

	if(y_ref>=0){
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	db02      	blt.n	80010ca <Ref2Direction+0x1e>
		dir = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e001      	b.n	80010ce <Ref2Direction+0x22>
	} else {
		dir = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <set_PWM_and_dir>:

void set_PWM_and_dir(uint32_t duty, uint8_t dir){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]

	TIM10->CCR1 = ((float)duty/100)*TIM10->ARR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001140 <set_PWM_and_dir+0x64>
 80010f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <set_PWM_and_dir+0x68>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <set_PWM_and_dir+0x68>)
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	635a      	str	r2, [r3, #52]	; 0x34

	if( dir == 0){
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d105      	bne.n	8001128 <set_PWM_and_dir+0x4c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <set_PWM_and_dir+0x6c>)
 8001122:	f002 fbdb 	bl	80038dc <HAL_GPIO_WritePin>
	}else if ( dir == 1){
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
	}
}
 8001126:	e007      	b.n	8001138 <set_PWM_and_dir+0x5c>
	}else if ( dir == 1){
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d104      	bne.n	8001138 <set_PWM_and_dir+0x5c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2101      	movs	r1, #1
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <set_PWM_and_dir+0x6c>)
 8001134:	f002 fbd2 	bl	80038dc <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	42c80000 	.word	0x42c80000
 8001144:	40014400 	.word	0x40014400
 8001148:	40020800 	.word	0x40020800

0800114c <init_PID>:
#include "PID.h"
#include <stdio.h>

void init_PID(PID* p, float Tc, float u_max, float u_min){
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	ed87 0a02 	vstr	s0, [r7, #8]
 8001158:	edc7 0a01 	vstr	s1, [r7, #4]
 800115c:	ed87 1a00 	vstr	s2, [r7]
	p->Tc = Tc;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	615a      	str	r2, [r3, #20]
	p->Iterm = 0;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
	p->e_old = 0;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd){
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	ed87 0a02 	vstr	s0, [r7, #8]
 800119a:	edc7 0a01 	vstr	s1, [r7, #4]
 800119e:	ed87 1a00 	vstr	s2, [r7]
	p->Kp = Kp;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PID_controller>:

float PID_controller(PID* p , float y, float r){
 80011c0:	b480      	push	{r7}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011cc:	edc7 0a01 	vstr	s1, [r7, #4]
	float u;
	float newIterm;
	float e = 0;
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]

	e = r-y;
 80011d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011da:	edd7 7a02 	vldr	s15, [r7, #8]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	edc7 7a08 	vstr	s15, [r7, #32]


	float Pterm = p->Kp*e;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80011f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f4:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm = p->Iterm + (p->Ki)*p->Tc*p->e_old;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	edd3 6a01 	vldr	s13, [r3, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	edd3 7a03 	vldr	s15, [r3, #12]
 800120a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	edd3 7a06 	vldr	s15, [r3, #24]
 8001214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121c:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm = (p->Kd/p->Tc)*(e - p->e_old);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	edd3 6a02 	vldr	s13, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	edd3 7a03 	vldr	s15, [r3, #12]
 800122c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	edd3 7a06 	vldr	s15, [r3, #24]
 8001236:	edd7 6a08 	vldr	s13, [r7, #32]
 800123a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800123e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001242:	edc7 7a05 	vstr	s15, [r7, #20]

	p->e_old = e;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6a3a      	ldr	r2, [r7, #32]
 800124a:	619a      	str	r2, [r3, #24]

	u = Pterm + newIterm + Dterm;
 800124c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001250:	edd7 7a06 	vldr	s15, [r7, #24]
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	ed97 7a05 	vldr	s14, [r7, #20]
 800125c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001260:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u > p->u_max){
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	edd3 7a04 	vldr	s15, [r3, #16]
 800126a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800126e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	dd03      	ble.n	8001280 <PID_controller+0xc0>
		u = p->u_max;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
 800127e:	e010      	b.n	80012a2 <PID_controller+0xe2>
	} else if(u < p->u_min){
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	edd3 7a05 	vldr	s15, [r3, #20]
 8001286:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800128a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d503      	bpl.n	800129c <PID_controller+0xdc>
		u = p->u_min;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	e002      	b.n	80012a2 <PID_controller+0xe2>
	} else {
		p->Iterm = newIterm;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	61da      	str	r2, [r3, #28]
	}

	//printf("errore: %.2f, y: %.2f, r: %.2f \r\n", e, y, r);

	return u;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	ee07 3a90 	vmov	s15, r3
}
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	372c      	adds	r7, #44	; 0x2c
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4619      	mov	r1, r3
 80012c4:	2007      	movs	r0, #7
 80012c6:	f000 fa03 	bl	80016d0 <bno055_writeData>
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4619      	mov	r1, r3
 80012e0:	203d      	movs	r0, #61	; 0x3d
 80012e2:	f000 f9f5 	bl	80016d0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80012ec:	2013      	movs	r0, #19
 80012ee:	f000 f9e3 	bl	80016b8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80012f2:	e002      	b.n	80012fa <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80012f4:	2007      	movs	r0, #7
 80012f6:	f000 f9df 	bl	80016b8 <bno055_delay>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ffe3 	bl	80012d2 <bno055_setOperationMode>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001314:	200c      	movs	r0, #12
 8001316:	f7ff ffdc 	bl	80012d2 <bno055_setOperationMode>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}

0800131e <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001322:	2120      	movs	r1, #32
 8001324:	203f      	movs	r0, #63	; 0x3f
 8001326:	f000 f9d3 	bl	80016d0 <bno055_writeData>
  bno055_delay(700);
 800132a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800132e:	f000 f9c3 	bl	80016b8 <bno055_delay>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  bno055_reset();
 800133e:	f7ff ffee 	bl	800131e <bno055_reset>

  uint8_t id = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	2201      	movs	r2, #1
 800134a:	4619      	mov	r1, r3
 800134c:	2000      	movs	r0, #0
 800134e:	f000 faab 	bl	80018a8 <bno055_readData>
  if (id != BNO055_ID) {
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2ba0      	cmp	r3, #160	; 0xa0
 8001356:	d004      	beq.n	8001362 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4619      	mov	r1, r3
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <bno055_setup+0x4c>)
 800135e:	f007 fb71 	bl	8008a44 <iprintf>
  }
  bno055_setPage(0);
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff ffa7 	bl	80012b6 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001368:	2100      	movs	r1, #0
 800136a:	203f      	movs	r0, #63	; 0x3f
 800136c:	f000 f9b0 	bl	80016d0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001370:	f7ff ffc7 	bl	8001302 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f000 f99f 	bl	80016b8 <bno055_delay>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	0800b6e8 	.word	0x0800b6e8

08001388 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800138c:	b09e      	sub	sp, #120	; 0x78
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff ff8d 	bl	80012b6 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800139c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d108      	bne.n	80013b6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80013a4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ac:	2208      	movs	r2, #8
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fa7a 	bl	80018a8 <bno055_readData>
 80013b4:	e007      	b.n	80013c6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80013b6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013be:	2206      	movs	r2, #6
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fa71 	bl	80018a8 <bno055_readData>

  double scale = 1;
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b8b      	ldr	r3, [pc, #556]	; (80015f8 <bno055_getVector+0x270>)
 80013cc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80013d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013d4:	2b0e      	cmp	r3, #14
 80013d6:	d109      	bne.n	80013ec <bno055_getVector+0x64>
    scale = magScale;
 80013d8:	4b88      	ldr	r3, [pc, #544]	; (80015fc <bno055_getVector+0x274>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f899 	bl	8000514 <__aeabi_ui2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80013ea:	e03e      	b.n	800146a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80013ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d007      	beq.n	8001404 <bno055_getVector+0x7c>
 80013f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f8:	2b28      	cmp	r3, #40	; 0x28
 80013fa:	d003      	beq.n	8001404 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80013fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001400:	2b2e      	cmp	r3, #46	; 0x2e
 8001402:	d109      	bne.n	8001418 <bno055_getVector+0x90>
    scale = accelScale;
 8001404:	4b7e      	ldr	r3, [pc, #504]	; (8001600 <bno055_getVector+0x278>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f883 	bl	8000514 <__aeabi_ui2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001416:	e028      	b.n	800146a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	2b14      	cmp	r3, #20
 800141e:	d109      	bne.n	8001434 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001420:	4b78      	ldr	r3, [pc, #480]	; (8001604 <bno055_getVector+0x27c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f875 	bl	8000514 <__aeabi_ui2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001432:	e01a      	b.n	800146a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001438:	2b1a      	cmp	r3, #26
 800143a:	d109      	bne.n	8001450 <bno055_getVector+0xc8>
    scale = eulerScale;
 800143c:	4b72      	ldr	r3, [pc, #456]	; (8001608 <bno055_getVector+0x280>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f867 	bl	8000514 <__aeabi_ui2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800144e:	e00c      	b.n	800146a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001454:	2b20      	cmp	r3, #32
 8001456:	d108      	bne.n	800146a <bno055_getVector+0xe2>
    scale = quaScale;
 8001458:	4b6c      	ldr	r3, [pc, #432]	; (800160c <bno055_getVector+0x284>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f859 	bl	8000514 <__aeabi_ui2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800146a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146e:	2220      	movs	r2, #32
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f007 fc4c 	bl	8008d10 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800147c:	2b20      	cmp	r3, #32
 800147e:	d150      	bne.n	8001522 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001480:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800148c:	b21b      	sxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b21b      	sxth	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f84e 	bl	8000534 <__aeabi_i2d>
 8001498:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800149c:	f7ff f9de 	bl	800085c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80014a8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f83a 	bl	8000534 <__aeabi_i2d>
 80014c0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014c4:	f7ff f9ca 	bl	800085c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80014d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f826 	bl	8000534 <__aeabi_i2d>
 80014e8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014ec:	f7ff f9b6 	bl	800085c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80014f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21b      	sxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f812 	bl	8000534 <__aeabi_i2d>
 8001510:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001514:	f7ff f9a2 	bl	800085c <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001520:	e03b      	b.n	800159a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001522:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21b      	sxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fffd 	bl	8000534 <__aeabi_i2d>
 800153a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800153e:	f7ff f98d 	bl	800085c <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800154a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001556:	b21b      	sxth	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b21b      	sxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffe9 	bl	8000534 <__aeabi_i2d>
 8001562:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001566:	f7ff f979 	bl	800085c <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001572:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffd5 	bl	8000534 <__aeabi_i2d>
 800158a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800158e:	f7ff f965 	bl	800085c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800159a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800159e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80015a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80015b2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015b6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80015be:	ec49 8b14 	vmov	d4, r8, r9
 80015c2:	ec45 4b15 	vmov	d5, r4, r5
 80015c6:	ec41 0b16 	vmov	d6, r0, r1
 80015ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80015ce:	eeb0 0a44 	vmov.f32	s0, s8
 80015d2:	eef0 0a64 	vmov.f32	s1, s9
 80015d6:	eeb0 1a45 	vmov.f32	s2, s10
 80015da:	eef0 1a65 	vmov.f32	s3, s11
 80015de:	eeb0 2a46 	vmov.f32	s4, s12
 80015e2:	eef0 2a66 	vmov.f32	s5, s13
 80015e6:	eeb0 3a47 	vmov.f32	s6, s14
 80015ea:	eef0 3a67 	vmov.f32	s7, s15
 80015ee:	3778      	adds	r7, #120	; 0x78
 80015f0:	46bd      	mov	sp, r7
 80015f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015f6:	bf00      	nop
 80015f8:	3ff00000 	.word	0x3ff00000
 80015fc:	20000006 	.word	0x20000006
 8001600:	20000000 	.word	0x20000000
 8001604:	20000002 	.word	0x20000002
 8001608:	20000004 	.word	0x20000004
 800160c:	20000008 	.word	0x20000008

08001610 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001614:	b090      	sub	sp, #64	; 0x40
 8001616:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001618:	2014      	movs	r0, #20
 800161a:	f7ff feb5 	bl	8001388 <bno055_getVector>
 800161e:	eeb0 4a40 	vmov.f32	s8, s0
 8001622:	eef0 4a60 	vmov.f32	s9, s1
 8001626:	eeb0 5a41 	vmov.f32	s10, s2
 800162a:	eef0 5a61 	vmov.f32	s11, s3
 800162e:	eeb0 6a42 	vmov.f32	s12, s4
 8001632:	eef0 6a62 	vmov.f32	s13, s5
 8001636:	eeb0 7a43 	vmov.f32	s14, s6
 800163a:	eef0 7a63 	vmov.f32	s15, s7
 800163e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001642:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001646:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800164a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800164e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001652:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001656:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800165a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800165e:	ec49 8b14 	vmov	d4, r8, r9
 8001662:	ec45 4b15 	vmov	d5, r4, r5
 8001666:	ec41 0b16 	vmov	d6, r0, r1
 800166a:	ec43 2b17 	vmov	d7, r2, r3
}
 800166e:	eeb0 0a44 	vmov.f32	s0, s8
 8001672:	eef0 0a64 	vmov.f32	s1, s9
 8001676:	eeb0 1a45 	vmov.f32	s2, s10
 800167a:	eef0 1a65 	vmov.f32	s3, s11
 800167e:	eeb0 2a46 	vmov.f32	s4, s12
 8001682:	eef0 2a66 	vmov.f32	s5, s13
 8001686:	eeb0 3a47 	vmov.f32	s6, s14
 800168a:	eef0 3a67 	vmov.f32	s7, s15
 800168e:	3740      	adds	r7, #64	; 0x40
 8001690:	46bd      	mov	sp, r7
 8001692:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001698 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <bno055_assignI2C+0x1c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000204 	.word	0x20000204

080016b8 <bno055_delay>:

void bno055_delay(int time) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 fbee 	bl	8002ea4 <HAL_Delay>
#endif
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	733b      	strb	r3, [r7, #12]
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80016e8:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <bno055_writeData+0x184>)
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	230a      	movs	r3, #10
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2302      	movs	r3, #2
 80016f6:	2150      	movs	r1, #80	; 0x50
 80016f8:	f002 fa66 	bl	8003bc8 <HAL_I2C_Master_Transmit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80a0 	beq.w	8001848 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d103      	bne.n	8001716 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800170e:	4852      	ldr	r0, [pc, #328]	; (8001858 <bno055_writeData+0x188>)
 8001710:	f007 f9fe 	bl	8008b10 <puts>
 8001714:	e012      	b.n	800173c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d103      	bne.n	8001724 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800171c:	484f      	ldr	r0, [pc, #316]	; (800185c <bno055_writeData+0x18c>)
 800171e:	f007 f9f7 	bl	8008b10 <puts>
 8001722:	e00b      	b.n	800173c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d103      	bne.n	8001732 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800172a:	484d      	ldr	r0, [pc, #308]	; (8001860 <bno055_writeData+0x190>)
 800172c:	f007 f9f0 	bl	8008b10 <puts>
 8001730:	e004      	b.n	800173c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	4619      	mov	r1, r3
 8001736:	484b      	ldr	r0, [pc, #300]	; (8001864 <bno055_writeData+0x194>)
 8001738:	f007 f984 	bl	8008a44 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800173c:	4b45      	ldr	r3, [pc, #276]	; (8001854 <bno055_writeData+0x184>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fea1 	bl	8004488 <HAL_I2C_GetError>
 8001746:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d07e      	beq.n	800184c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d103      	bne.n	800175c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001754:	4844      	ldr	r0, [pc, #272]	; (8001868 <bno055_writeData+0x198>)
 8001756:	f007 f9db 	bl	8008b10 <puts>
 800175a:	e021      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d103      	bne.n	800176a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001762:	4842      	ldr	r0, [pc, #264]	; (800186c <bno055_writeData+0x19c>)
 8001764:	f007 f9d4 	bl	8008b10 <puts>
 8001768:	e01a      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d103      	bne.n	8001778 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001770:	483f      	ldr	r0, [pc, #252]	; (8001870 <bno055_writeData+0x1a0>)
 8001772:	f007 f9cd 	bl	8008b10 <puts>
 8001776:	e013      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d103      	bne.n	8001786 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800177e:	483d      	ldr	r0, [pc, #244]	; (8001874 <bno055_writeData+0x1a4>)
 8001780:	f007 f9c6 	bl	8008b10 <puts>
 8001784:	e00c      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b10      	cmp	r3, #16
 800178a:	d103      	bne.n	8001794 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800178c:	483a      	ldr	r0, [pc, #232]	; (8001878 <bno055_writeData+0x1a8>)
 800178e:	f007 f9bf 	bl	8008b10 <puts>
 8001792:	e005      	b.n	80017a0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b20      	cmp	r3, #32
 8001798:	d102      	bne.n	80017a0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800179a:	4838      	ldr	r0, [pc, #224]	; (800187c <bno055_writeData+0x1ac>)
 800179c:	f007 f9b8 	bl	8008b10 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <bno055_writeData+0x184>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 fe61 	bl	800446c <HAL_I2C_GetState>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80017b4:	4832      	ldr	r0, [pc, #200]	; (8001880 <bno055_writeData+0x1b0>)
 80017b6:	f007 f9ab 	bl	8008b10 <puts>
 80017ba:	e048      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b20      	cmp	r3, #32
 80017c0:	d103      	bne.n	80017ca <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80017c2:	482f      	ldr	r0, [pc, #188]	; (8001880 <bno055_writeData+0x1b0>)
 80017c4:	f007 f9a4 	bl	8008b10 <puts>
 80017c8:	e041      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b24      	cmp	r3, #36	; 0x24
 80017ce:	d103      	bne.n	80017d8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80017d0:	482c      	ldr	r0, [pc, #176]	; (8001884 <bno055_writeData+0x1b4>)
 80017d2:	f007 f99d 	bl	8008b10 <puts>
 80017d6:	e03a      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b21      	cmp	r3, #33	; 0x21
 80017dc:	d103      	bne.n	80017e6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80017de:	482a      	ldr	r0, [pc, #168]	; (8001888 <bno055_writeData+0x1b8>)
 80017e0:	f007 f996 	bl	8008b10 <puts>
 80017e4:	e033      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b22      	cmp	r3, #34	; 0x22
 80017ea:	d103      	bne.n	80017f4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80017ec:	4827      	ldr	r0, [pc, #156]	; (800188c <bno055_writeData+0x1bc>)
 80017ee:	f007 f98f 	bl	8008b10 <puts>
 80017f2:	e02c      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b28      	cmp	r3, #40	; 0x28
 80017f8:	d103      	bne.n	8001802 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80017fa:	4825      	ldr	r0, [pc, #148]	; (8001890 <bno055_writeData+0x1c0>)
 80017fc:	f007 f988 	bl	8008b10 <puts>
 8001800:	e025      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b29      	cmp	r3, #41	; 0x29
 8001806:	d103      	bne.n	8001810 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001808:	4822      	ldr	r0, [pc, #136]	; (8001894 <bno055_writeData+0x1c4>)
 800180a:	f007 f981 	bl	8008b10 <puts>
 800180e:	e01e      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b2a      	cmp	r3, #42	; 0x2a
 8001814:	d103      	bne.n	800181e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001816:	4820      	ldr	r0, [pc, #128]	; (8001898 <bno055_writeData+0x1c8>)
 8001818:	f007 f97a 	bl	8008b10 <puts>
 800181c:	e017      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b60      	cmp	r3, #96	; 0x60
 8001822:	d103      	bne.n	800182c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001824:	481d      	ldr	r0, [pc, #116]	; (800189c <bno055_writeData+0x1cc>)
 8001826:	f007 f973 	bl	8008b10 <puts>
 800182a:	e010      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	2ba0      	cmp	r3, #160	; 0xa0
 8001830:	d103      	bne.n	800183a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001832:	481b      	ldr	r0, [pc, #108]	; (80018a0 <bno055_writeData+0x1d0>)
 8001834:	f007 f96c 	bl	8008b10 <puts>
 8001838:	e009      	b.n	800184e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	2be0      	cmp	r3, #224	; 0xe0
 800183e:	d106      	bne.n	800184e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001840:	4818      	ldr	r0, [pc, #96]	; (80018a4 <bno055_writeData+0x1d4>)
 8001842:	f007 f965 	bl	8008b10 <puts>
 8001846:	e002      	b.n	800184e <bno055_writeData+0x17e>
    return;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <bno055_writeData+0x17e>
    return;
 800184c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000204 	.word	0x20000204
 8001858:	0800b724 	.word	0x0800b724
 800185c:	0800b748 	.word	0x0800b748
 8001860:	0800b770 	.word	0x0800b770
 8001864:	0800b794 	.word	0x0800b794
 8001868:	0800b7ac 	.word	0x0800b7ac
 800186c:	0800b7c0 	.word	0x0800b7c0
 8001870:	0800b7d4 	.word	0x0800b7d4
 8001874:	0800b7e8 	.word	0x0800b7e8
 8001878:	0800b7fc 	.word	0x0800b7fc
 800187c:	0800b810 	.word	0x0800b810
 8001880:	0800b828 	.word	0x0800b828
 8001884:	0800b840 	.word	0x0800b840
 8001888:	0800b854 	.word	0x0800b854
 800188c:	0800b86c 	.word	0x0800b86c
 8001890:	0800b884 	.word	0x0800b884
 8001894:	0800b89c 	.word	0x0800b89c
 8001898:	0800b8bc 	.word	0x0800b8bc
 800189c:	0800b8dc 	.word	0x0800b8dc
 80018a0:	0800b8f4 	.word	0x0800b8f4
 80018a4:	0800b90c 	.word	0x0800b90c

080018a8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <bno055_readData+0x84>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	1dfa      	adds	r2, r7, #7
 80018be:	2364      	movs	r3, #100	; 0x64
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	2150      	movs	r1, #80	; 0x50
 80018c6:	f002 f97f 	bl	8003bc8 <HAL_I2C_Master_Transmit>
 80018ca:	4603      	mov	r3, r0
 80018cc:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <bno055_readData+0x84>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2264      	movs	r2, #100	; 0x64
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	2150      	movs	r1, #80	; 0x50
 80018de:	f002 fa71 	bl	8003dc4 <HAL_I2C_Master_Receive>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01a      	beq.n	8001922 <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d103      	bne.n	80018fa <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80018f2:	480f      	ldr	r0, [pc, #60]	; (8001930 <bno055_readData+0x88>)
 80018f4:	f007 f90c 	bl	8008b10 <puts>
 80018f8:	e014      	b.n	8001924 <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d103      	bne.n	8001908 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <bno055_readData+0x8c>)
 8001902:	f007 f905 	bl	8008b10 <puts>
 8001906:	e00d      	b.n	8001924 <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d103      	bne.n	8001916 <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800190e:	480a      	ldr	r0, [pc, #40]	; (8001938 <bno055_readData+0x90>)
 8001910:	f007 f8fe 	bl	8008b10 <puts>
 8001914:	e006      	b.n	8001924 <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	4619      	mov	r1, r3
 800191a:	4808      	ldr	r0, [pc, #32]	; (800193c <bno055_readData+0x94>)
 800191c:	f007 f892 	bl	8008a44 <iprintf>
 8001920:	e000      	b.n	8001924 <bno055_readData+0x7c>
	    return;
 8001922:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000204 	.word	0x20000204
 8001930:	0800b724 	.word	0x0800b724
 8001934:	0800b748 	.word	0x0800b748
 8001938:	0800b770 	.word	0x0800b770
 800193c:	0800b794 	.word	0x0800b794

08001940 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001944:	b08d      	sub	sp, #52	; 0x34
 8001946:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001948:	f001 fa3a 	bl	8002dc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800194c:	f000 fab2 	bl	8001eb4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001950:	f000 fd58 	bl	8002404 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001954:	f000 fb6c 	bl	8002030 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001958:	f000 fb98 	bl	800208c <MX_TIM1_Init>
	MX_TIM10_Init();
 800195c:	f000 fc8c 	bl	8002278 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001960:	f000 fcd8 	bl	8002314 <MX_TIM11_Init>
	MX_USART2_UART_Init();
 8001964:	f000 fcfa 	bl	800235c <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001968:	f000 fc32 	bl	80021d0 <MX_TIM2_Init>
	MX_USART6_UART_Init();
 800196c:	f000 fd20 	bl	80023b0 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001970:	f000 fb0c 	bl	8001f8c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	//PWM Servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001974:	2100      	movs	r1, #0
 8001976:	48c4      	ldr	r0, [pc, #784]	; (8001c88 <main+0x348>)
 8001978:	f003 fe64 	bl	8005644 <HAL_TIM_PWM_Start>
	//PWM DC motor
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800197c:	2100      	movs	r1, #0
 800197e:	48c3      	ldr	r0, [pc, #780]	; (8001c8c <main+0x34c>)
 8001980:	f003 fe60 	bl	8005644 <HAL_TIM_PWM_Start>
	//ENCODER TIMER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001984:	213c      	movs	r1, #60	; 0x3c
 8001986:	48c2      	ldr	r0, [pc, #776]	; (8001c90 <main+0x350>)
 8001988:	f003 ffb2 	bl	80058f0 <HAL_TIM_Encoder_Start>
	//10ms TIMER
	HAL_TIM_Base_Start_IT(&htim11);
 800198c:	48c1      	ldr	r0, [pc, #772]	; (8001c94 <main+0x354>)
 800198e:	f003 fd9d 	bl	80054cc <HAL_TIM_Base_Start_IT>

	//PID traction
	init_PID(&pid_traction, TRACTION_SAMPLING_TIME, MAX_U_TRACTION,
 8001992:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8001c98 <main+0x358>
 8001996:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8001c9c <main+0x35c>
 800199a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8001ca0 <main+0x360>
 800199e:	48c1      	ldr	r0, [pc, #772]	; (8001ca4 <main+0x364>)
 80019a0:	f7ff fbd4 	bl	800114c <init_PID>
	MIN_U_TRACTION);
	tune_PID(&pid_traction, KP_TRACTION, KI_TRACTION, 0);
 80019a4:	ed9f 1ac0 	vldr	s2, [pc, #768]	; 8001ca8 <main+0x368>
 80019a8:	eddf 0ac0 	vldr	s1, [pc, #768]	; 8001cac <main+0x36c>
 80019ac:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8001cb0 <main+0x370>
 80019b0:	48bc      	ldr	r0, [pc, #752]	; (8001ca4 <main+0x364>)
 80019b2:	f7ff fbec 	bl	800118e <tune_PID>

	//PID steering
	init_PID(&pid_steering, STEERING_SAMPLING_TIME, MAX_U_STEERING,
 80019b6:	eebb 1a07 	vmov.f32	s2, #183	; 0xc1b80000 -23.0
 80019ba:	eef3 0a07 	vmov.f32	s1, #55	; 0x41b80000  23.0
 80019be:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8001ca0 <main+0x360>
 80019c2:	48bc      	ldr	r0, [pc, #752]	; (8001cb4 <main+0x374>)
 80019c4:	f7ff fbc2 	bl	800114c <init_PID>
	MIN_U_STEERING);
	tune_PID(&pid_steering, KP_STEERING, KI_STEERING, 0);
 80019c8:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8001ca8 <main+0x368>
 80019cc:	eddf 0aba 	vldr	s1, [pc, #744]	; 8001cb8 <main+0x378>
 80019d0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80019d4:	48b7      	ldr	r0, [pc, #732]	; (8001cb4 <main+0x374>)
 80019d6:	f7ff fbda 	bl	800118e <tune_PID>

	// IMU BNO055 config
	HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1, 5, 1000);
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	2205      	movs	r2, #5
 80019e0:	2150      	movs	r1, #80	; 0x50
 80019e2:	48b6      	ldr	r0, [pc, #728]	; (8001cbc <main+0x37c>)
 80019e4:	f002 fc14 	bl	8004210 <HAL_I2C_IsDeviceReady>
	bno055_assignI2C(&hi2c1);
 80019e8:	48b4      	ldr	r0, [pc, #720]	; (8001cbc <main+0x37c>)
 80019ea:	f7ff fe55 	bl	8001698 <bno055_assignI2C>
	bno055_setup();
 80019ee:	f7ff fca3 	bl	8001338 <bno055_setup>
	bno055_setOperationModeNDOF();
 80019f2:	f7ff fc8d 	bl	8001310 <bno055_setOperationModeNDOF>

	servo_motor(0);
 80019f6:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8001ca8 <main+0x368>
 80019fa:	f000 fded 	bl	80025d8 <servo_motor>

	printf("Initialization Completed!\r\n");
 80019fe:	48b0      	ldr	r0, [pc, #704]	; (8001cc0 <main+0x380>)
 8001a00:	f007 f886 	bl	8008b10 <puts>

	//Test without Raspberry
	data.enable = 1;
 8001a04:	4baf      	ldr	r3, [pc, #700]	; (8001cc4 <main+0x384>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
	data.valid = 1;
 8001a0a:	4bae      	ldr	r3, [pc, #696]	; (8001cc4 <main+0x384>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	605a      	str	r2, [r3, #4]
	data.offset = 0.0;
 8001a10:	4bac      	ldr	r3, [pc, #688]	; (8001cc4 <main+0x384>)
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
	data.curvature_radius_ref_m = MAX_CURVATURE_RADIUS_FOR_STRAIGHT; //with r=1000000 the car goes straight
 8001a18:	4baa      	ldr	r3, [pc, #680]	; (8001cc4 <main+0x384>)
 8001a1a:	4aab      	ldr	r2, [pc, #684]	; (8001cc8 <main+0x388>)
 8001a1c:	60da      	str	r2, [r3, #12]
	data.linear_speed_ref_m_s = 0.30;
 8001a1e:	4ba9      	ldr	r3, [pc, #676]	; (8001cc4 <main+0x384>)
 8001a20:	4aaa      	ldr	r2, [pc, #680]	; (8001ccc <main+0x38c>)
 8001a22:	611a      	str	r2, [r3, #16]

	float RPM_2_m_s = (2 * M_PI / 60) * WHEEL_RADIUS
 8001a24:	4baa      	ldr	r3, [pc, #680]	; (8001cd0 <main+0x390>)
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
			/ MOTOR_REVOLUTION_FOR_ONE_WHEEL_REVOLUTION;
	RPM_2_m_s = RPM_2_m_s * 0.787; // correzione aggiunta xk non andava a 1m/s ma a 0.82m/s
 8001a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a2a:	f7fe fd95 	bl	8000558 <__aeabi_f2d>
 8001a2e:	a390      	add	r3, pc, #576	; (adr r3, 8001c70 <main+0x330>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fde8 	bl	8000608 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8da 	bl	8000bf8 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
								data.linear_speed_ref_m_s);
		//-------------------------------------------------------------
*/
		//-------------------------------------------------------------
		//Controllo
		if (data.enable == 1 /*&& HardwareEnable == 1*/) {
 8001a48:	4b9e      	ldr	r3, [pc, #632]	; (8001cc4 <main+0x384>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	f040 821a 	bne.w	8001e86 <main+0x546>
			if (Flag_10ms == 1) { //Car enabled from user
 8001a52:	4ba0      	ldr	r3, [pc, #640]	; (8001cd4 <main+0x394>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d1f6      	bne.n	8001a48 <main+0x108>
				Flag_10ms = 0;
 8001a5a:	4b9e      	ldr	r3, [pc, #632]	; (8001cd4 <main+0x394>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

				//-------------------------------------------------------------
				//TRACTION control

				//Measure speed with encoder
				vehicleState.ref_count = TIM2->ARR / 2;
 8001a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b9b      	ldr	r3, [pc, #620]	; (8001cd8 <main+0x398>)
 8001a6c:	605a      	str	r2, [r3, #4]
				vehicleState.delta_count = vehicleState.counts
 8001a6e:	4b9a      	ldr	r3, [pc, #616]	; (8001cd8 <main+0x398>)
 8001a70:	681a      	ldr	r2, [r3, #0]
						- vehicleState.ref_count;
 8001a72:	4b99      	ldr	r3, [pc, #612]	; (8001cd8 <main+0x398>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	1ad3      	subs	r3, r2, r3
				vehicleState.delta_count = vehicleState.counts
 8001a78:	4a97      	ldr	r2, [pc, #604]	; (8001cd8 <main+0x398>)
 8001a7a:	6093      	str	r3, [r2, #8]

				vehicleState.delta_angle_deg = (vehicleState.delta_count * 360)
 8001a7c:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <main+0x398>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
						/ ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd53 	bl	8000534 <__aeabi_i2d>
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <main+0x39c>)
 8001a94:	f7fe fee2 	bl	800085c <__aeabi_ddiv>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f8aa 	bl	8000bf8 <__aeabi_d2f>
 8001aa4:	4603      	mov	r3, r0
				vehicleState.delta_angle_deg = (vehicleState.delta_count * 360)
 8001aa6:	4a8c      	ldr	r2, [pc, #560]	; (8001cd8 <main+0x398>)
 8001aa8:	60d3      	str	r3, [r2, #12]
								* GEARBOX_RATIO));
				vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg
 8001aaa:	4b8b      	ldr	r3, [pc, #556]	; (8001cd8 <main+0x398>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd52 	bl	8000558 <__aeabi_f2d>
						/ ENCODER_SAMPLING_TIME;
 8001ab4:	a370      	add	r3, pc, #448	; (adr r3, 8001c78 <main+0x338>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fecf 	bl	800085c <__aeabi_ddiv>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f897 	bl	8000bf8 <__aeabi_d2f>
 8001aca:	4603      	mov	r3, r0
				vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg
 8001acc:	4a82      	ldr	r2, [pc, #520]	; (8001cd8 <main+0x398>)
 8001ace:	6113      	str	r3, [r2, #16]
				vehicleState.motor_speed_RPM = DegreeSec2RPM(
 8001ad0:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <main+0x398>)
 8001ad2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ada:	f7ff fa91 	bl	8001000 <DegreeSec2RPM>
 8001ade:	eef0 7a40 	vmov.f32	s15, s0
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <main+0x398>)
 8001ae4:	edc3 7a05 	vstr	s15, [r3, #20]
						vehicleState.motor_speed_deg_sec);

				//Speed reference for motor
				vehicleState.motor_speed_ref_RPM = data.linear_speed_ref_m_s
 8001ae8:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <main+0x384>)
 8001aea:	edd3 6a04 	vldr	s13, [r3, #16]
						/ RPM_2_m_s;
 8001aee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
				vehicleState.motor_speed_ref_RPM = data.linear_speed_ref_m_s
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <main+0x398>)
 8001af8:	edc3 7a07 	vstr	s15, [r3, #28]

				vehicleState.motor_direction_ref = Ref2Direction(
 8001afc:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <main+0x398>)
 8001afe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b02:	eeb0 0a67 	vmov.f32	s0, s15
 8001b06:	f7ff fad1 	bl	80010ac <Ref2Direction>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <main+0x398>)
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]
						vehicleState.motor_speed_ref_RPM);

				u_trazione = PID_controller(&pid_traction,
						abs(vehicleState.motor_speed_RPM),
 8001b14:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <main+0x398>)
 8001b16:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 3a90 	vmov	r3, s15
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bfb8      	it	lt
 8001b26:	425b      	neglt	r3, r3
				u_trazione = PID_controller(&pid_traction,
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						abs(vehicleState.motor_speed_ref_RPM));
 8001b30:	4b69      	ldr	r3, [pc, #420]	; (8001cd8 <main+0x398>)
 8001b32:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3a:	ee17 3a90 	vmov	r3, s15
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bfb8      	it	lt
 8001b42:	425b      	neglt	r3, r3
				u_trazione = PID_controller(&pid_traction,
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4c:	eef0 0a67 	vmov.f32	s1, s15
 8001b50:	eeb0 0a47 	vmov.f32	s0, s14
 8001b54:	4853      	ldr	r0, [pc, #332]	; (8001ca4 <main+0x364>)
 8001b56:	f7ff fb33 	bl	80011c0 <PID_controller>
 8001b5a:	ee10 3a10 	vmov	r3, s0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fcfa 	bl	8000558 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	495d      	ldr	r1, [pc, #372]	; (8001ce0 <main+0x3a0>)
 8001b6a:	e9c1 2300 	strd	r2, r3, [r1]

				set_PWM_and_dir((uint32_t) Voltage2Duty(u_trazione),
 8001b6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ce0 <main+0x3a0>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7ff f83e 	bl	8000bf8 <__aeabi_d2f>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	ee00 3a10 	vmov	s0, r3
 8001b82:	f7ff fa5d 	bl	8001040 <Voltage2Duty>
 8001b86:	eef0 7a40 	vmov.f32	s15, s0
 8001b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8e:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <main+0x398>)
 8001b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b94:	4619      	mov	r1, r3
 8001b96:	ee17 0a90 	vmov	r0, s15
 8001b9a:	f7ff fa9f 	bl	80010dc <set_PWM_and_dir>
				 */
				//-------------------------------------------------------------
				//-------------------------------------------------------------
				//STEERING control
				//Get yawrate from IMU
				bno055_vector_t v = bno055_getVectorGyroscope();
 8001b9e:	f7ff fd37 	bl	8001610 <bno055_getVectorGyroscope>
 8001ba2:	eeb0 4a40 	vmov.f32	s8, s0
 8001ba6:	eef0 4a60 	vmov.f32	s9, s1
 8001baa:	eeb0 5a41 	vmov.f32	s10, s2
 8001bae:	eef0 5a61 	vmov.f32	s11, s3
 8001bb2:	eeb0 6a42 	vmov.f32	s12, s4
 8001bb6:	eef0 6a62 	vmov.f32	s13, s5
 8001bba:	eeb0 7a43 	vmov.f32	s14, s6
 8001bbe:	eef0 7a63 	vmov.f32	s15, s7
 8001bc2:	ed87 4b00 	vstr	d4, [r7]
 8001bc6:	ed87 5b02 	vstr	d5, [r7, #8]
 8001bca:	ed87 6b04 	vstr	d6, [r7, #16]
 8001bce:	ed87 7b06 	vstr	d7, [r7, #24]
				vehicleState.yaw_rate_deg_sec = v.z;
 8001bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd6:	4940      	ldr	r1, [pc, #256]	; (8001cd8 <main+0x398>)
 8001bd8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec
 8001bdc:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <main+0x398>)
 8001bde:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
						* M_PI) / 180;
 8001be2:	a327      	add	r3, pc, #156	; (adr r3, 8001c80 <main+0x340>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd0e 	bl	8000608 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <main+0x3a4>)
 8001bfa:	f7fe fe2f 	bl	800085c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
				vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec
 8001c02:	4935      	ldr	r1, [pc, #212]	; (8001cd8 <main+0x398>)
 8001c04:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

				if (data.curvature_radius_ref_m
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <main+0x384>)
 8001c0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c0e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	db78      	blt.n	8001d0e <main+0x3ce>
						>= MAX_CURVATURE_RADIUS_FOR_STRAIGHT) {
					vehicleState.yaw_rate_ref_rad_sec = 0;
 8001c1c:	492e      	ldr	r1, [pc, #184]	; (8001cd8 <main+0x398>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					u_sterzo = PID_controller(&pid_steering,
							vehicleState.yaw_rate_rad_sec,
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <main+0x398>)
 8001c2c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
					u_sterzo = PID_controller(&pid_steering,
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ffe0 	bl	8000bf8 <__aeabi_d2f>
 8001c38:	4606      	mov	r6, r0
							vehicleState.yaw_rate_ref_rad_sec);
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <main+0x398>)
 8001c3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
					u_sterzo = PID_controller(&pid_steering,
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7fe ffd8 	bl	8000bf8 <__aeabi_d2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	ee00 3a90 	vmov	s1, r3
 8001c4e:	ee00 6a10 	vmov	s0, r6
 8001c52:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <main+0x374>)
 8001c54:	f7ff fab4 	bl	80011c0 <PID_controller>
 8001c58:	ee10 3a10 	vmov	r3, s0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc7b 	bl	8000558 <__aeabi_f2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4920      	ldr	r1, [pc, #128]	; (8001ce8 <main+0x3a8>)
 8001c68:	e9c1 2300 	strd	r2, r3, [r1]
 8001c6c:	e03e      	b.n	8001cec <main+0x3ac>
 8001c6e:	bf00      	nop
 8001c70:	9fbe76c9 	.word	0x9fbe76c9
 8001c74:	3fe92f1a 	.word	0x3fe92f1a
 8001c78:	47ae147b 	.word	0x47ae147b
 8001c7c:	3f847ae1 	.word	0x3f847ae1
 8001c80:	54442d18 	.word	0x54442d18
 8001c84:	400921fb 	.word	0x400921fb
 8001c88:	200002a4 	.word	0x200002a4
 8001c8c:	20000334 	.word	0x20000334
 8001c90:	200002ec 	.word	0x200002ec
 8001c94:	2000037c 	.word	0x2000037c
 8001c98:	c0266666 	.word	0xc0266666
 8001c9c:	40266666 	.word	0x40266666
 8001ca0:	3c23d70a 	.word	0x3c23d70a
 8001ca4:	200004a0 	.word	0x200004a0
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	3b9374bc 	.word	0x3b9374bc
 8001cb0:	3a902de0 	.word	0x3a902de0
 8001cb4:	200004c0 	.word	0x200004c0
 8001cb8:	437a0000 	.word	0x437a0000
 8001cbc:	20000250 	.word	0x20000250
 8001cc0:	0800b924 	.word	0x0800b924
 8001cc4:	2000044c 	.word	0x2000044c
 8001cc8:	41200000 	.word	0x41200000
 8001ccc:	3e99999a 	.word	0x3e99999a
 8001cd0:	3a24b5be 	.word	0x3a24b5be
 8001cd4:	200004f0 	.word	0x200004f0
 8001cd8:	20000460 	.word	0x20000460
 8001cdc:	40c00000 	.word	0x40c00000
 8001ce0:	200004e0 	.word	0x200004e0
 8001ce4:	40668000 	.word	0x40668000
 8001ce8:	200004e8 	.word	0x200004e8
					servo_motor(-u_sterzo); //minus because yawrate and steering are opposite
 8001cec:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <main+0x560>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff7f 	bl	8000bf8 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef1 7a67 	vneg.f32	s15, s15
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	f000 fc66 	bl	80025d8 <servo_motor>
 8001d0c:	e69c      	b.n	8001a48 <main+0x108>
				} else {
					vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM
 8001d0e:	4b65      	ldr	r3, [pc, #404]	; (8001ea4 <main+0x564>)
 8001d10:	ed93 7a05 	vldr	s14, [r3, #20]
							* RPM_2_m_s;
 8001d14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d18:	ee67 7a27 	vmul.f32	s15, s14, s15
					vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM
 8001d1c:	4b61      	ldr	r3, [pc, #388]	; (8001ea4 <main+0x564>)
 8001d1e:	edc3 7a06 	vstr	s15, [r3, #24]
					vehicleState.yaw_rate_ref_rad_sec =
							vehicleState.linear_speed_m_s
 8001d22:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <main+0x564>)
 8001d24:	ed93 7a06 	vldr	s14, [r3, #24]
									/ data.curvature_radius_ref_m;
 8001d28:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <main+0x568>)
 8001d2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d32:	ee16 0a90 	vmov	r0, s13
 8001d36:	f7fe fc0f 	bl	8000558 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
					vehicleState.yaw_rate_ref_rad_sec =
 8001d3e:	4959      	ldr	r1, [pc, #356]	; (8001ea4 <main+0x564>)
 8001d40:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

					float yaw_rate_ref_rad_sec_abs =
							vehicleState.yaw_rate_ref_rad_sec;
 8001d44:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <main+0x564>)
 8001d46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
					float yaw_rate_ref_rad_sec_abs =
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff53 	bl	8000bf8 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
					float yaw_rate_rad_sec_abs = vehicleState.yaw_rate_rad_sec;
 8001d56:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <main+0x564>)
 8001d58:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff4a 	bl	8000bf8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
					if (vehicleState.yaw_rate_ref_rad_sec < 0)
 8001d68:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <main+0x564>)
 8001d6a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	f7fe feb9 	bl	8000aec <__aeabi_dcmplt>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00d      	beq.n	8001d9c <main+0x45c>
						yaw_rate_ref_rad_sec_abs =
								-vehicleState.yaw_rate_ref_rad_sec;
 8001d80:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <main+0x564>)
 8001d82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe ff35 	bl	8000bf8 <__aeabi_d2f>
 8001d8e:	4603      	mov	r3, r0
						yaw_rate_ref_rad_sec_abs =
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef1 7a67 	vneg.f32	s15, s15
 8001d98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
					if (vehicleState.yaw_rate_rad_sec < 0)
 8001d9c:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <main+0x564>)
 8001d9e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f7fe fe9f 	bl	8000aec <__aeabi_dcmplt>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00d      	beq.n	8001dd0 <main+0x490>
						yaw_rate_rad_sec_abs = -vehicleState.yaw_rate_rad_sec;
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <main+0x564>)
 8001db6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe ff1b 	bl	8000bf8 <__aeabi_d2f>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef1 7a67 	vneg.f32	s15, s15
 8001dcc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

					u_sterzo = PID_controller(&pid_steering,
 8001dd0:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001dd4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001dd8:	4834      	ldr	r0, [pc, #208]	; (8001eac <main+0x56c>)
 8001dda:	f7ff f9f1 	bl	80011c0 <PID_controller>
 8001dde:	ee10 3a10 	vmov	r3, s0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fbb8 	bl	8000558 <__aeabi_f2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	492c      	ldr	r1, [pc, #176]	; (8001ea0 <main+0x560>)
 8001dee:	e9c1 2300 	strd	r2, r3, [r1]
							yaw_rate_rad_sec_abs, yaw_rate_ref_rad_sec_abs);

					//minus because yawrate and steering are opposite
					if (data.curvature_radius_ref_m >= 0 && u_sterzo > 0)
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <main+0x568>)
 8001df4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	db14      	blt.n	8001e2c <main+0x4ec>
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <main+0x560>)
 8001e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	f7fe fe8a 	bl	8000b28 <__aeabi_dcmpgt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <main+0x4ec>
						u_sterzo *= -1.0;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <main+0x560>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	4614      	mov	r4, r2
 8001e22:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <main+0x560>)
 8001e28:	e9c3 4500 	strd	r4, r5, [r3]
					if (data.curvature_radius_ref_m < 0 && u_sterzo < 0)
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <main+0x568>)
 8001e2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	d514      	bpl.n	8001e66 <main+0x526>
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <main+0x560>)
 8001e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f7fe fe4f 	bl	8000aec <__aeabi_dcmplt>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <main+0x526>
						u_sterzo *= -1.0;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <main+0x560>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	4690      	mov	r8, r2
 8001e5c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <main+0x560>)
 8001e62:	e9c3 8900 	strd	r8, r9, [r3]

					servo_motor((int) u_sterzo);
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <main+0x560>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fe7a 	bl	8000b68 <__aeabi_d2iz>
 8001e74:	ee07 0a90 	vmov	s15, r0
 8001e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e80:	f000 fbaa 	bl	80025d8 <servo_motor>
 8001e84:	e5e0      	b.n	8001a48 <main+0x108>
						data.linear_speed_ref_m_s,
						vehicleState.motor_speed_ref_RPM,
						vehicleState.motor_speed_RPM, u_trazione);*/
			}
		} else {
			set_PWM_and_dir(0, vehicleState.motor_direction_ref);
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <main+0x564>)
 8001e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff f924 	bl	80010dc <set_PWM_and_dir>
			servo_motor(0);
 8001e94:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001eb0 <main+0x570>
 8001e98:	f000 fb9e 	bl	80025d8 <servo_motor>
		if (data.enable == 1 /*&& HardwareEnable == 1*/) {
 8001e9c:	e5d4      	b.n	8001a48 <main+0x108>
 8001e9e:	bf00      	nop
 8001ea0:	200004e8 	.word	0x200004e8
 8001ea4:	20000460 	.word	0x20000460
 8001ea8:	2000044c 	.word	0x2000044c
 8001eac:	200004c0 	.word	0x200004c0
 8001eb0:	00000000 	.word	0x00000000

08001eb4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b094      	sub	sp, #80	; 0x50
 8001eb8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	2230      	movs	r2, #48	; 0x30
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f006 ff24 	bl	8008d10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <SystemClock_Config+0xd0>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	4a28      	ldr	r2, [pc, #160]	; (8001f84 <SystemClock_Config+0xd0>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee8:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <SystemClock_Config+0xd0>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <SystemClock_Config+0xd4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <SystemClock_Config+0xd4>)
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <SystemClock_Config+0xd4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f14:	2302      	movs	r3, #2
 8001f16:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f1c:	2310      	movs	r3, #16
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f20:	2302      	movs	r3, #2
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f24:	2300      	movs	r3, #0
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001f28:	2310      	movs	r3, #16
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001f2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f30:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f32:	2304      	movs	r3, #4
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f36:	2307      	movs	r3, #7
 8001f38:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f3a:	f107 0320 	add.w	r3, r7, #32
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fddc 	bl	8004afc <HAL_RCC_OscConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0x9a>
		Error_Handler();
 8001f4a:	f000 fb3d 	bl	80025c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f4e:	230f      	movs	r3, #15
 8001f50:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f52:	2302      	movs	r3, #2
 8001f54:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 f83e 	bl	8004fec <HAL_RCC_ClockConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <SystemClock_Config+0xc6>
		Error_Handler();
 8001f76:	f000 fb27 	bl	80025c8 <Error_Handler>
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	3750      	adds	r7, #80	; 0x50
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40007000 	.word	0x40007000

08001f8c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f92:	463b      	mov	r3, r7
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fa0:	4a21      	ldr	r2, [pc, #132]	; (8002028 <MX_ADC1_Init+0x9c>)
 8001fa2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001faa:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fce:	4a17      	ldr	r2, [pc, #92]	; (800202c <MX_ADC1_Init+0xa0>)
 8001fd0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <MX_ADC1_Init+0x98>)
 8001fee:	f000 ff7d 	bl	8002eec <HAL_ADC_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_ADC1_Init+0x70>
		Error_Handler();
 8001ff8:	f000 fae6 	bl	80025c8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001ffc:	230b      	movs	r3, #11
 8001ffe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002000:	2301      	movs	r3, #1
 8002002:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002008:	463b      	mov	r3, r7
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_ADC1_Init+0x98>)
 800200e:	f000 ffb1 	bl	8002f74 <HAL_ADC_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC1_Init+0x90>
		Error_Handler();
 8002018:	f000 fad6 	bl	80025c8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000208 	.word	0x20000208
 8002028:	40012000 	.word	0x40012000
 800202c:	0f000001 	.word	0x0f000001

08002030 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_I2C1_Init+0x50>)
 8002036:	4a13      	ldr	r2, [pc, #76]	; (8002084 <MX_I2C1_Init+0x54>)
 8002038:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_I2C1_Init+0x50>)
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <MX_I2C1_Init+0x58>)
 800203e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_I2C1_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_I2C1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_I2C1_Init+0x50>)
 800204e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002052:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MX_I2C1_Init+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_I2C1_Init+0x50>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_I2C1_Init+0x50>)
 800206e:	f001 fc67 	bl	8003940 <HAL_I2C_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002078:	f000 faa6 	bl	80025c8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000250 	.word	0x20000250
 8002084:	40005400 	.word	0x40005400
 8002088:	000186a0 	.word	0x000186a0

0800208c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b096      	sub	sp, #88	; 0x58
 8002090:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80020a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2220      	movs	r2, #32
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f006 fe23 	bl	8008d10 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80020ca:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80020cc:	4a3f      	ldr	r2, [pc, #252]	; (80021cc <MX_TIM1_Init+0x140>)
 80020ce:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1681 - 1;
 80020d0:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80020d2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80020d6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1001 - 1;
 80020de:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80020e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020e4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80020f8:	4833      	ldr	r0, [pc, #204]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80020fa:	f003 f997 	bl	800542c <HAL_TIM_Base_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8002104:	f000 fa60 	bl	80025c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800210e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002112:	4619      	mov	r1, r3
 8002114:	482c      	ldr	r0, [pc, #176]	; (80021c8 <MX_TIM1_Init+0x13c>)
 8002116:	f003 fe43 	bl	8005da0 <HAL_TIM_ConfigClockSource>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM1_Init+0x98>
		Error_Handler();
 8002120:	f000 fa52 	bl	80025c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002124:	4828      	ldr	r0, [pc, #160]	; (80021c8 <MX_TIM1_Init+0x13c>)
 8002126:	f003 fa33 	bl	8005590 <HAL_TIM_PWM_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8002130:	f000 fa4a 	bl	80025c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800213c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002140:	4619      	mov	r1, r3
 8002142:	4821      	ldr	r0, [pc, #132]	; (80021c8 <MX_TIM1_Init+0x13c>)
 8002144:	f004 f9e8 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 800214e:	f000 fa3b 	bl	80025c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002152:	2360      	movs	r3, #96	; 0x60
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215a:	2300      	movs	r3, #0
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800215e:	2300      	movs	r3, #0
 8002160:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	4814      	ldr	r0, [pc, #80]	; (80021c8 <MX_TIM1_Init+0x13c>)
 8002178:	f003 fd50 	bl	8005c1c <HAL_TIM_PWM_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8002182:	f000 fa21 	bl	80025c8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800219a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80021aa:	f004 fa23 	bl	80065f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 80021b4:	f000 fa08 	bl	80025c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <MX_TIM1_Init+0x13c>)
 80021ba:	f000 fbd3 	bl	8002964 <HAL_TIM_MspPostInit>

}
 80021be:	bf00      	nop
 80021c0:	3758      	adds	r7, #88	; 0x58
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002a4 	.word	0x200002a4
 80021cc:	40010000 	.word	0x40010000

080021d0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f006 fd96 	bl	8008d10 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <MX_TIM2_Init+0xa4>)
 80021ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021f2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <MX_TIM2_Init+0xa4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <MX_TIM2_Init+0xa4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295 - 1;
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <MX_TIM2_Init+0xa4>)
 8002202:	f06f 0201 	mvn.w	r2, #1
 8002206:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <MX_TIM2_Init+0xa4>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <MX_TIM2_Init+0xa4>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002214:	2303      	movs	r3, #3
 8002216:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800221c:	2301      	movs	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800222c:	2301      	movs	r3, #1
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	4619      	mov	r1, r3
 800223e:	480d      	ldr	r0, [pc, #52]	; (8002274 <MX_TIM2_Init+0xa4>)
 8002240:	f003 fab0 	bl	80057a4 <HAL_TIM_Encoder_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM2_Init+0x7e>
		Error_Handler();
 800224a:	f000 f9bd 	bl	80025c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	4619      	mov	r1, r3
 800225a:	4806      	ldr	r0, [pc, #24]	; (8002274 <MX_TIM2_Init+0xa4>)
 800225c:	f004 f95c 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002266:	f000 f9af 	bl	80025c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800226a:	bf00      	nop
 800226c:	3730      	adds	r7, #48	; 0x30
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200002ec 	.word	0x200002ec

08002278 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	615a      	str	r2, [r3, #20]
 800228e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <MX_TIM10_Init+0x94>)
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <MX_TIM10_Init+0x98>)
 8002294:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 84 - 1;
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <MX_TIM10_Init+0x94>)
 8002298:	2253      	movs	r2, #83	; 0x53
 800229a:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <MX_TIM10_Init+0x94>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 1000 - 1;
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <MX_TIM10_Init+0x94>)
 80022a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022a8:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <MX_TIM10_Init+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <MX_TIM10_Init+0x94>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80022b6:	4815      	ldr	r0, [pc, #84]	; (800230c <MX_TIM10_Init+0x94>)
 80022b8:	f003 f8b8 	bl	800542c <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM10_Init+0x4e>
		Error_Handler();
 80022c2:	f000 f981 	bl	80025c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 80022c6:	4811      	ldr	r0, [pc, #68]	; (800230c <MX_TIM10_Init+0x94>)
 80022c8:	f003 f962 	bl	8005590 <HAL_TIM_PWM_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM10_Init+0x5e>
		Error_Handler();
 80022d2:	f000 f979 	bl	80025c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022d6:	2360      	movs	r3, #96	; 0x60
 80022d8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	4619      	mov	r1, r3
 80022ec:	4807      	ldr	r0, [pc, #28]	; (800230c <MX_TIM10_Init+0x94>)
 80022ee:	f003 fc95 	bl	8005c1c <HAL_TIM_PWM_ConfigChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80022f8:	f000 f966 	bl	80025c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 80022fc:	4803      	ldr	r0, [pc, #12]	; (800230c <MX_TIM10_Init+0x94>)
 80022fe:	f000 fb31 	bl	8002964 <HAL_TIM_MspPostInit>

}
 8002302:	bf00      	nop
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000334 	.word	0x20000334
 8002310:	40014400 	.word	0x40014400

08002314 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <MX_TIM11_Init+0x40>)
 800231a:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <MX_TIM11_Init+0x44>)
 800231c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 120 - 1;
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <MX_TIM11_Init+0x40>)
 8002320:	2277      	movs	r2, #119	; 0x77
 8002322:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <MX_TIM11_Init+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 7000 - 1;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <MX_TIM11_Init+0x40>)
 800232c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002330:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MX_TIM11_Init+0x40>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_TIM11_Init+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_TIM11_Init+0x40>)
 8002340:	f003 f874 	bl	800542c <HAL_TIM_Base_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM11_Init+0x3a>
		Error_Handler();
 800234a:	f000 f93d 	bl	80025c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000037c 	.word	0x2000037c
 8002358:	40014800 	.word	0x40014800

0800235c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <MX_USART2_UART_Init+0x50>)
 8002364:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800236c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002394:	f004 f994 	bl	80066c0 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800239e:	f000 f913 	bl	80025c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200003c4 	.word	0x200003c4
 80023ac:	40004400 	.word	0x40004400

080023b0 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <MX_USART6_UART_Init+0x50>)
 80023b8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_USART6_UART_Init+0x4c>)
 80023e8:	f004 f96a 	bl	80066c0 <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 80023f2:	f000 f8e9 	bl	80025c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000408 	.word	0x20000408
 8002400:	40011400 	.word	0x40011400

08002404 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a30      	ldr	r2, [pc, #192]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <MX_GPIO_Init+0xe0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <MX_GPIO_Init+0xe0>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <MX_GPIO_Init+0xe0>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <MX_GPIO_Init+0xe0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800248a:	2200      	movs	r2, #0
 800248c:	2101      	movs	r1, #1
 800248e:	4816      	ldr	r0, [pc, #88]	; (80024e8 <MX_GPIO_Init+0xe4>)
 8002490:	f001 fa24 	bl	80038dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002498:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800249a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800249e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	480f      	ldr	r0, [pc, #60]	; (80024e8 <MX_GPIO_Init+0xe4>)
 80024ac:	f001 f892 	bl	80035d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR_Pin */
	GPIO_InitStruct.Pin = DIR_Pin;
 80024b0:	2301      	movs	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4808      	ldr	r0, [pc, #32]	; (80024e8 <MX_GPIO_Init+0xe4>)
 80024c8:	f001 f884 	bl	80035d4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	2028      	movs	r0, #40	; 0x28
 80024d2:	f001 f848 	bl	8003566 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024d6:	2028      	movs	r0, #40	; 0x28
 80024d8:	f001 f861 	bl	800359e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80024dc:	bf00      	nop
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020800 	.word	0x40020800

080024ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Timer11 for temporization
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d123      	bne.n	8002544 <HAL_TIM_PeriodElapsedCallback+0x58>
		Flag_10ms = 1;
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

		//Encoder
		vehicleState.counts = TIM2->CNT;
 8002502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	461a      	mov	r2, r3
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800250c:	601a      	str	r2, [r3, #0]
		TIM2->CNT = TIM2->ARR / 2;
 800250e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	6253      	str	r3, [r2, #36]	; 0x24

		//References
		time_counter++;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002524:	6013      	str	r3, [r2, #0]

		if (time_counter == 200) {
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2bc8      	cmp	r3, #200	; 0xc8
 800252c:	d10a      	bne.n	8002544 <HAL_TIM_PeriodElapsedCallback+0x58>
			data.curvature_radius_ref_m = 1.3; //2.2;//2.2; //1.3;
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002532:	60da      	str	r2, [r3, #12]
			pid_steering.Iterm = 0;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	61da      	str	r2, [r3, #28]
			pid_steering.e_old = 0;
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
		 data.enable = 0;
		 }
		 */

	}
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	2000037c 	.word	0x2000037c
 8002554:	200004f0 	.word	0x200004f0
 8002558:	20000460 	.word	0x20000460
 800255c:	200004f4 	.word	0x200004f4
 8002560:	2000044c 	.word	0x2000044c
 8002564:	3fa66666 	.word	0x3fa66666
 8002568:	200004c0 	.word	0x200004c0

0800256c <__io_putchar>:

//USART2 -> ST_Link UART for DEBUG with USB (e.g. PUTTY)
int __io_putchar(int ch) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8002574:	1d39      	adds	r1, r7, #4
 8002576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800257a:	2201      	movs	r2, #1
 800257c:	4803      	ldr	r0, [pc, #12]	; (800258c <__io_putchar+0x20>)
 800257e:	f004 f8ec 	bl	800675a <HAL_UART_Transmit>
	return ch;
 8002582:	687b      	ldr	r3, [r7, #4]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	200003c4 	.word	0x200003c4

08002590 <HAL_GPIO_EXTI_Callback>:

//BLUE user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a0:	d10a      	bne.n	80025b8 <HAL_GPIO_EXTI_Callback+0x28>
		if (HardwareEnable == 0) {
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_GPIO_EXTI_Callback+0x22>
			HardwareEnable = 1;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
		} else {
			HardwareEnable = 0;
		}
	}
}
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_EXTI_Callback+0x28>
			HardwareEnable = 0;
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025d0:	e7fe      	b.n	80025d0 <Error_Handler+0x8>
 80025d2:	0000      	movs	r0, r0
 80025d4:	0000      	movs	r0, r0
	...

080025d8 <servo_motor>:
#include "servo_motor.h"



void servo_motor(float angolo)
{
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	ed87 0a01 	vstr	s0, [r7, #4]
	float tic;
	tic = 0.02;
 80025e2:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <servo_motor+0xb8>)
 80025e4:	617b      	str	r3, [r7, #20]
	  float ccr;
	  float conv_angolo;

	  if(angolo < MIN_ANGOLO)
 80025e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ea:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80025ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	d502      	bpl.n	80025fe <servo_motor+0x26>

		   angolo = MIN_ANGOLO;
 80025f8:	4b26      	ldr	r3, [pc, #152]	; (8002694 <servo_motor+0xbc>)
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	e00a      	b.n	8002614 <servo_motor+0x3c>

	  else if (angolo > MAX_ANGOLO)
 80025fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002602:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	dd01      	ble.n	8002614 <servo_motor+0x3c>

		   angolo = MAX_ANGOLO;
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <servo_motor+0xc0>)
 8002612:	607b      	str	r3, [r7, #4]

	  conv_angolo = angolo + DRITTO;
 8002614:	edd7 7a01 	vldr	s15, [r7, #4]
 8002618:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800269c <servo_motor+0xc4>
 800261c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002620:	edc7 7a04 	vstr	s15, [r7, #16]

	  ccr=(((0.01111*conv_angolo)+0.5)/tic);
 8002624:	6938      	ldr	r0, [r7, #16]
 8002626:	f7fd ff97 	bl	8000558 <__aeabi_f2d>
 800262a:	a317      	add	r3, pc, #92	; (adr r3, 8002688 <servo_motor+0xb0>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fd ffea 	bl	8000608 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <servo_motor+0xc8>)
 8002642:	f7fd fe2b 	bl	800029c <__adddf3>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4614      	mov	r4, r2
 800264c:	461d      	mov	r5, r3
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7fd ff82 	bl	8000558 <__aeabi_f2d>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4620      	mov	r0, r4
 800265a:	4629      	mov	r1, r5
 800265c:	f7fe f8fe 	bl	800085c <__aeabi_ddiv>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fac6 	bl	8000bf8 <__aeabi_d2f>
 800266c:	4603      	mov	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]
	  TIM1->CCR1=ccr;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <servo_motor+0xcc>)
 8002672:	edd7 7a03 	vldr	s15, [r7, #12]
 8002676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800267a:	ee17 2a90 	vmov	r2, s15
 800267e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	f544bb1b 	.word	0xf544bb1b
 800268c:	3f86c0d6 	.word	0x3f86c0d6
 8002690:	3ca3d70a 	.word	0x3ca3d70a
 8002694:	c1f00000 	.word	0xc1f00000
 8002698:	41f00000 	.word	0x41f00000
 800269c:	42b80000 	.word	0x42b80000
 80026a0:	3fe00000 	.word	0x3fe00000
 80026a4:	40010000 	.word	0x40010000

080026a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_MspInit+0x4c>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_MspInit+0x4c>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026e6:	2007      	movs	r0, #7
 80026e8:	f000 ff32 	bl	8003550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800

080026f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a17      	ldr	r2, [pc, #92]	; (8002774 <HAL_ADC_MspInit+0x7c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d127      	bne.n	800276a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_ADC_MspInit+0x80>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a15      	ldr	r2, [pc, #84]	; (8002778 <HAL_ADC_MspInit+0x80>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <HAL_ADC_MspInit+0x80>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_ADC_MspInit+0x80>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <HAL_ADC_MspInit+0x80>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_ADC_MspInit+0x80>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002752:	2302      	movs	r3, #2
 8002754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002756:	2303      	movs	r3, #3
 8002758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	; (800277c <HAL_ADC_MspInit+0x84>)
 8002766:	f000 ff35 	bl	80035d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800276a:	bf00      	nop
 800276c:	3728      	adds	r7, #40	; 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40012000 	.word	0x40012000
 8002778:	40023800 	.word	0x40023800
 800277c:	40020800 	.word	0x40020800

08002780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <HAL_I2C_MspInit+0x84>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d12b      	bne.n	80027fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <HAL_I2C_MspInit+0x88>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_I2C_MspInit+0x88>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_I2C_MspInit+0x88>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_A_Pin|I2C_B_Pin;
 80027be:	23c0      	movs	r3, #192	; 0xc0
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c2:	2312      	movs	r3, #18
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ce:	2304      	movs	r3, #4
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <HAL_I2C_MspInit+0x8c>)
 80027da:	f000 fefb 	bl	80035d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_I2C_MspInit+0x88>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a08      	ldr	r2, [pc, #32]	; (8002808 <HAL_I2C_MspInit+0x88>)
 80027e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_I2C_MspInit+0x88>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	; 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40005400 	.word	0x40005400
 8002808:	40023800 	.word	0x40023800
 800280c:	40020400 	.word	0x40020400

08002810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2a      	ldr	r2, [pc, #168]	; (80028c8 <HAL_TIM_Base_MspInit+0xb8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d11e      	bne.n	8002860 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	2018      	movs	r0, #24
 8002844:	f000 fe8f 	bl	8003566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002848:	2018      	movs	r0, #24
 800284a:	f000 fea8 	bl	800359e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	201a      	movs	r0, #26
 8002854:	f000 fe87 	bl	8003566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002858:	201a      	movs	r0, #26
 800285a:	f000 fea0 	bl	800359e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800285e:	e02e      	b.n	80028be <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <HAL_TIM_Base_MspInit+0xc0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10e      	bne.n	8002888 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
}
 8002886:	e01a      	b.n	80028be <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <HAL_TIM_Base_MspInit+0xc4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d115      	bne.n	80028be <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 800289c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_TIM_Base_MspInit+0xbc>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	201a      	movs	r0, #26
 80028b4:	f000 fe57 	bl	8003566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80028b8:	201a      	movs	r0, #26
 80028ba:	f000 fe70 	bl	800359e <HAL_NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40014400 	.word	0x40014400
 80028d4:	40014800 	.word	0x40014800

080028d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d12b      	bne.n	8002952 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_TIM_Encoder_MspInit+0x84>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_TIM_Encoder_MspInit+0x84>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_TIM_Encoder_MspInit+0x84>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_TIM_Encoder_MspInit+0x84>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_TIM_Encoder_MspInit+0x84>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_TIM_Encoder_MspInit+0x84>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8002932:	2303      	movs	r3, #3
 8002934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002942:	2301      	movs	r3, #1
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <HAL_TIM_Encoder_MspInit+0x88>)
 800294e:	f000 fe41 	bl	80035d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40020000 	.word	0x40020000

08002964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a25      	ldr	r2, [pc, #148]	; (8002a18 <HAL_TIM_MspPostInit+0xb4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11f      	bne.n	80029c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80029a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	4818      	ldr	r0, [pc, #96]	; (8002a20 <HAL_TIM_MspPostInit+0xbc>)
 80029c0:	f000 fe08 	bl	80035d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80029c4:	e023      	b.n	8002a0e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_TIM_MspPostInit+0xc0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d11e      	bne.n	8002a0e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTORE_Pin;
 80029ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80029fe:	2303      	movs	r3, #3
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_MOTORE_GPIO_Port, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4807      	ldr	r0, [pc, #28]	; (8002a28 <HAL_TIM_MspPostInit+0xc4>)
 8002a0a:	f000 fde3 	bl	80035d4 <HAL_GPIO_Init>
}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40014400 	.word	0x40014400
 8002a28:	40020400 	.word	0x40020400

08002a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a32      	ldr	r2, [pc, #200]	; (8002b14 <HAL_UART_MspInit+0xe8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d12c      	bne.n	8002aa8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_1_Pin|USART_2_Pin;
 8002a86:	230c      	movs	r3, #12
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a96:	2307      	movs	r3, #7
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	f107 031c 	add.w	r3, r7, #28
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	481e      	ldr	r0, [pc, #120]	; (8002b1c <HAL_UART_MspInit+0xf0>)
 8002aa2:	f000 fd97 	bl	80035d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002aa6:	e030      	b.n	8002b0a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <HAL_UART_MspInit+0xf4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12b      	bne.n	8002b0a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002abc:	f043 0320 	orr.w	r3, r3, #32
 8002ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aea:	23c0      	movs	r3, #192	; 0xc0
 8002aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002afa:	2308      	movs	r3, #8
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	4619      	mov	r1, r3
 8002b04:	4807      	ldr	r0, [pc, #28]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002b06:	f000 fd65 	bl	80035d4 <HAL_GPIO_Init>
}
 8002b0a:	bf00      	nop
 8002b0c:	3730      	adds	r7, #48	; 0x30
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40004400 	.word	0x40004400
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40011400 	.word	0x40011400
 8002b24:	40020800 	.word	0x40020800

08002b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <NMI_Handler+0x4>

08002b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b32:	e7fe      	b.n	8002b32 <HardFault_Handler+0x4>

08002b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b38:	e7fe      	b.n	8002b38 <MemManage_Handler+0x4>

08002b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3e:	e7fe      	b.n	8002b3e <BusFault_Handler+0x4>

08002b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <UsageFault_Handler+0x4>

08002b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b74:	f000 f976 	bl	8002e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002b82:	f002 ff43 	bl	8005a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200002a4 	.word	0x200002a4

08002b90 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b94:	4803      	ldr	r0, [pc, #12]	; (8002ba4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002b96:	f002 ff39 	bl	8005a0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002b9a:	4803      	ldr	r0, [pc, #12]	; (8002ba8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002b9c:	f002 ff36 	bl	8005a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200002a4 	.word	0x200002a4
 8002ba8:	2000037c 	.word	0x2000037c

08002bac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002bb0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bb4:	f000 feac 	bl	8003910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return 1;
 8002bc0:	2301      	movs	r3, #1
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_kill>:

int _kill(int pid, int sig)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bd6:	f006 f90f 	bl	8008df8 <__errno>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2216      	movs	r2, #22
 8002bde:	601a      	str	r2, [r3, #0]
  return -1;
 8002be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_exit>:

void _exit (int status)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ffe7 	bl	8002bcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bfe:	e7fe      	b.n	8002bfe <_exit+0x12>

08002c00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e00a      	b.n	8002c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c12:	f3af 8000 	nop.w
 8002c16:	4601      	mov	r1, r0
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	60ba      	str	r2, [r7, #8]
 8002c1e:	b2ca      	uxtb	r2, r1
 8002c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3301      	adds	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	dbf0      	blt.n	8002c12 <_read+0x12>
  }

  return len;
 8002c30:	687b      	ldr	r3, [r7, #4]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e009      	b.n	8002c60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	60ba      	str	r2, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fc89 	bl	800256c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	dbf1      	blt.n	8002c4c <_write+0x12>
  }
  return len;
 8002c68:	687b      	ldr	r3, [r7, #4]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_close>:

int _close(int file)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <_isatty>:

int _isatty(int file)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <_sbrk+0x5c>)
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <_sbrk+0x60>)
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <_sbrk+0x64>)
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <_sbrk+0x68>)
 8002cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <_sbrk+0x64>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d207      	bcs.n	8002d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d0c:	f006 f874 	bl	8008df8 <__errno>
 8002d10:	4603      	mov	r3, r0
 8002d12:	220c      	movs	r2, #12
 8002d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	e009      	b.n	8002d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <_sbrk+0x64>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <_sbrk+0x64>)
 8002d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20018000 	.word	0x20018000
 8002d3c:	00000400 	.word	0x00000400
 8002d40:	200004f8 	.word	0x200004f8
 8002d44:	20000650 	.word	0x20000650

08002d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <SystemInit+0x20>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <SystemInit+0x20>)
 8002d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d72:	490e      	ldr	r1, [pc, #56]	; (8002dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d74:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d88:	4c0b      	ldr	r4, [pc, #44]	; (8002db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d96:	f7ff ffd7 	bl	8002d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d9a:	f006 f833 	bl	8008e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9e:	f7fe fdcf 	bl	8001940 <main>
  bx  lr    
 8002da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dac:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002db0:	0800bd98 	.word	0x0800bd98
  ldr r2, =_sbss
 8002db4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002db8:	2000064c 	.word	0x2000064c

08002dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dbc:	e7fe      	b.n	8002dbc <ADC_IRQHandler>
	...

08002dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <HAL_Init+0x40>)
 8002dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <HAL_Init+0x40>)
 8002dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_Init+0x40>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de8:	2003      	movs	r0, #3
 8002dea:	f000 fbb1 	bl	8003550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f000 f808 	bl	8002e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df4:	f7ff fc58 	bl	80026a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023c00 	.word	0x40023c00

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_InitTick+0x54>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_InitTick+0x58>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fbc9 	bl	80035ba <HAL_SYSTICK_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00e      	b.n	8002e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d80a      	bhi.n	8002e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f000 fb91 	bl	8003566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e44:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <HAL_InitTick+0x5c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000010 	.word	0x20000010
 8002e5c:	20000018 	.word	0x20000018
 8002e60:	20000014 	.word	0x20000014

08002e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_IncTick+0x20>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_IncTick+0x24>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <HAL_IncTick+0x24>)
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000018 	.word	0x20000018
 8002e88:	200004fc 	.word	0x200004fc

08002e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_GetTick+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	200004fc 	.word	0x200004fc

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff ffee 	bl	8002e8c <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_Delay+0x44>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eca:	bf00      	nop
 8002ecc:	f7ff ffde 	bl	8002e8c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000018 	.word	0x20000018

08002eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e033      	b.n	8002f6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fbf4 	bl	80026f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f32:	f023 0302 	bic.w	r3, r3, #2
 8002f36:	f043 0202 	orr.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f93a 	bl	80031b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
 8002f5a:	e001      	b.n	8002f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x1c>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e105      	b.n	800319c <HAL_ADC_ConfigChannel+0x228>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b09      	cmp	r3, #9
 8002f9e:	d925      	bls.n	8002fec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68d9      	ldr	r1, [r3, #12]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b1e      	subs	r3, #30
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68d9      	ldr	r1, [r3, #12]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	4603      	mov	r3, r0
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4403      	add	r3, r0
 8002fde:	3b1e      	subs	r3, #30
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	e022      	b.n	8003032 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6919      	ldr	r1, [r3, #16]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	2207      	movs	r2, #7
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	400a      	ands	r2, r1
 800300e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6919      	ldr	r1, [r3, #16]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	4603      	mov	r3, r0
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4403      	add	r3, r0
 8003028:	409a      	lsls	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b06      	cmp	r3, #6
 8003038:	d824      	bhi.n	8003084 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	3b05      	subs	r3, #5
 800304c:	221f      	movs	r2, #31
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4618      	mov	r0, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3b05      	subs	r3, #5
 8003076:	fa00 f203 	lsl.w	r2, r0, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	635a      	str	r2, [r3, #52]	; 0x34
 8003082:	e04c      	b.n	800311e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d824      	bhi.n	80030d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	3b23      	subs	r3, #35	; 0x23
 800309e:	221f      	movs	r2, #31
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43da      	mvns	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	400a      	ands	r2, r1
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3b23      	subs	r3, #35	; 0x23
 80030c8:	fa00 f203 	lsl.w	r2, r0, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
 80030d4:	e023      	b.n	800311e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	3b41      	subs	r3, #65	; 0x41
 80030e8:	221f      	movs	r2, #31
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	400a      	ands	r2, r1
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	4618      	mov	r0, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	3b41      	subs	r3, #65	; 0x41
 8003112:	fa00 f203 	lsl.w	r2, r0, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <HAL_ADC_ConfigChannel+0x234>)
 8003120:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_ADC_ConfigChannel+0x238>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d109      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x1cc>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b12      	cmp	r3, #18
 8003132:	d105      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a19      	ldr	r2, [pc, #100]	; (80031ac <HAL_ADC_ConfigChannel+0x238>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d123      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x21e>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b10      	cmp	r3, #16
 8003150:	d003      	beq.n	800315a <HAL_ADC_ConfigChannel+0x1e6>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b11      	cmp	r3, #17
 8003158:	d11b      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b10      	cmp	r3, #16
 800316c:	d111      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_ADC_ConfigChannel+0x23c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <HAL_ADC_ConfigChannel+0x240>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	0c9a      	lsrs	r2, r3, #18
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003184:	e002      	b.n	800318c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3b01      	subs	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f9      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40012300 	.word	0x40012300
 80031ac:	40012000 	.word	0x40012000
 80031b0:	20000010 	.word	0x20000010
 80031b4:	431bde83 	.word	0x431bde83

080031b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c0:	4b79      	ldr	r3, [pc, #484]	; (80033a8 <ADC_Init+0x1f0>)
 80031c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	021a      	lsls	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6899      	ldr	r1, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	4a58      	ldr	r2, [pc, #352]	; (80033ac <ADC_Init+0x1f4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800325e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6899      	ldr	r1, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6899      	ldr	r1, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	e00f      	b.n	80032b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0202 	bic.w	r2, r2, #2
 80032c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7e1b      	ldrb	r3, [r3, #24]
 80032d0:	005a      	lsls	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01b      	beq.n	800331c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003302:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	3b01      	subs	r3, #1
 8003310:	035a      	lsls	r2, r3, #13
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	e007      	b.n	800332c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800332a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	3b01      	subs	r3, #1
 8003348:	051a      	lsls	r2, r3, #20
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800336e:	025a      	lsls	r2, r3, #9
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	029a      	lsls	r2, r3, #10
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40012300 	.word	0x40012300
 80033ac:	0f000001 	.word	0x0f000001

080033b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e2:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	60d3      	str	r3, [r2, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4907      	ldr	r1, [pc, #28]	; (800344c <__NVIC_EnableIRQ+0x38>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db0a      	blt.n	800347a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	490c      	ldr	r1, [pc, #48]	; (800349c <__NVIC_SetPriority+0x4c>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003478:	e00a      	b.n	8003490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4908      	ldr	r1, [pc, #32]	; (80034a0 <__NVIC_SetPriority+0x50>)
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3b04      	subs	r3, #4
 8003488:	0112      	lsls	r2, r2, #4
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	440b      	add	r3, r1
 800348e:	761a      	strb	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	; 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f1c3 0307 	rsb	r3, r3, #7
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf28      	it	cs
 80034c2:	2304      	movcs	r3, #4
 80034c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <NVIC_EncodePriority+0x30>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b03      	subs	r3, #3
 80034d2:	e000      	b.n	80034d6 <NVIC_EncodePriority+0x32>
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	4313      	orrs	r3, r2
         );
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	; 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351c:	d301      	bcc.n	8003522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351e:	2301      	movs	r3, #1
 8003520:	e00f      	b.n	8003542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <SysTick_Config+0x40>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352a:	210f      	movs	r1, #15
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f7ff ff8e 	bl	8003450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <SysTick_Config+0x40>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <SysTick_Config+0x40>)
 800353c:	2207      	movs	r2, #7
 800353e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000e010 	.word	0xe000e010

08003550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff29 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003578:	f7ff ff3e 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 800357c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff8e 	bl	80034a4 <NVIC_EncodePriority>
 8003588:	4602      	mov	r2, r0
 800358a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff5d 	bl	8003450 <__NVIC_SetPriority>
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff31 	bl	8003414 <__NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffa2 	bl	800350c <SysTick_Config>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	e159      	b.n	80038a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035f0:	2201      	movs	r2, #1
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	f040 8148 	bne.w	800389e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d005      	beq.n	8003626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003622:	2b02      	cmp	r3, #2
 8003624:	d130      	bne.n	8003688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2203      	movs	r2, #3
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 0201 	and.w	r2, r3, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d017      	beq.n	80036c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d123      	bne.n	8003718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	08da      	lsrs	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3208      	adds	r2, #8
 80036d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	220f      	movs	r2, #15
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	08da      	lsrs	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3208      	adds	r2, #8
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0203 	and.w	r2, r3, #3
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a2 	beq.w	800389e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b57      	ldr	r3, [pc, #348]	; (80038bc <HAL_GPIO_Init+0x2e8>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	4a56      	ldr	r2, [pc, #344]	; (80038bc <HAL_GPIO_Init+0x2e8>)
 8003764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003768:	6453      	str	r3, [r2, #68]	; 0x44
 800376a:	4b54      	ldr	r3, [pc, #336]	; (80038bc <HAL_GPIO_Init+0x2e8>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003776:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_GPIO_Init+0x2ec>)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	3302      	adds	r3, #2
 800377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	220f      	movs	r2, #15
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a49      	ldr	r2, [pc, #292]	; (80038c4 <HAL_GPIO_Init+0x2f0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d019      	beq.n	80037d6 <HAL_GPIO_Init+0x202>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a48      	ldr	r2, [pc, #288]	; (80038c8 <HAL_GPIO_Init+0x2f4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_Init+0x1fe>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a47      	ldr	r2, [pc, #284]	; (80038cc <HAL_GPIO_Init+0x2f8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00d      	beq.n	80037ce <HAL_GPIO_Init+0x1fa>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a46      	ldr	r2, [pc, #280]	; (80038d0 <HAL_GPIO_Init+0x2fc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <HAL_GPIO_Init+0x1f6>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a45      	ldr	r2, [pc, #276]	; (80038d4 <HAL_GPIO_Init+0x300>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_GPIO_Init+0x1f2>
 80037c2:	2304      	movs	r3, #4
 80037c4:	e008      	b.n	80037d8 <HAL_GPIO_Init+0x204>
 80037c6:	2307      	movs	r3, #7
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x204>
 80037ca:	2303      	movs	r3, #3
 80037cc:	e004      	b.n	80037d8 <HAL_GPIO_Init+0x204>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e002      	b.n	80037d8 <HAL_GPIO_Init+0x204>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_GPIO_Init+0x204>
 80037d6:	2300      	movs	r3, #0
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f002 0203 	and.w	r2, r2, #3
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	4093      	lsls	r3, r2
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e8:	4935      	ldr	r1, [pc, #212]	; (80038c0 <HAL_GPIO_Init+0x2ec>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f6:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <HAL_GPIO_Init+0x304>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381a:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <HAL_GPIO_Init+0x304>)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003820:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_GPIO_Init+0x304>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003844:	4a24      	ldr	r2, [pc, #144]	; (80038d8 <HAL_GPIO_Init+0x304>)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384a:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <HAL_GPIO_Init+0x304>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800386e:	4a1a      	ldr	r2, [pc, #104]	; (80038d8 <HAL_GPIO_Init+0x304>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003874:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_GPIO_Init+0x304>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003898:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <HAL_GPIO_Init+0x304>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	f67f aea2 	bls.w	80035f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40013800 	.word	0x40013800
 80038c4:	40020000 	.word	0x40020000
 80038c8:	40020400 	.word	0x40020400
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020c00 	.word	0x40020c00
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40013c00 	.word	0x40013c00

080038dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	807b      	strh	r3, [r7, #2]
 80038e8:	4613      	mov	r3, r2
 80038ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038ec:	787b      	ldrb	r3, [r7, #1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f2:	887a      	ldrh	r2, [r7, #2]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038f8:	e003      	b.n	8003902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038fa:	887b      	ldrh	r3, [r7, #2]
 80038fc:	041a      	lsls	r2, r3, #16
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	619a      	str	r2, [r3, #24]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d006      	beq.n	8003934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fe2e 	bl	8002590 <HAL_GPIO_EXTI_Callback>
  }
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40013c00 	.word	0x40013c00

08003940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e12b      	b.n	8003baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe ff0a 	bl	8002780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039a4:	f001 fd1a 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 80039a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4a81      	ldr	r2, [pc, #516]	; (8003bb4 <HAL_I2C_Init+0x274>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d807      	bhi.n	80039c4 <HAL_I2C_Init+0x84>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a80      	ldr	r2, [pc, #512]	; (8003bb8 <HAL_I2C_Init+0x278>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bf94      	ite	ls
 80039bc:	2301      	movls	r3, #1
 80039be:	2300      	movhi	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e006      	b.n	80039d2 <HAL_I2C_Init+0x92>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a7d      	ldr	r2, [pc, #500]	; (8003bbc <HAL_I2C_Init+0x27c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	bf94      	ite	ls
 80039cc:	2301      	movls	r3, #1
 80039ce:	2300      	movhi	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0e7      	b.n	8003baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a78      	ldr	r2, [pc, #480]	; (8003bc0 <HAL_I2C_Init+0x280>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0c9b      	lsrs	r3, r3, #18
 80039e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a6a      	ldr	r2, [pc, #424]	; (8003bb4 <HAL_I2C_Init+0x274>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d802      	bhi.n	8003a14 <HAL_I2C_Init+0xd4>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3301      	adds	r3, #1
 8003a12:	e009      	b.n	8003a28 <HAL_I2C_Init+0xe8>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	4a69      	ldr	r2, [pc, #420]	; (8003bc4 <HAL_I2C_Init+0x284>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	3301      	adds	r3, #1
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	495c      	ldr	r1, [pc, #368]	; (8003bb4 <HAL_I2C_Init+0x274>)
 8003a44:	428b      	cmp	r3, r1
 8003a46:	d819      	bhi.n	8003a7c <HAL_I2C_Init+0x13c>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1e59      	subs	r1, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a56:	1c59      	adds	r1, r3, #1
 8003a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_I2C_Init+0x138>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1e59      	subs	r1, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a76:	e051      	b.n	8003b1c <HAL_I2C_Init+0x1dc>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	e04f      	b.n	8003b1c <HAL_I2C_Init+0x1dc>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d111      	bne.n	8003aa8 <HAL_I2C_Init+0x168>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e58      	subs	r0, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	440b      	add	r3, r1
 8003a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	e012      	b.n	8003ace <HAL_I2C_Init+0x18e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1e58      	subs	r0, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	0099      	lsls	r1, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Init+0x196>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e022      	b.n	8003b1c <HAL_I2C_Init+0x1dc>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10e      	bne.n	8003afc <HAL_I2C_Init+0x1bc>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e58      	subs	r0, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	440b      	add	r3, r1
 8003aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af0:	3301      	adds	r3, #1
 8003af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afa:	e00f      	b.n	8003b1c <HAL_I2C_Init+0x1dc>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e58      	subs	r0, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	0099      	lsls	r1, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	6809      	ldr	r1, [r1, #0]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6911      	ldr	r1, [r2, #16]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68d2      	ldr	r2, [r2, #12]
 8003b56:	4311      	orrs	r1, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	000186a0 	.word	0x000186a0
 8003bb8:	001e847f 	.word	0x001e847f
 8003bbc:	003d08ff 	.word	0x003d08ff
 8003bc0:	431bde83 	.word	0x431bde83
 8003bc4:	10624dd3 	.word	0x10624dd3

08003bc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	817b      	strh	r3, [r7, #10]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7ff f956 	bl	8002e8c <HAL_GetTick>
 8003be0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	f040 80e0 	bne.w	8003db0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2319      	movs	r3, #25
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	4970      	ldr	r1, [pc, #448]	; (8003dbc <HAL_I2C_Master_Transmit+0x1f4>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fda0 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
 8003c08:	e0d3      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_I2C_Master_Transmit+0x50>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e0cc      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x1ea>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d007      	beq.n	8003c3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2221      	movs	r2, #33	; 0x21
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	893a      	ldrh	r2, [r7, #8]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a50      	ldr	r2, [pc, #320]	; (8003dc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c80:	8979      	ldrh	r1, [r7, #10]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	6a3a      	ldr	r2, [r7, #32]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fc0a 	bl	80044a0 <I2C_MasterRequestWrite>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e08d      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cac:	e066      	b.n	8003d7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	6a39      	ldr	r1, [r7, #32]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fe1a 	bl	80048ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d107      	bne.n	8003cd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e06b      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d11b      	bne.n	8003d50 <HAL_I2C_Master_Transmit+0x188>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d017      	beq.n	8003d50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	6a39      	ldr	r1, [r7, #32]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fe0a 	bl	800496e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00d      	beq.n	8003d7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d107      	bne.n	8003d78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e01a      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d194      	bne.n	8003cae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	00100002 	.word	0x00100002
 8003dc0:	ffff0000 	.word	0xffff0000

08003dc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08c      	sub	sp, #48	; 0x30
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	817b      	strh	r3, [r7, #10]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dd8:	f7ff f858 	bl	8002e8c <HAL_GetTick>
 8003ddc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	f040 820b 	bne.w	8004202 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2319      	movs	r3, #25
 8003df2:	2201      	movs	r2, #1
 8003df4:	497c      	ldr	r1, [pc, #496]	; (8003fe8 <HAL_I2C_Master_Receive+0x224>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fca2 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
 8003e04:	e1fe      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_I2C_Master_Receive+0x50>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e1f7      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d007      	beq.n	8003e3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2222      	movs	r2, #34	; 0x22
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2210      	movs	r2, #16
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	893a      	ldrh	r2, [r7, #8]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a5c      	ldr	r2, [pc, #368]	; (8003fec <HAL_I2C_Master_Receive+0x228>)
 8003e7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e7c:	8979      	ldrh	r1, [r7, #10]
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fb8e 	bl	80045a4 <I2C_MasterRequestRead>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e1b8      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d113      	bne.n	8003ec2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	623b      	str	r3, [r7, #32]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	623b      	str	r3, [r7, #32]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	623b      	str	r3, [r7, #32]
 8003eae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e18c      	b.n	80041dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d11b      	bne.n	8003f02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e16c      	b.n	80041dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d11b      	bne.n	8003f42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	e14c      	b.n	80041dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f68:	e138      	b.n	80041dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	f200 80f1 	bhi.w	8004156 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d123      	bne.n	8003fc4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fd35 	bl	80049f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e139      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fc2:	e10b      	b.n	80041dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d14e      	bne.n	800406a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	4906      	ldr	r1, [pc, #24]	; (8003ff0 <HAL_I2C_Master_Receive+0x22c>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fbb2 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e10e      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
 8003fe6:	bf00      	nop
 8003fe8:	00100002 	.word	0x00100002
 8003fec:	ffff0000 	.word	0xffff0000
 8003ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004068:	e0b8      	b.n	80041dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2200      	movs	r2, #0
 8004072:	4966      	ldr	r1, [pc, #408]	; (800420c <HAL_I2C_Master_Receive+0x448>)
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fb63 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0bf      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	2200      	movs	r2, #0
 80040ce:	494f      	ldr	r1, [pc, #316]	; (800420c <HAL_I2C_Master_Receive+0x448>)
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fb35 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e091      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004154:	e042      	b.n	80041dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fc48 	bl	80049f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e04c      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d118      	bne.n	80041dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f47f aec2 	bne.w	8003f6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	00010004 	.word	0x00010004

08004210 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	460b      	mov	r3, r1
 800421e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004220:	f7fe fe34 	bl	8002e8c <HAL_GetTick>
 8004224:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b20      	cmp	r3, #32
 8004234:	f040 8111 	bne.w	800445a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2319      	movs	r3, #25
 800423e:	2201      	movs	r2, #1
 8004240:	4988      	ldr	r1, [pc, #544]	; (8004464 <HAL_I2C_IsDeviceReady+0x254>)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa7c 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
 8004250:	e104      	b.n	800445c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_I2C_IsDeviceReady+0x50>
 800425c:	2302      	movs	r3, #2
 800425e:	e0fd      	b.n	800445c <HAL_I2C_IsDeviceReady+0x24c>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b01      	cmp	r3, #1
 8004274:	d007      	beq.n	8004286 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004294:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2224      	movs	r2, #36	; 0x24
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a70      	ldr	r2, [pc, #448]	; (8004468 <HAL_I2C_IsDeviceReady+0x258>)
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fa3a 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e0:	d103      	bne.n	80042ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e0b6      	b.n	800445c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ee:	897b      	ldrh	r3, [r7, #10]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042fe:	f7fe fdc5 	bl	8002e8c <HAL_GetTick>
 8004302:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b02      	cmp	r3, #2
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004332:	e025      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7fe fdaa 	bl	8002e8c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <HAL_I2C_IsDeviceReady+0x13a>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	22a0      	movs	r2, #160	; 0xa0
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b02      	cmp	r3, #2
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2ba0      	cmp	r3, #160	; 0xa0
 800438a:	d005      	beq.n	8004398 <HAL_I2C_IsDeviceReady+0x188>
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <HAL_I2C_IsDeviceReady+0x188>
 8004392:	7dbb      	ldrb	r3, [r7, #22]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0cd      	beq.n	8004334 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d129      	bne.n	8004402 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2319      	movs	r3, #25
 80043da:	2201      	movs	r2, #1
 80043dc:	4921      	ldr	r1, [pc, #132]	; (8004464 <HAL_I2C_IsDeviceReady+0x254>)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f9ae 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e036      	b.n	800445c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e02c      	b.n	800445c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004410:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800441a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2319      	movs	r3, #25
 8004422:	2201      	movs	r2, #1
 8004424:	490f      	ldr	r1, [pc, #60]	; (8004464 <HAL_I2C_IsDeviceReady+0x254>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f98a 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e012      	b.n	800445c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3301      	adds	r3, #1
 800443a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	f4ff af32 	bcc.w	80042aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	00100002 	.word	0x00100002
 8004468:	ffff0000 	.word	0xffff0000

0800446c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	b2db      	uxtb	r3, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	460b      	mov	r3, r1
 80044ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d006      	beq.n	80044ca <I2C_MasterRequestWrite+0x2a>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d003      	beq.n	80044ca <I2C_MasterRequestWrite+0x2a>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044c8:	d108      	bne.n	80044dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e00b      	b.n	80044f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	2b12      	cmp	r3, #18
 80044e2:	d107      	bne.n	80044f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f91d 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451a:	d103      	bne.n	8004524 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e035      	b.n	8004594 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004530:	d108      	bne.n	8004544 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004540:	611a      	str	r2, [r3, #16]
 8004542:	e01b      	b.n	800457c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004544:	897b      	ldrh	r3, [r7, #10]
 8004546:	11db      	asrs	r3, r3, #7
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 0306 	and.w	r3, r3, #6
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f063 030f 	orn	r3, r3, #15
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	490e      	ldr	r1, [pc, #56]	; (800459c <I2C_MasterRequestWrite+0xfc>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f943 	bl	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e010      	b.n	8004594 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004572:	897b      	ldrh	r3, [r7, #10]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4907      	ldr	r1, [pc, #28]	; (80045a0 <I2C_MasterRequestWrite+0x100>)
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f933 	bl	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	00010008 	.word	0x00010008
 80045a0:	00010002 	.word	0x00010002

080045a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	460b      	mov	r3, r1
 80045b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d006      	beq.n	80045de <I2C_MasterRequestRead+0x3a>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d003      	beq.n	80045de <I2C_MasterRequestRead+0x3a>
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045dc:	d108      	bne.n	80045f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e00b      	b.n	8004608 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	2b11      	cmp	r3, #17
 80045f6:	d107      	bne.n	8004608 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f893 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462e:	d103      	bne.n	8004638 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e079      	b.n	8004730 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004644:	d108      	bne.n	8004658 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004646:	897b      	ldrh	r3, [r7, #10]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	611a      	str	r2, [r3, #16]
 8004656:	e05f      	b.n	8004718 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004658:	897b      	ldrh	r3, [r7, #10]
 800465a:	11db      	asrs	r3, r3, #7
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f063 030f 	orn	r3, r3, #15
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4930      	ldr	r1, [pc, #192]	; (8004738 <I2C_MasterRequestRead+0x194>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f8b9 	bl	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e054      	b.n	8004730 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004686:	897b      	ldrh	r3, [r7, #10]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4929      	ldr	r1, [pc, #164]	; (800473c <I2C_MasterRequestRead+0x198>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f8a9 	bl	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e044      	b.n	8004730 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a6:	2300      	movs	r3, #0
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f831 	bl	8004740 <I2C_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f2:	d103      	bne.n	80046fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e017      	b.n	8004730 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004700:	897b      	ldrh	r3, [r7, #10]
 8004702:	11db      	asrs	r3, r3, #7
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f003 0306 	and.w	r3, r3, #6
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f063 030e 	orn	r3, r3, #14
 8004710:	b2da      	uxtb	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4907      	ldr	r1, [pc, #28]	; (800473c <I2C_MasterRequestRead+0x198>)
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f865 	bl	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	00010008 	.word	0x00010008
 800473c:	00010002 	.word	0x00010002

08004740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004750:	e025      	b.n	800479e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d021      	beq.n	800479e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475a:	f7fe fb97 	bl	8002e8c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d302      	bcc.n	8004770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d116      	bne.n	800479e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e023      	b.n	80047e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d10d      	bne.n	80047c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	43da      	mvns	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	e00c      	b.n	80047de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d0b6      	beq.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047fc:	e051      	b.n	80048a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480c:	d123      	bne.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004826:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f043 0204 	orr.w	r2, r3, #4
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e046      	b.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d021      	beq.n	80048a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fe fb15 	bl	8002e8c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d116      	bne.n	80048a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e020      	b.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d10c      	bne.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	e00b      	b.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	43da      	mvns	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4013      	ands	r3, r2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d18d      	bne.n	80047fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f8:	e02d      	b.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f8ce 	bl	8004a9c <I2C_IsAcknowledgeFailed>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e02d      	b.n	8004966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d021      	beq.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fe fabb 	bl	8002e8c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d116      	bne.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e007      	b.n	8004966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b80      	cmp	r3, #128	; 0x80
 8004962:	d1ca      	bne.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800497a:	e02d      	b.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f88d 	bl	8004a9c <I2C_IsAcknowledgeFailed>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e02d      	b.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d021      	beq.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004994:	f7fe fa7a 	bl	8002e8c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d302      	bcc.n	80049aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d116      	bne.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e007      	b.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d1ca      	bne.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049fc:	e042      	b.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d119      	bne.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0210 	mvn.w	r2, #16
 8004a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e029      	b.n	8004a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a40:	f7fe fa24 	bl	8002e8c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d116      	bne.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	f043 0220 	orr.w	r2, r3, #32
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e007      	b.n	8004a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d1b5      	bne.n	80049fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab2:	d11b      	bne.n	8004aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f043 0204 	orr.w	r2, r3, #4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e267      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d075      	beq.n	8004c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b1a:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d00c      	beq.n	8004b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b26:	4b85      	ldr	r3, [pc, #532]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d112      	bne.n	8004b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b32:	4b82      	ldr	r3, [pc, #520]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3e:	d10b      	bne.n	8004b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	4b7e      	ldr	r3, [pc, #504]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d05b      	beq.n	8004c04 <HAL_RCC_OscConfig+0x108>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d157      	bne.n	8004c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e242      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d106      	bne.n	8004b70 <HAL_RCC_OscConfig+0x74>
 8004b62:	4b76      	ldr	r3, [pc, #472]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a75      	ldr	r2, [pc, #468]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e01d      	b.n	8004bac <HAL_RCC_OscConfig+0xb0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b78:	d10c      	bne.n	8004b94 <HAL_RCC_OscConfig+0x98>
 8004b7a:	4b70      	ldr	r3, [pc, #448]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a6f      	ldr	r2, [pc, #444]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4b6d      	ldr	r3, [pc, #436]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a6c      	ldr	r2, [pc, #432]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e00b      	b.n	8004bac <HAL_RCC_OscConfig+0xb0>
 8004b94:	4b69      	ldr	r3, [pc, #420]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a68      	ldr	r2, [pc, #416]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a65      	ldr	r2, [pc, #404]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fe f96a 	bl	8002e8c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fe f966 	bl	8002e8c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e207      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b5b      	ldr	r3, [pc, #364]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0xc0>
 8004bda:	e014      	b.n	8004c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fe f956 	bl	8002e8c <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fe f952 	bl	8002e8c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e1f3      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf6:	4b51      	ldr	r3, [pc, #324]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0xe8>
 8004c02:	e000      	b.n	8004c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d063      	beq.n	8004cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c12:	4b4a      	ldr	r3, [pc, #296]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1e:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d11c      	bne.n	8004c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2a:	4b44      	ldr	r3, [pc, #272]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d116      	bne.n	8004c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c36:	4b41      	ldr	r3, [pc, #260]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_RCC_OscConfig+0x152>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d001      	beq.n	8004c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e1c7      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4937      	ldr	r1, [pc, #220]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c62:	e03a      	b.n	8004cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d020      	beq.n	8004cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c6c:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_RCC_OscConfig+0x244>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7fe f90b 	bl	8002e8c <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7a:	f7fe f907 	bl	8002e8c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e1a8      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8c:	4b2b      	ldr	r3, [pc, #172]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c98:	4b28      	ldr	r3, [pc, #160]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4925      	ldr	r1, [pc, #148]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	600b      	str	r3, [r1, #0]
 8004cac:	e015      	b.n	8004cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_RCC_OscConfig+0x244>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fe f8ea 	bl	8002e8c <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbc:	f7fe f8e6 	bl	8002e8c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e187      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d036      	beq.n	8004d54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d016      	beq.n	8004d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <HAL_RCC_OscConfig+0x248>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fe f8ca 	bl	8002e8c <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfc:	f7fe f8c6 	bl	8002e8c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e167      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_OscConfig+0x240>)
 8004d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x200>
 8004d1a:	e01b      	b.n	8004d54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_RCC_OscConfig+0x248>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d22:	f7fe f8b3 	bl	8002e8c <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d28:	e00e      	b.n	8004d48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d2a:	f7fe f8af 	bl	8002e8c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d907      	bls.n	8004d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e150      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	42470000 	.word	0x42470000
 8004d44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d48:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1ea      	bne.n	8004d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8097 	beq.w	8004e90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d66:	4b81      	ldr	r3, [pc, #516]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	4b7d      	ldr	r3, [pc, #500]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	4a7c      	ldr	r2, [pc, #496]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d80:	6413      	str	r3, [r2, #64]	; 0x40
 8004d82:	4b7a      	ldr	r3, [pc, #488]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b77      	ldr	r3, [pc, #476]	; (8004f70 <HAL_RCC_OscConfig+0x474>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d118      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d9e:	4b74      	ldr	r3, [pc, #464]	; (8004f70 <HAL_RCC_OscConfig+0x474>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a73      	ldr	r2, [pc, #460]	; (8004f70 <HAL_RCC_OscConfig+0x474>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004daa:	f7fe f86f 	bl	8002e8c <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db2:	f7fe f86b 	bl	8002e8c <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e10c      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	; (8004f70 <HAL_RCC_OscConfig+0x474>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d106      	bne.n	8004de6 <HAL_RCC_OscConfig+0x2ea>
 8004dd8:	4b64      	ldr	r3, [pc, #400]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	4a63      	ldr	r2, [pc, #396]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	; 0x70
 8004de4:	e01c      	b.n	8004e20 <HAL_RCC_OscConfig+0x324>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x30c>
 8004dee:	4b5f      	ldr	r3, [pc, #380]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4a5e      	ldr	r2, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004df4:	f043 0304 	orr.w	r3, r3, #4
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfa:	4b5c      	ldr	r3, [pc, #368]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a5b      	ldr	r2, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
 8004e06:	e00b      	b.n	8004e20 <HAL_RCC_OscConfig+0x324>
 8004e08:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
 8004e14:	4b55      	ldr	r3, [pc, #340]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	4a54      	ldr	r2, [pc, #336]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e1a:	f023 0304 	bic.w	r3, r3, #4
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fe f830 	bl	8002e8c <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e30:	f7fe f82c 	bl	8002e8c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e0cb      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e46:	4b49      	ldr	r3, [pc, #292]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0ee      	beq.n	8004e30 <HAL_RCC_OscConfig+0x334>
 8004e52:	e014      	b.n	8004e7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e54:	f7fe f81a 	bl	8002e8c <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5c:	f7fe f816 	bl	8002e8c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0b5      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e72:	4b3e      	ldr	r3, [pc, #248]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1ee      	bne.n	8004e5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d105      	bne.n	8004e90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e84:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	4a38      	ldr	r2, [pc, #224]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80a1 	beq.w	8004fdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e9a:	4b34      	ldr	r3, [pc, #208]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d05c      	beq.n	8004f60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d141      	bne.n	8004f32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eae:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <HAL_RCC_OscConfig+0x478>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb4:	f7fd ffea 	bl	8002e8c <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fd ffe6 	bl	8002e8c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e087      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ece:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69da      	ldr	r2, [r3, #28]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	061b      	lsls	r3, r3, #24
 8004efe:	491b      	ldr	r1, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <HAL_RCC_OscConfig+0x478>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0a:	f7fd ffbf 	bl	8002e8c <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f12:	f7fd ffbb 	bl	8002e8c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e05c      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x416>
 8004f30:	e054      	b.n	8004fdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <HAL_RCC_OscConfig+0x478>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fd ffa8 	bl	8002e8c <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fd ffa4 	bl	8002e8c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e045      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_RCC_OscConfig+0x470>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x444>
 8004f5e:	e03d      	b.n	8004fdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e038      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
 8004f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f78:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <HAL_RCC_OscConfig+0x4ec>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d028      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d121      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d11a      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d111      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d107      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800

08004fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0cc      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b68      	ldr	r3, [pc, #416]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d90c      	bls.n	8005028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b65      	ldr	r3, [pc, #404]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b63      	ldr	r3, [pc, #396]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0b8      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d020      	beq.n	8005076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005040:	4b59      	ldr	r3, [pc, #356]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a58      	ldr	r2, [pc, #352]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800504a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005058:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005064:	4b50      	ldr	r3, [pc, #320]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	494d      	ldr	r1, [pc, #308]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d044      	beq.n	800510c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508a:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d119      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e07f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e06f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e067      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	4b37      	ldr	r3, [pc, #220]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4934      	ldr	r1, [pc, #208]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050dc:	f7fd fed6 	bl	8002e8c <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fd fed2 	bl	8002e8c <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e04f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 020c 	and.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1eb      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d20c      	bcs.n	8005134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d001      	beq.n	8005134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e032      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005140:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4916      	ldr	r1, [pc, #88]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	490e      	ldr	r1, [pc, #56]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005172:	f000 f821 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 8005176:	4602      	mov	r2, r0
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	490a      	ldr	r1, [pc, #40]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005184:	5ccb      	ldrb	r3, [r1, r3]
 8005186:	fa22 f303 	lsr.w	r3, r2, r3
 800518a:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd fe36 	bl	8002e04 <HAL_InitTick>

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023c00 	.word	0x40023c00
 80051a8:	40023800 	.word	0x40023800
 80051ac:	0800b940 	.word	0x0800b940
 80051b0:	20000010 	.word	0x20000010
 80051b4:	20000014 	.word	0x20000014

080051b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051bc:	b094      	sub	sp, #80	; 0x50
 80051be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
 80051c4:	2300      	movs	r3, #0
 80051c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c8:	2300      	movs	r3, #0
 80051ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d0:	4b79      	ldr	r3, [pc, #484]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d00d      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0x40>
 80051dc:	2b08      	cmp	r3, #8
 80051de:	f200 80e1 	bhi.w	80053a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0x34>
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d003      	beq.n	80051f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ea:	e0db      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051ec:	4b73      	ldr	r3, [pc, #460]	; (80053bc <HAL_RCC_GetSysClockFreq+0x204>)
 80051ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051f0:	e0db      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051f2:	4b73      	ldr	r3, [pc, #460]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80051f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f6:	e0d8      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f8:	4b6f      	ldr	r3, [pc, #444]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005200:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005202:	4b6d      	ldr	r3, [pc, #436]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d063      	beq.n	80052d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520e:	4b6a      	ldr	r3, [pc, #424]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	099b      	lsrs	r3, r3, #6
 8005214:	2200      	movs	r2, #0
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
 8005218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005220:	633b      	str	r3, [r7, #48]	; 0x30
 8005222:	2300      	movs	r3, #0
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
 8005226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	f04f 0000 	mov.w	r0, #0
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	0159      	lsls	r1, r3, #5
 8005238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800523c:	0150      	lsls	r0, r2, #5
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4621      	mov	r1, r4
 8005244:	1a51      	subs	r1, r2, r1
 8005246:	6139      	str	r1, [r7, #16]
 8005248:	4629      	mov	r1, r5
 800524a:	eb63 0301 	sbc.w	r3, r3, r1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800525c:	4659      	mov	r1, fp
 800525e:	018b      	lsls	r3, r1, #6
 8005260:	4651      	mov	r1, sl
 8005262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005266:	4651      	mov	r1, sl
 8005268:	018a      	lsls	r2, r1, #6
 800526a:	4651      	mov	r1, sl
 800526c:	ebb2 0801 	subs.w	r8, r2, r1
 8005270:	4659      	mov	r1, fp
 8005272:	eb63 0901 	sbc.w	r9, r3, r1
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800528a:	4690      	mov	r8, r2
 800528c:	4699      	mov	r9, r3
 800528e:	4623      	mov	r3, r4
 8005290:	eb18 0303 	adds.w	r3, r8, r3
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	462b      	mov	r3, r5
 8005298:	eb49 0303 	adc.w	r3, r9, r3
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052aa:	4629      	mov	r1, r5
 80052ac:	024b      	lsls	r3, r1, #9
 80052ae:	4621      	mov	r1, r4
 80052b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052b4:	4621      	mov	r1, r4
 80052b6:	024a      	lsls	r2, r1, #9
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052be:	2200      	movs	r2, #0
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052c8:	f7fb fce6 	bl	8000c98 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4613      	mov	r3, r2
 80052d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d4:	e058      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d6:	4b38      	ldr	r3, [pc, #224]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	2200      	movs	r2, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	4611      	mov	r1, r2
 80052e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	2300      	movs	r3, #0
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
 80052ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	f04f 0000 	mov.w	r0, #0
 80052f8:	f04f 0100 	mov.w	r1, #0
 80052fc:	0159      	lsls	r1, r3, #5
 80052fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005302:	0150      	lsls	r0, r2, #5
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4641      	mov	r1, r8
 800530a:	ebb2 0a01 	subs.w	sl, r2, r1
 800530e:	4649      	mov	r1, r9
 8005310:	eb63 0b01 	sbc.w	fp, r3, r1
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005328:	ebb2 040a 	subs.w	r4, r2, sl
 800532c:	eb63 050b 	sbc.w	r5, r3, fp
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	00eb      	lsls	r3, r5, #3
 800533a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533e:	00e2      	lsls	r2, r4, #3
 8005340:	4614      	mov	r4, r2
 8005342:	461d      	mov	r5, r3
 8005344:	4643      	mov	r3, r8
 8005346:	18e3      	adds	r3, r4, r3
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	464b      	mov	r3, r9
 800534c:	eb45 0303 	adc.w	r3, r5, r3
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800535e:	4629      	mov	r1, r5
 8005360:	028b      	lsls	r3, r1, #10
 8005362:	4621      	mov	r1, r4
 8005364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005368:	4621      	mov	r1, r4
 800536a:	028a      	lsls	r2, r1, #10
 800536c:	4610      	mov	r0, r2
 800536e:	4619      	mov	r1, r3
 8005370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005372:	2200      	movs	r2, #0
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	61fa      	str	r2, [r7, #28]
 8005378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800537c:	f7fb fc8c 	bl	8000c98 <__aeabi_uldivmod>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4613      	mov	r3, r2
 8005386:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	3301      	adds	r3, #1
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800539a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053a2:	e002      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <HAL_RCC_GetSysClockFreq+0x204>)
 80053a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3750      	adds	r7, #80	; 0x50
 80053b0:	46bd      	mov	sp, r7
 80053b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b6:	bf00      	nop
 80053b8:	40023800 	.word	0x40023800
 80053bc:	00f42400 	.word	0x00f42400
 80053c0:	007a1200 	.word	0x007a1200

080053c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ca:	681b      	ldr	r3, [r3, #0]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000010 	.word	0x20000010

080053dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053e0:	f7ff fff0 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
 80053e4:	4602      	mov	r2, r0
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	0a9b      	lsrs	r3, r3, #10
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	4903      	ldr	r1, [pc, #12]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f2:	5ccb      	ldrb	r3, [r1, r3]
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40023800 	.word	0x40023800
 8005400:	0800b950 	.word	0x0800b950

08005404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005408:	f7ff ffdc 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
 800540c:	4602      	mov	r2, r0
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	0b5b      	lsrs	r3, r3, #13
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	4903      	ldr	r1, [pc, #12]	; (8005428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800541a:	5ccb      	ldrb	r3, [r1, r3]
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40023800 	.word	0x40023800
 8005428:	0800b950 	.word	0x0800b950

0800542c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e041      	b.n	80054c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd f9dc 	bl	8002810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 fd88 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e044      	b.n	800556e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1e      	ldr	r2, [pc, #120]	; (800557c <HAL_TIM_Base_Start_IT+0xb0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d013      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1a      	ldr	r2, [pc, #104]	; (8005580 <HAL_TIM_Base_Start_IT+0xb4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a19      	ldr	r2, [pc, #100]	; (8005584 <HAL_TIM_Base_Start_IT+0xb8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a17      	ldr	r2, [pc, #92]	; (8005588 <HAL_TIM_Base_Start_IT+0xbc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a16      	ldr	r2, [pc, #88]	; (800558c <HAL_TIM_Base_Start_IT+0xc0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d111      	bne.n	800555c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b06      	cmp	r3, #6
 8005548:	d010      	beq.n	800556c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	e007      	b.n	800556c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40014000 	.word	0x40014000

08005590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e041      	b.n	8005626 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f839 	bl	800562e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f000 fcd6 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <HAL_TIM_PWM_Start+0x24>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	bf14      	ite	ne
 8005660:	2301      	movne	r3, #1
 8005662:	2300      	moveq	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	e022      	b.n	80056ae <HAL_TIM_PWM_Start+0x6a>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b04      	cmp	r3, #4
 800566c:	d109      	bne.n	8005682 <HAL_TIM_PWM_Start+0x3e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	bf14      	ite	ne
 800567a:	2301      	movne	r3, #1
 800567c:	2300      	moveq	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	e015      	b.n	80056ae <HAL_TIM_PWM_Start+0x6a>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d109      	bne.n	800569c <HAL_TIM_PWM_Start+0x58>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	e008      	b.n	80056ae <HAL_TIM_PWM_Start+0x6a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e068      	b.n	8005788 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <HAL_TIM_PWM_Start+0x82>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c4:	e013      	b.n	80056ee <HAL_TIM_PWM_Start+0xaa>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x92>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d4:	e00b      	b.n	80056ee <HAL_TIM_PWM_Start+0xaa>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_PWM_Start+0xa2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e4:	e003      	b.n	80056ee <HAL_TIM_PWM_Start+0xaa>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2201      	movs	r2, #1
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fee8 	bl	80064cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a23      	ldr	r2, [pc, #140]	; (8005790 <HAL_TIM_PWM_Start+0x14c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d107      	bne.n	8005716 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <HAL_TIM_PWM_Start+0x14c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d018      	beq.n	8005752 <HAL_TIM_PWM_Start+0x10e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005728:	d013      	beq.n	8005752 <HAL_TIM_PWM_Start+0x10e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a19      	ldr	r2, [pc, #100]	; (8005794 <HAL_TIM_PWM_Start+0x150>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_TIM_PWM_Start+0x10e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a17      	ldr	r2, [pc, #92]	; (8005798 <HAL_TIM_PWM_Start+0x154>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_TIM_PWM_Start+0x10e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a16      	ldr	r2, [pc, #88]	; (800579c <HAL_TIM_PWM_Start+0x158>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIM_PWM_Start+0x10e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <HAL_TIM_PWM_Start+0x15c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d111      	bne.n	8005776 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d010      	beq.n	8005786 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005774:	e007      	b.n	8005786 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40014000 	.word	0x40014000

080057a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e097      	b.n	80058e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fd f883 	bl	80028d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e8:	f023 0307 	bic.w	r3, r3, #7
 80057ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f000 fbc1 	bl	8005f80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	4313      	orrs	r3, r2
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005844:	f023 030c 	bic.w	r3, r3, #12
 8005848:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	4313      	orrs	r3, r2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	011a      	lsls	r2, r3, #4
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	031b      	lsls	r3, r3, #12
 8005874:	4313      	orrs	r3, r2
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	4313      	orrs	r3, r2
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005900:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005908:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005910:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005918:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d110      	bne.n	8005942 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d102      	bne.n	800592c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005926:	7b7b      	ldrb	r3, [r7, #13]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e069      	b.n	8005a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005940:	e031      	b.n	80059a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b04      	cmp	r3, #4
 8005946:	d110      	bne.n	800596a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005948:	7bbb      	ldrb	r3, [r7, #14]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d102      	bne.n	8005954 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800594e:	7b3b      	ldrb	r3, [r7, #12]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e055      	b.n	8005a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005968:	e01d      	b.n	80059a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d108      	bne.n	8005982 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d105      	bne.n	8005982 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005976:	7b7b      	ldrb	r3, [r7, #13]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800597c:	7b3b      	ldrb	r3, [r7, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e03e      	b.n	8005a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_TIM_Encoder_Start+0xc4>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d008      	beq.n	80059c4 <HAL_TIM_Encoder_Start+0xd4>
 80059b2:	e00f      	b.n	80059d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fd85 	bl	80064cc <TIM_CCxChannelCmd>
      break;
 80059c2:	e016      	b.n	80059f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	2104      	movs	r1, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fd7d 	bl	80064cc <TIM_CCxChannelCmd>
      break;
 80059d2:	e00e      	b.n	80059f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2201      	movs	r2, #1
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fd75 	bl	80064cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2201      	movs	r2, #1
 80059e8:	2104      	movs	r1, #4
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fd6e 	bl	80064cc <TIM_CCxChannelCmd>
      break;
 80059f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0201 	orr.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d122      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0202 	mvn.w	r2, #2
 8005a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa77 	bl	8005f42 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa69 	bl	8005f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fa7a 	bl	8005f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d122      	bne.n	8005abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d11b      	bne.n	8005abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0204 	mvn.w	r2, #4
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa4d 	bl	8005f42 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa3f 	bl	8005f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa50 	bl	8005f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0208 	mvn.w	r2, #8
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa23 	bl	8005f42 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa15 	bl	8005f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa26 	bl	8005f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d122      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0210 	mvn.w	r2, #16
 8005b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2208      	movs	r2, #8
 8005b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9f9 	bl	8005f42 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9eb 	bl	8005f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f9fc 	bl	8005f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d10e      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d107      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0201 	mvn.w	r2, #1
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fc fcae 	bl	80024ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d10e      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b80      	cmp	r3, #128	; 0x80
 8005baa:	d107      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fd78 	bl	80066ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d10e      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d107      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9c1 	bl	8005f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d10e      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0220 	mvn.w	r2, #32
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fd42 	bl	8006698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e0ae      	b.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b0c      	cmp	r3, #12
 8005c46:	f200 809f 	bhi.w	8005d88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c85 	.word	0x08005c85
 8005c54:	08005d89 	.word	0x08005d89
 8005c58:	08005d89 	.word	0x08005d89
 8005c5c:	08005d89 	.word	0x08005d89
 8005c60:	08005cc5 	.word	0x08005cc5
 8005c64:	08005d89 	.word	0x08005d89
 8005c68:	08005d89 	.word	0x08005d89
 8005c6c:	08005d89 	.word	0x08005d89
 8005c70:	08005d07 	.word	0x08005d07
 8005c74:	08005d89 	.word	0x08005d89
 8005c78:	08005d89 	.word	0x08005d89
 8005c7c:	08005d89 	.word	0x08005d89
 8005c80:	08005d47 	.word	0x08005d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 f9f8 	bl	8006080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0208 	orr.w	r2, r2, #8
 8005c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0204 	bic.w	r2, r2, #4
 8005cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6999      	ldr	r1, [r3, #24]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	619a      	str	r2, [r3, #24]
      break;
 8005cc2:	e064      	b.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fa3e 	bl	800614c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6999      	ldr	r1, [r3, #24]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	021a      	lsls	r2, r3, #8
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	619a      	str	r2, [r3, #24]
      break;
 8005d04:	e043      	b.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fa89 	bl	8006224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0208 	orr.w	r2, r2, #8
 8005d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0204 	bic.w	r2, r2, #4
 8005d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69d9      	ldr	r1, [r3, #28]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	61da      	str	r2, [r3, #28]
      break;
 8005d44:	e023      	b.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fad3 	bl	80062f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69d9      	ldr	r1, [r3, #28]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	021a      	lsls	r2, r3, #8
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	61da      	str	r2, [r3, #28]
      break;
 8005d86:	e002      	b.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_ConfigClockSource+0x1c>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e0b4      	b.n	8005f26 <HAL_TIM_ConfigClockSource+0x186>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df4:	d03e      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0xd4>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfa:	f200 8087 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e02:	f000 8086 	beq.w	8005f12 <HAL_TIM_ConfigClockSource+0x172>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0a:	d87f      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b70      	cmp	r3, #112	; 0x70
 8005e0e:	d01a      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0xa6>
 8005e10:	2b70      	cmp	r3, #112	; 0x70
 8005e12:	d87b      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b60      	cmp	r3, #96	; 0x60
 8005e16:	d050      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x11a>
 8005e18:	2b60      	cmp	r3, #96	; 0x60
 8005e1a:	d877      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b50      	cmp	r3, #80	; 0x50
 8005e1e:	d03c      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0xfa>
 8005e20:	2b50      	cmp	r3, #80	; 0x50
 8005e22:	d873      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d058      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x13a>
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d86f      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b30      	cmp	r3, #48	; 0x30
 8005e2e:	d064      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e30:	2b30      	cmp	r3, #48	; 0x30
 8005e32:	d86b      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d060      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d867      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d05c      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d05a      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e44:	e062      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6899      	ldr	r1, [r3, #8]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f000 fb19 	bl	800648c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	609a      	str	r2, [r3, #8]
      break;
 8005e72:	e04f      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6899      	ldr	r1, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f000 fb02 	bl	800648c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e96:	609a      	str	r2, [r3, #8]
      break;
 8005e98:	e03c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6859      	ldr	r1, [r3, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f000 fa76 	bl	8006398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2150      	movs	r1, #80	; 0x50
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 facf 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005eb8:	e02c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6859      	ldr	r1, [r3, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f000 fa95 	bl	80063f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2160      	movs	r1, #96	; 0x60
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fabf 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005ed8:	e01c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f000 fa56 	bl	8006398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2140      	movs	r1, #64	; 0x40
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 faaf 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005ef8:	e00c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f000 faa6 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005f0a:	e003      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f10:	e000      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a34      	ldr	r2, [pc, #208]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00f      	beq.n	8005fb8 <TIM_Base_SetConfig+0x38>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9e:	d00b      	beq.n	8005fb8 <TIM_Base_SetConfig+0x38>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a31      	ldr	r2, [pc, #196]	; (8006068 <TIM_Base_SetConfig+0xe8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d007      	beq.n	8005fb8 <TIM_Base_SetConfig+0x38>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a30      	ldr	r2, [pc, #192]	; (800606c <TIM_Base_SetConfig+0xec>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_Base_SetConfig+0x38>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a2f      	ldr	r2, [pc, #188]	; (8006070 <TIM_Base_SetConfig+0xf0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d108      	bne.n	8005fca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a25      	ldr	r2, [pc, #148]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01b      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd8:	d017      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	; (8006068 <TIM_Base_SetConfig+0xe8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a21      	ldr	r2, [pc, #132]	; (800606c <TIM_Base_SetConfig+0xec>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00f      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a20      	ldr	r2, [pc, #128]	; (8006070 <TIM_Base_SetConfig+0xf0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00b      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	; (8006074 <TIM_Base_SetConfig+0xf4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <TIM_Base_SetConfig+0xf8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_Base_SetConfig+0x8a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <TIM_Base_SetConfig+0xfc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a08      	ldr	r2, [pc, #32]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d103      	bne.n	8006050 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	615a      	str	r2, [r3, #20]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40010000 	.word	0x40010000
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40014000 	.word	0x40014000
 8006078:	40014400 	.word	0x40014400
 800607c:	40014800 	.word	0x40014800

08006080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0201 	bic.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <TIM_OC1_SetConfig+0xc8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10c      	bne.n	80060f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0308 	bic.w	r3, r3, #8
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a13      	ldr	r2, [pc, #76]	; (8006148 <TIM_OC1_SetConfig+0xc8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d111      	bne.n	8006122 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	40010000 	.word	0x40010000

0800614c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0210 	bic.w	r2, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0320 	bic.w	r3, r3, #32
 8006196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1e      	ldr	r2, [pc, #120]	; (8006220 <TIM_OC2_SetConfig+0xd4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d10d      	bne.n	80061c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a15      	ldr	r2, [pc, #84]	; (8006220 <TIM_OC2_SetConfig+0xd4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d113      	bne.n	80061f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40010000 	.word	0x40010000

08006224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800626c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <TIM_OC3_SetConfig+0xd0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10d      	bne.n	800629e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800629c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a14      	ldr	r2, [pc, #80]	; (80062f4 <TIM_OC3_SetConfig+0xd0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d113      	bne.n	80062ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40010000 	.word	0x40010000

080062f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	031b      	lsls	r3, r3, #12
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a10      	ldr	r2, [pc, #64]	; (8006394 <TIM_OC4_SetConfig+0x9c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d109      	bne.n	800636c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800635e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	019b      	lsls	r3, r3, #6
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40010000 	.word	0x40010000

08006398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 030a 	bic.w	r3, r3, #10
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b087      	sub	sp, #28
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0210 	bic.w	r2, r3, #16
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	031b      	lsls	r3, r3, #12
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	f043 0307 	orr.w	r3, r3, #7
 8006478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	021a      	lsls	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2201      	movs	r2, #1
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e050      	b.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1c      	ldr	r2, [pc, #112]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d018      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657c:	d013      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a18      	ldr	r2, [pc, #96]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00e      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a16      	ldr	r2, [pc, #88]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d009      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a13      	ldr	r2, [pc, #76]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10c      	bne.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40014000 	.word	0x40014000

080065f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800660c:	2302      	movs	r3, #2
 800660e:	e03d      	b.n	800668c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e03f      	b.n	8006752 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fc f9a0 	bl	8002a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2224      	movs	r2, #36	; 0x24
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f929 	bl	800695c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b08a      	sub	sp, #40	; 0x28
 800675e:	af02      	add	r7, sp, #8
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b20      	cmp	r3, #32
 8006778:	d17c      	bne.n	8006874 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_UART_Transmit+0x2c>
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e075      	b.n	8006876 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_UART_Transmit+0x3e>
 8006794:	2302      	movs	r3, #2
 8006796:	e06e      	b.n	8006876 <HAL_UART_Transmit+0x11c>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2221      	movs	r2, #33	; 0x21
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ae:	f7fc fb6d 	bl	8002e8c <HAL_GetTick>
 80067b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88fa      	ldrh	r2, [r7, #6]
 80067b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c8:	d108      	bne.n	80067dc <HAL_UART_Transmit+0x82>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	e003      	b.n	80067e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067ec:	e02a      	b.n	8006844 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2200      	movs	r2, #0
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f840 	bl	800687e <UART_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e036      	b.n	8006876 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10b      	bne.n	8006826 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800681c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	3302      	adds	r3, #2
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	e007      	b.n	8006836 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3301      	adds	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1cf      	bne.n	80067ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2200      	movs	r2, #0
 8006856:	2140      	movs	r1, #64	; 0x40
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f810 	bl	800687e <UART_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e000      	b.n	8006876 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006874:	2302      	movs	r3, #2
  }
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b090      	sub	sp, #64	; 0x40
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688e:	e050      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d04c      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0x30>
 800689e:	f7fc faf5 	bl	8002e8c <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d241      	bcs.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068ce:	637a      	str	r2, [r7, #52]	; 0x34
 80068d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e5      	bne.n	80068ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3314      	adds	r3, #20
 8006900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006902:	623a      	str	r2, [r7, #32]
 8006904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	69f9      	ldr	r1, [r7, #28]
 8006908:	6a3a      	ldr	r2, [r7, #32]
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e5      	bne.n	80068e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e00f      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	429a      	cmp	r2, r3
 8006940:	bf0c      	ite	eq
 8006942:	2301      	moveq	r3, #1
 8006944:	2300      	movne	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	429a      	cmp	r2, r3
 800694e:	d09f      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3740      	adds	r7, #64	; 0x40
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800695c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006960:	b0c0      	sub	sp, #256	; 0x100
 8006962:	af00      	add	r7, sp, #0
 8006964:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006978:	68d9      	ldr	r1, [r3, #12]
 800697a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	ea40 0301 	orr.w	r3, r0, r1
 8006984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	431a      	orrs	r2, r3
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	431a      	orrs	r2, r3
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069b4:	f021 010c 	bic.w	r1, r1, #12
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069c2:	430b      	orrs	r3, r1
 80069c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d6:	6999      	ldr	r1, [r3, #24]
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	ea40 0301 	orr.w	r3, r0, r1
 80069e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4b8f      	ldr	r3, [pc, #572]	; (8006c28 <UART_SetConfig+0x2cc>)
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d005      	beq.n	80069fc <UART_SetConfig+0xa0>
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b8d      	ldr	r3, [pc, #564]	; (8006c2c <UART_SetConfig+0x2d0>)
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d104      	bne.n	8006a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069fc:	f7fe fd02 	bl	8005404 <HAL_RCC_GetPCLK2Freq>
 8006a00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a04:	e003      	b.n	8006a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a06:	f7fe fce9 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8006a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a18:	f040 810c 	bne.w	8006c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a2e:	4622      	mov	r2, r4
 8006a30:	462b      	mov	r3, r5
 8006a32:	1891      	adds	r1, r2, r2
 8006a34:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a36:	415b      	adcs	r3, r3
 8006a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a3e:	4621      	mov	r1, r4
 8006a40:	eb12 0801 	adds.w	r8, r2, r1
 8006a44:	4629      	mov	r1, r5
 8006a46:	eb43 0901 	adc.w	r9, r3, r1
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a5e:	4690      	mov	r8, r2
 8006a60:	4699      	mov	r9, r3
 8006a62:	4623      	mov	r3, r4
 8006a64:	eb18 0303 	adds.w	r3, r8, r3
 8006a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	eb49 0303 	adc.w	r3, r9, r3
 8006a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	18db      	adds	r3, r3, r3
 8006a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a90:	4613      	mov	r3, r2
 8006a92:	eb42 0303 	adc.w	r3, r2, r3
 8006a96:	657b      	str	r3, [r7, #84]	; 0x54
 8006a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006aa0:	f7fa f8fa 	bl	8000c98 <__aeabi_uldivmod>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4b61      	ldr	r3, [pc, #388]	; (8006c30 <UART_SetConfig+0x2d4>)
 8006aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	011c      	lsls	r4, r3, #4
 8006ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006abc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	1891      	adds	r1, r2, r2
 8006aca:	64b9      	str	r1, [r7, #72]	; 0x48
 8006acc:	415b      	adcs	r3, r3
 8006ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ad4:	4641      	mov	r1, r8
 8006ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8006ada:	4649      	mov	r1, r9
 8006adc:	eb43 0b01 	adc.w	fp, r3, r1
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006af4:	4692      	mov	sl, r2
 8006af6:	469b      	mov	fp, r3
 8006af8:	4643      	mov	r3, r8
 8006afa:	eb1a 0303 	adds.w	r3, sl, r3
 8006afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b02:	464b      	mov	r3, r9
 8006b04:	eb4b 0303 	adc.w	r3, fp, r3
 8006b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b20:	460b      	mov	r3, r1
 8006b22:	18db      	adds	r3, r3, r3
 8006b24:	643b      	str	r3, [r7, #64]	; 0x40
 8006b26:	4613      	mov	r3, r2
 8006b28:	eb42 0303 	adc.w	r3, r2, r3
 8006b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b36:	f7fa f8af 	bl	8000c98 <__aeabi_uldivmod>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4b3b      	ldr	r3, [pc, #236]	; (8006c30 <UART_SetConfig+0x2d4>)
 8006b42:	fba3 2301 	umull	r2, r3, r3, r1
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	2264      	movs	r2, #100	; 0x64
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	1acb      	subs	r3, r1, r3
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b56:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <UART_SetConfig+0x2d4>)
 8006b58:	fba3 2302 	umull	r2, r3, r3, r2
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b64:	441c      	add	r4, r3
 8006b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b78:	4642      	mov	r2, r8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	1891      	adds	r1, r2, r2
 8006b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b80:	415b      	adcs	r3, r3
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b88:	4641      	mov	r1, r8
 8006b8a:	1851      	adds	r1, r2, r1
 8006b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8006b8e:	4649      	mov	r1, r9
 8006b90:	414b      	adcs	r3, r1
 8006b92:	637b      	str	r3, [r7, #52]	; 0x34
 8006b94:	f04f 0200 	mov.w	r2, #0
 8006b98:	f04f 0300 	mov.w	r3, #0
 8006b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ba0:	4659      	mov	r1, fp
 8006ba2:	00cb      	lsls	r3, r1, #3
 8006ba4:	4651      	mov	r1, sl
 8006ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006baa:	4651      	mov	r1, sl
 8006bac:	00ca      	lsls	r2, r1, #3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	189b      	adds	r3, r3, r2
 8006bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	460a      	mov	r2, r1
 8006bc0:	eb42 0303 	adc.w	r3, r2, r3
 8006bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006bdc:	460b      	mov	r3, r1
 8006bde:	18db      	adds	r3, r3, r3
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be2:	4613      	mov	r3, r2
 8006be4:	eb42 0303 	adc.w	r3, r2, r3
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006bf2:	f7fa f851 	bl	8000c98 <__aeabi_uldivmod>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <UART_SetConfig+0x2d4>)
 8006bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	2164      	movs	r1, #100	; 0x64
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	3332      	adds	r3, #50	; 0x32
 8006c0e:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <UART_SetConfig+0x2d4>)
 8006c10:	fba2 2303 	umull	r2, r3, r2, r3
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	f003 0207 	and.w	r2, r3, #7
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4422      	add	r2, r4
 8006c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c24:	e106      	b.n	8006e34 <UART_SetConfig+0x4d8>
 8006c26:	bf00      	nop
 8006c28:	40011000 	.word	0x40011000
 8006c2c:	40011400 	.word	0x40011400
 8006c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c46:	4642      	mov	r2, r8
 8006c48:	464b      	mov	r3, r9
 8006c4a:	1891      	adds	r1, r2, r2
 8006c4c:	6239      	str	r1, [r7, #32]
 8006c4e:	415b      	adcs	r3, r3
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
 8006c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c56:	4641      	mov	r1, r8
 8006c58:	1854      	adds	r4, r2, r1
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	eb43 0501 	adc.w	r5, r3, r1
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	00eb      	lsls	r3, r5, #3
 8006c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c6e:	00e2      	lsls	r2, r4, #3
 8006c70:	4614      	mov	r4, r2
 8006c72:	461d      	mov	r5, r3
 8006c74:	4643      	mov	r3, r8
 8006c76:	18e3      	adds	r3, r4, r3
 8006c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	eb45 0303 	adc.w	r3, r5, r3
 8006c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	008b      	lsls	r3, r1, #2
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cac:	4621      	mov	r1, r4
 8006cae:	008a      	lsls	r2, r1, #2
 8006cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cb4:	f7f9 fff0 	bl	8000c98 <__aeabi_uldivmod>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4b60      	ldr	r3, [pc, #384]	; (8006e40 <UART_SetConfig+0x4e4>)
 8006cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	011c      	lsls	r4, r3, #4
 8006cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006cd8:	4642      	mov	r2, r8
 8006cda:	464b      	mov	r3, r9
 8006cdc:	1891      	adds	r1, r2, r2
 8006cde:	61b9      	str	r1, [r7, #24]
 8006ce0:	415b      	adcs	r3, r3
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ce8:	4641      	mov	r1, r8
 8006cea:	1851      	adds	r1, r2, r1
 8006cec:	6139      	str	r1, [r7, #16]
 8006cee:	4649      	mov	r1, r9
 8006cf0:	414b      	adcs	r3, r1
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d00:	4659      	mov	r1, fp
 8006d02:	00cb      	lsls	r3, r1, #3
 8006d04:	4651      	mov	r1, sl
 8006d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	00ca      	lsls	r2, r1, #3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4619      	mov	r1, r3
 8006d12:	4603      	mov	r3, r0
 8006d14:	4642      	mov	r2, r8
 8006d16:	189b      	adds	r3, r3, r2
 8006d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	460a      	mov	r2, r1
 8006d20:	eb42 0303 	adc.w	r3, r2, r3
 8006d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d40:	4649      	mov	r1, r9
 8006d42:	008b      	lsls	r3, r1, #2
 8006d44:	4641      	mov	r1, r8
 8006d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	008a      	lsls	r2, r1, #2
 8006d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d52:	f7f9 ffa1 	bl	8000c98 <__aeabi_uldivmod>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	4b38      	ldr	r3, [pc, #224]	; (8006e40 <UART_SetConfig+0x4e4>)
 8006d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2264      	movs	r2, #100	; 0x64
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	1acb      	subs	r3, r1, r3
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	3332      	adds	r3, #50	; 0x32
 8006d70:	4a33      	ldr	r2, [pc, #204]	; (8006e40 <UART_SetConfig+0x4e4>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d7c:	441c      	add	r4, r3
 8006d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d82:	2200      	movs	r2, #0
 8006d84:	673b      	str	r3, [r7, #112]	; 0x70
 8006d86:	677a      	str	r2, [r7, #116]	; 0x74
 8006d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	464b      	mov	r3, r9
 8006d90:	1891      	adds	r1, r2, r2
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	415b      	adcs	r3, r3
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	1851      	adds	r1, r2, r1
 8006da0:	6039      	str	r1, [r7, #0]
 8006da2:	4649      	mov	r1, r9
 8006da4:	414b      	adcs	r3, r1
 8006da6:	607b      	str	r3, [r7, #4]
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006db4:	4659      	mov	r1, fp
 8006db6:	00cb      	lsls	r3, r1, #3
 8006db8:	4651      	mov	r1, sl
 8006dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	00ca      	lsls	r2, r1, #3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4642      	mov	r2, r8
 8006dca:	189b      	adds	r3, r3, r2
 8006dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dce:	464b      	mov	r3, r9
 8006dd0:	460a      	mov	r2, r1
 8006dd2:	eb42 0303 	adc.w	r3, r2, r3
 8006dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	663b      	str	r3, [r7, #96]	; 0x60
 8006de2:	667a      	str	r2, [r7, #100]	; 0x64
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006df0:	4649      	mov	r1, r9
 8006df2:	008b      	lsls	r3, r1, #2
 8006df4:	4641      	mov	r1, r8
 8006df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dfa:	4641      	mov	r1, r8
 8006dfc:	008a      	lsls	r2, r1, #2
 8006dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e02:	f7f9 ff49 	bl	8000c98 <__aeabi_uldivmod>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <UART_SetConfig+0x4e4>)
 8006e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	2164      	movs	r1, #100	; 0x64
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	3332      	adds	r3, #50	; 0x32
 8006e1e:	4a08      	ldr	r2, [pc, #32]	; (8006e40 <UART_SetConfig+0x4e4>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	f003 020f 	and.w	r2, r3, #15
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4422      	add	r2, r4
 8006e32:	609a      	str	r2, [r3, #8]
}
 8006e34:	bf00      	nop
 8006e36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e40:	51eb851f 	.word	0x51eb851f

08006e44 <malloc>:
 8006e44:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <malloc+0xc>)
 8006e46:	4601      	mov	r1, r0
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f000 b823 	b.w	8006e94 <_malloc_r>
 8006e4e:	bf00      	nop
 8006e50:	200001e0 	.word	0x200001e0

08006e54 <sbrk_aligned>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	4e0e      	ldr	r6, [pc, #56]	; (8006e90 <sbrk_aligned+0x3c>)
 8006e58:	460c      	mov	r4, r1
 8006e5a:	6831      	ldr	r1, [r6, #0]
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	b911      	cbnz	r1, 8006e66 <sbrk_aligned+0x12>
 8006e60:	f001 ffa8 	bl	8008db4 <_sbrk_r>
 8006e64:	6030      	str	r0, [r6, #0]
 8006e66:	4621      	mov	r1, r4
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f001 ffa3 	bl	8008db4 <_sbrk_r>
 8006e6e:	1c43      	adds	r3, r0, #1
 8006e70:	d00a      	beq.n	8006e88 <sbrk_aligned+0x34>
 8006e72:	1cc4      	adds	r4, r0, #3
 8006e74:	f024 0403 	bic.w	r4, r4, #3
 8006e78:	42a0      	cmp	r0, r4
 8006e7a:	d007      	beq.n	8006e8c <sbrk_aligned+0x38>
 8006e7c:	1a21      	subs	r1, r4, r0
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f001 ff98 	bl	8008db4 <_sbrk_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d101      	bne.n	8006e8c <sbrk_aligned+0x38>
 8006e88:	f04f 34ff 	mov.w	r4, #4294967295
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	20000504 	.word	0x20000504

08006e94 <_malloc_r>:
 8006e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e98:	1ccd      	adds	r5, r1, #3
 8006e9a:	f025 0503 	bic.w	r5, r5, #3
 8006e9e:	3508      	adds	r5, #8
 8006ea0:	2d0c      	cmp	r5, #12
 8006ea2:	bf38      	it	cc
 8006ea4:	250c      	movcc	r5, #12
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	db01      	blt.n	8006eb0 <_malloc_r+0x1c>
 8006eac:	42a9      	cmp	r1, r5
 8006eae:	d905      	bls.n	8006ebc <_malloc_r+0x28>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f90 <_malloc_r+0xfc>
 8006ec0:	f000 f868 	bl	8006f94 <__malloc_lock>
 8006ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec8:	461c      	mov	r4, r3
 8006eca:	bb5c      	cbnz	r4, 8006f24 <_malloc_r+0x90>
 8006ecc:	4629      	mov	r1, r5
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f7ff ffc0 	bl	8006e54 <sbrk_aligned>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	d155      	bne.n	8006f86 <_malloc_r+0xf2>
 8006eda:	f8d8 4000 	ldr.w	r4, [r8]
 8006ede:	4626      	mov	r6, r4
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	d145      	bne.n	8006f70 <_malloc_r+0xdc>
 8006ee4:	2c00      	cmp	r4, #0
 8006ee6:	d048      	beq.n	8006f7a <_malloc_r+0xe6>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	4631      	mov	r1, r6
 8006eec:	4638      	mov	r0, r7
 8006eee:	eb04 0903 	add.w	r9, r4, r3
 8006ef2:	f001 ff5f 	bl	8008db4 <_sbrk_r>
 8006ef6:	4581      	cmp	r9, r0
 8006ef8:	d13f      	bne.n	8006f7a <_malloc_r+0xe6>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	1a6d      	subs	r5, r5, r1
 8006efe:	4629      	mov	r1, r5
 8006f00:	4638      	mov	r0, r7
 8006f02:	f7ff ffa7 	bl	8006e54 <sbrk_aligned>
 8006f06:	3001      	adds	r0, #1
 8006f08:	d037      	beq.n	8006f7a <_malloc_r+0xe6>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	442b      	add	r3, r5
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	f8d8 3000 	ldr.w	r3, [r8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d038      	beq.n	8006f8a <_malloc_r+0xf6>
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	42a2      	cmp	r2, r4
 8006f1c:	d12b      	bne.n	8006f76 <_malloc_r+0xe2>
 8006f1e:	2200      	movs	r2, #0
 8006f20:	605a      	str	r2, [r3, #4]
 8006f22:	e00f      	b.n	8006f44 <_malloc_r+0xb0>
 8006f24:	6822      	ldr	r2, [r4, #0]
 8006f26:	1b52      	subs	r2, r2, r5
 8006f28:	d41f      	bmi.n	8006f6a <_malloc_r+0xd6>
 8006f2a:	2a0b      	cmp	r2, #11
 8006f2c:	d917      	bls.n	8006f5e <_malloc_r+0xca>
 8006f2e:	1961      	adds	r1, r4, r5
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	6025      	str	r5, [r4, #0]
 8006f34:	bf18      	it	ne
 8006f36:	6059      	strne	r1, [r3, #4]
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	bf08      	it	eq
 8006f3c:	f8c8 1000 	streq.w	r1, [r8]
 8006f40:	5162      	str	r2, [r4, r5]
 8006f42:	604b      	str	r3, [r1, #4]
 8006f44:	4638      	mov	r0, r7
 8006f46:	f104 060b 	add.w	r6, r4, #11
 8006f4a:	f000 f829 	bl	8006fa0 <__malloc_unlock>
 8006f4e:	f026 0607 	bic.w	r6, r6, #7
 8006f52:	1d23      	adds	r3, r4, #4
 8006f54:	1af2      	subs	r2, r6, r3
 8006f56:	d0ae      	beq.n	8006eb6 <_malloc_r+0x22>
 8006f58:	1b9b      	subs	r3, r3, r6
 8006f5a:	50a3      	str	r3, [r4, r2]
 8006f5c:	e7ab      	b.n	8006eb6 <_malloc_r+0x22>
 8006f5e:	42a3      	cmp	r3, r4
 8006f60:	6862      	ldr	r2, [r4, #4]
 8006f62:	d1dd      	bne.n	8006f20 <_malloc_r+0x8c>
 8006f64:	f8c8 2000 	str.w	r2, [r8]
 8006f68:	e7ec      	b.n	8006f44 <_malloc_r+0xb0>
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	6864      	ldr	r4, [r4, #4]
 8006f6e:	e7ac      	b.n	8006eca <_malloc_r+0x36>
 8006f70:	4634      	mov	r4, r6
 8006f72:	6876      	ldr	r6, [r6, #4]
 8006f74:	e7b4      	b.n	8006ee0 <_malloc_r+0x4c>
 8006f76:	4613      	mov	r3, r2
 8006f78:	e7cc      	b.n	8006f14 <_malloc_r+0x80>
 8006f7a:	230c      	movs	r3, #12
 8006f7c:	603b      	str	r3, [r7, #0]
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f000 f80e 	bl	8006fa0 <__malloc_unlock>
 8006f84:	e797      	b.n	8006eb6 <_malloc_r+0x22>
 8006f86:	6025      	str	r5, [r4, #0]
 8006f88:	e7dc      	b.n	8006f44 <_malloc_r+0xb0>
 8006f8a:	605b      	str	r3, [r3, #4]
 8006f8c:	deff      	udf	#255	; 0xff
 8006f8e:	bf00      	nop
 8006f90:	20000500 	.word	0x20000500

08006f94 <__malloc_lock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__malloc_lock+0x8>)
 8006f96:	f001 bf5a 	b.w	8008e4e <__retarget_lock_acquire_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	20000648 	.word	0x20000648

08006fa0 <__malloc_unlock>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__malloc_unlock+0x8>)
 8006fa2:	f001 bf55 	b.w	8008e50 <__retarget_lock_release_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	20000648 	.word	0x20000648

08006fac <sulp>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	4604      	mov	r4, r0
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	ec45 4b10 	vmov	d0, r4, r5
 8006fb6:	4616      	mov	r6, r2
 8006fb8:	f003 fd22 	bl	800aa00 <__ulp>
 8006fbc:	ec51 0b10 	vmov	r0, r1, d0
 8006fc0:	b17e      	cbz	r6, 8006fe2 <sulp+0x36>
 8006fc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	dd09      	ble.n	8006fe2 <sulp+0x36>
 8006fce:	051b      	lsls	r3, r3, #20
 8006fd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fd4:	2400      	movs	r4, #0
 8006fd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fda:	4622      	mov	r2, r4
 8006fdc:	462b      	mov	r3, r5
 8006fde:	f7f9 fb13 	bl	8000608 <__aeabi_dmul>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	0000      	movs	r0, r0
	...

08006fe8 <_strtod_l>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	ed2d 8b02 	vpush	{d8}
 8006ff0:	b09b      	sub	sp, #108	; 0x6c
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	9216      	str	r2, [sp, #88]	; 0x58
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	f04f 0800 	mov.w	r8, #0
 8007000:	f04f 0900 	mov.w	r9, #0
 8007004:	460a      	mov	r2, r1
 8007006:	9215      	str	r2, [sp, #84]	; 0x54
 8007008:	7811      	ldrb	r1, [r2, #0]
 800700a:	292b      	cmp	r1, #43	; 0x2b
 800700c:	d04c      	beq.n	80070a8 <_strtod_l+0xc0>
 800700e:	d83a      	bhi.n	8007086 <_strtod_l+0x9e>
 8007010:	290d      	cmp	r1, #13
 8007012:	d834      	bhi.n	800707e <_strtod_l+0x96>
 8007014:	2908      	cmp	r1, #8
 8007016:	d834      	bhi.n	8007082 <_strtod_l+0x9a>
 8007018:	2900      	cmp	r1, #0
 800701a:	d03d      	beq.n	8007098 <_strtod_l+0xb0>
 800701c:	2200      	movs	r2, #0
 800701e:	920a      	str	r2, [sp, #40]	; 0x28
 8007020:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007022:	7832      	ldrb	r2, [r6, #0]
 8007024:	2a30      	cmp	r2, #48	; 0x30
 8007026:	f040 80b4 	bne.w	8007192 <_strtod_l+0x1aa>
 800702a:	7872      	ldrb	r2, [r6, #1]
 800702c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007030:	2a58      	cmp	r2, #88	; 0x58
 8007032:	d170      	bne.n	8007116 <_strtod_l+0x12e>
 8007034:	9302      	str	r3, [sp, #8]
 8007036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	ab16      	add	r3, sp, #88	; 0x58
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4a8e      	ldr	r2, [pc, #568]	; (8007278 <_strtod_l+0x290>)
 8007040:	ab17      	add	r3, sp, #92	; 0x5c
 8007042:	a915      	add	r1, sp, #84	; 0x54
 8007044:	4620      	mov	r0, r4
 8007046:	f002 fe6d 	bl	8009d24 <__gethex>
 800704a:	f010 070f 	ands.w	r7, r0, #15
 800704e:	4605      	mov	r5, r0
 8007050:	d005      	beq.n	800705e <_strtod_l+0x76>
 8007052:	2f06      	cmp	r7, #6
 8007054:	d12a      	bne.n	80070ac <_strtod_l+0xc4>
 8007056:	3601      	adds	r6, #1
 8007058:	2300      	movs	r3, #0
 800705a:	9615      	str	r6, [sp, #84]	; 0x54
 800705c:	930a      	str	r3, [sp, #40]	; 0x28
 800705e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007060:	2b00      	cmp	r3, #0
 8007062:	f040 857f 	bne.w	8007b64 <_strtod_l+0xb7c>
 8007066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007068:	b1db      	cbz	r3, 80070a2 <_strtod_l+0xba>
 800706a:	4642      	mov	r2, r8
 800706c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007070:	ec43 2b10 	vmov	d0, r2, r3
 8007074:	b01b      	add	sp, #108	; 0x6c
 8007076:	ecbd 8b02 	vpop	{d8}
 800707a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707e:	2920      	cmp	r1, #32
 8007080:	d1cc      	bne.n	800701c <_strtod_l+0x34>
 8007082:	3201      	adds	r2, #1
 8007084:	e7bf      	b.n	8007006 <_strtod_l+0x1e>
 8007086:	292d      	cmp	r1, #45	; 0x2d
 8007088:	d1c8      	bne.n	800701c <_strtod_l+0x34>
 800708a:	2101      	movs	r1, #1
 800708c:	910a      	str	r1, [sp, #40]	; 0x28
 800708e:	1c51      	adds	r1, r2, #1
 8007090:	9115      	str	r1, [sp, #84]	; 0x54
 8007092:	7852      	ldrb	r2, [r2, #1]
 8007094:	2a00      	cmp	r2, #0
 8007096:	d1c3      	bne.n	8007020 <_strtod_l+0x38>
 8007098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800709a:	9515      	str	r5, [sp, #84]	; 0x54
 800709c:	2b00      	cmp	r3, #0
 800709e:	f040 855f 	bne.w	8007b60 <_strtod_l+0xb78>
 80070a2:	4642      	mov	r2, r8
 80070a4:	464b      	mov	r3, r9
 80070a6:	e7e3      	b.n	8007070 <_strtod_l+0x88>
 80070a8:	2100      	movs	r1, #0
 80070aa:	e7ef      	b.n	800708c <_strtod_l+0xa4>
 80070ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070ae:	b13a      	cbz	r2, 80070c0 <_strtod_l+0xd8>
 80070b0:	2135      	movs	r1, #53	; 0x35
 80070b2:	a818      	add	r0, sp, #96	; 0x60
 80070b4:	f003 fda1 	bl	800abfa <__copybits>
 80070b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80070ba:	4620      	mov	r0, r4
 80070bc:	f003 f974 	bl	800a3a8 <_Bfree>
 80070c0:	3f01      	subs	r7, #1
 80070c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070c4:	2f04      	cmp	r7, #4
 80070c6:	d806      	bhi.n	80070d6 <_strtod_l+0xee>
 80070c8:	e8df f007 	tbb	[pc, r7]
 80070cc:	201d0314 	.word	0x201d0314
 80070d0:	14          	.byte	0x14
 80070d1:	00          	.byte	0x00
 80070d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80070d6:	05e9      	lsls	r1, r5, #23
 80070d8:	bf48      	it	mi
 80070da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80070de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070e2:	0d1b      	lsrs	r3, r3, #20
 80070e4:	051b      	lsls	r3, r3, #20
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1b9      	bne.n	800705e <_strtod_l+0x76>
 80070ea:	f001 fe85 	bl	8008df8 <__errno>
 80070ee:	2322      	movs	r3, #34	; 0x22
 80070f0:	6003      	str	r3, [r0, #0]
 80070f2:	e7b4      	b.n	800705e <_strtod_l+0x76>
 80070f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80070f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007100:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007104:	e7e7      	b.n	80070d6 <_strtod_l+0xee>
 8007106:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007280 <_strtod_l+0x298>
 800710a:	e7e4      	b.n	80070d6 <_strtod_l+0xee>
 800710c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007110:	f04f 38ff 	mov.w	r8, #4294967295
 8007114:	e7df      	b.n	80070d6 <_strtod_l+0xee>
 8007116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	9215      	str	r2, [sp, #84]	; 0x54
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b30      	cmp	r3, #48	; 0x30
 8007120:	d0f9      	beq.n	8007116 <_strtod_l+0x12e>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d09b      	beq.n	800705e <_strtod_l+0x76>
 8007126:	2301      	movs	r3, #1
 8007128:	f04f 0a00 	mov.w	sl, #0
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007130:	930b      	str	r3, [sp, #44]	; 0x2c
 8007132:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007136:	46d3      	mov	fp, sl
 8007138:	220a      	movs	r2, #10
 800713a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800713c:	7806      	ldrb	r6, [r0, #0]
 800713e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007142:	b2d9      	uxtb	r1, r3
 8007144:	2909      	cmp	r1, #9
 8007146:	d926      	bls.n	8007196 <_strtod_l+0x1ae>
 8007148:	494c      	ldr	r1, [pc, #304]	; (800727c <_strtod_l+0x294>)
 800714a:	2201      	movs	r2, #1
 800714c:	f001 fde8 	bl	8008d20 <strncmp>
 8007150:	2800      	cmp	r0, #0
 8007152:	d030      	beq.n	80071b6 <_strtod_l+0x1ce>
 8007154:	2000      	movs	r0, #0
 8007156:	4632      	mov	r2, r6
 8007158:	9005      	str	r0, [sp, #20]
 800715a:	465e      	mov	r6, fp
 800715c:	4603      	mov	r3, r0
 800715e:	2a65      	cmp	r2, #101	; 0x65
 8007160:	d001      	beq.n	8007166 <_strtod_l+0x17e>
 8007162:	2a45      	cmp	r2, #69	; 0x45
 8007164:	d113      	bne.n	800718e <_strtod_l+0x1a6>
 8007166:	b91e      	cbnz	r6, 8007170 <_strtod_l+0x188>
 8007168:	9a04      	ldr	r2, [sp, #16]
 800716a:	4302      	orrs	r2, r0
 800716c:	d094      	beq.n	8007098 <_strtod_l+0xb0>
 800716e:	2600      	movs	r6, #0
 8007170:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007172:	1c6a      	adds	r2, r5, #1
 8007174:	9215      	str	r2, [sp, #84]	; 0x54
 8007176:	786a      	ldrb	r2, [r5, #1]
 8007178:	2a2b      	cmp	r2, #43	; 0x2b
 800717a:	d074      	beq.n	8007266 <_strtod_l+0x27e>
 800717c:	2a2d      	cmp	r2, #45	; 0x2d
 800717e:	d078      	beq.n	8007272 <_strtod_l+0x28a>
 8007180:	f04f 0c00 	mov.w	ip, #0
 8007184:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007188:	2909      	cmp	r1, #9
 800718a:	d97f      	bls.n	800728c <_strtod_l+0x2a4>
 800718c:	9515      	str	r5, [sp, #84]	; 0x54
 800718e:	2700      	movs	r7, #0
 8007190:	e09e      	b.n	80072d0 <_strtod_l+0x2e8>
 8007192:	2300      	movs	r3, #0
 8007194:	e7c8      	b.n	8007128 <_strtod_l+0x140>
 8007196:	f1bb 0f08 	cmp.w	fp, #8
 800719a:	bfd8      	it	le
 800719c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800719e:	f100 0001 	add.w	r0, r0, #1
 80071a2:	bfda      	itte	le
 80071a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80071a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80071aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80071ae:	f10b 0b01 	add.w	fp, fp, #1
 80071b2:	9015      	str	r0, [sp, #84]	; 0x54
 80071b4:	e7c1      	b.n	800713a <_strtod_l+0x152>
 80071b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	9215      	str	r2, [sp, #84]	; 0x54
 80071bc:	785a      	ldrb	r2, [r3, #1]
 80071be:	f1bb 0f00 	cmp.w	fp, #0
 80071c2:	d037      	beq.n	8007234 <_strtod_l+0x24c>
 80071c4:	9005      	str	r0, [sp, #20]
 80071c6:	465e      	mov	r6, fp
 80071c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071cc:	2b09      	cmp	r3, #9
 80071ce:	d912      	bls.n	80071f6 <_strtod_l+0x20e>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e7c4      	b.n	800715e <_strtod_l+0x176>
 80071d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	9215      	str	r2, [sp, #84]	; 0x54
 80071da:	785a      	ldrb	r2, [r3, #1]
 80071dc:	3001      	adds	r0, #1
 80071de:	2a30      	cmp	r2, #48	; 0x30
 80071e0:	d0f8      	beq.n	80071d4 <_strtod_l+0x1ec>
 80071e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	f200 84c1 	bhi.w	8007b6e <_strtod_l+0xb86>
 80071ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ee:	9005      	str	r0, [sp, #20]
 80071f0:	2000      	movs	r0, #0
 80071f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f4:	4606      	mov	r6, r0
 80071f6:	3a30      	subs	r2, #48	; 0x30
 80071f8:	f100 0301 	add.w	r3, r0, #1
 80071fc:	d014      	beq.n	8007228 <_strtod_l+0x240>
 80071fe:	9905      	ldr	r1, [sp, #20]
 8007200:	4419      	add	r1, r3
 8007202:	9105      	str	r1, [sp, #20]
 8007204:	4633      	mov	r3, r6
 8007206:	eb00 0c06 	add.w	ip, r0, r6
 800720a:	210a      	movs	r1, #10
 800720c:	4563      	cmp	r3, ip
 800720e:	d113      	bne.n	8007238 <_strtod_l+0x250>
 8007210:	1833      	adds	r3, r6, r0
 8007212:	2b08      	cmp	r3, #8
 8007214:	f106 0601 	add.w	r6, r6, #1
 8007218:	4406      	add	r6, r0
 800721a:	dc1a      	bgt.n	8007252 <_strtod_l+0x26a>
 800721c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800721e:	230a      	movs	r3, #10
 8007220:	fb03 2301 	mla	r3, r3, r1, r2
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	2300      	movs	r3, #0
 8007228:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800722a:	1c51      	adds	r1, r2, #1
 800722c:	9115      	str	r1, [sp, #84]	; 0x54
 800722e:	7852      	ldrb	r2, [r2, #1]
 8007230:	4618      	mov	r0, r3
 8007232:	e7c9      	b.n	80071c8 <_strtod_l+0x1e0>
 8007234:	4658      	mov	r0, fp
 8007236:	e7d2      	b.n	80071de <_strtod_l+0x1f6>
 8007238:	2b08      	cmp	r3, #8
 800723a:	f103 0301 	add.w	r3, r3, #1
 800723e:	dc03      	bgt.n	8007248 <_strtod_l+0x260>
 8007240:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007242:	434f      	muls	r7, r1
 8007244:	9709      	str	r7, [sp, #36]	; 0x24
 8007246:	e7e1      	b.n	800720c <_strtod_l+0x224>
 8007248:	2b10      	cmp	r3, #16
 800724a:	bfd8      	it	le
 800724c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007250:	e7dc      	b.n	800720c <_strtod_l+0x224>
 8007252:	2e10      	cmp	r6, #16
 8007254:	bfdc      	itt	le
 8007256:	230a      	movle	r3, #10
 8007258:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800725c:	e7e3      	b.n	8007226 <_strtod_l+0x23e>
 800725e:	2300      	movs	r3, #0
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	2301      	movs	r3, #1
 8007264:	e780      	b.n	8007168 <_strtod_l+0x180>
 8007266:	f04f 0c00 	mov.w	ip, #0
 800726a:	1caa      	adds	r2, r5, #2
 800726c:	9215      	str	r2, [sp, #84]	; 0x54
 800726e:	78aa      	ldrb	r2, [r5, #2]
 8007270:	e788      	b.n	8007184 <_strtod_l+0x19c>
 8007272:	f04f 0c01 	mov.w	ip, #1
 8007276:	e7f8      	b.n	800726a <_strtod_l+0x282>
 8007278:	0800b95c 	.word	0x0800b95c
 800727c:	0800b958 	.word	0x0800b958
 8007280:	7ff00000 	.word	0x7ff00000
 8007284:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007286:	1c51      	adds	r1, r2, #1
 8007288:	9115      	str	r1, [sp, #84]	; 0x54
 800728a:	7852      	ldrb	r2, [r2, #1]
 800728c:	2a30      	cmp	r2, #48	; 0x30
 800728e:	d0f9      	beq.n	8007284 <_strtod_l+0x29c>
 8007290:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007294:	2908      	cmp	r1, #8
 8007296:	f63f af7a 	bhi.w	800718e <_strtod_l+0x1a6>
 800729a:	3a30      	subs	r2, #48	; 0x30
 800729c:	9208      	str	r2, [sp, #32]
 800729e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072a0:	920c      	str	r2, [sp, #48]	; 0x30
 80072a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072a4:	1c57      	adds	r7, r2, #1
 80072a6:	9715      	str	r7, [sp, #84]	; 0x54
 80072a8:	7852      	ldrb	r2, [r2, #1]
 80072aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80072ae:	f1be 0f09 	cmp.w	lr, #9
 80072b2:	d938      	bls.n	8007326 <_strtod_l+0x33e>
 80072b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072b6:	1a7f      	subs	r7, r7, r1
 80072b8:	2f08      	cmp	r7, #8
 80072ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80072be:	dc03      	bgt.n	80072c8 <_strtod_l+0x2e0>
 80072c0:	9908      	ldr	r1, [sp, #32]
 80072c2:	428f      	cmp	r7, r1
 80072c4:	bfa8      	it	ge
 80072c6:	460f      	movge	r7, r1
 80072c8:	f1bc 0f00 	cmp.w	ip, #0
 80072cc:	d000      	beq.n	80072d0 <_strtod_l+0x2e8>
 80072ce:	427f      	negs	r7, r7
 80072d0:	2e00      	cmp	r6, #0
 80072d2:	d14f      	bne.n	8007374 <_strtod_l+0x38c>
 80072d4:	9904      	ldr	r1, [sp, #16]
 80072d6:	4301      	orrs	r1, r0
 80072d8:	f47f aec1 	bne.w	800705e <_strtod_l+0x76>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f47f aedb 	bne.w	8007098 <_strtod_l+0xb0>
 80072e2:	2a69      	cmp	r2, #105	; 0x69
 80072e4:	d029      	beq.n	800733a <_strtod_l+0x352>
 80072e6:	dc26      	bgt.n	8007336 <_strtod_l+0x34e>
 80072e8:	2a49      	cmp	r2, #73	; 0x49
 80072ea:	d026      	beq.n	800733a <_strtod_l+0x352>
 80072ec:	2a4e      	cmp	r2, #78	; 0x4e
 80072ee:	f47f aed3 	bne.w	8007098 <_strtod_l+0xb0>
 80072f2:	499b      	ldr	r1, [pc, #620]	; (8007560 <_strtod_l+0x578>)
 80072f4:	a815      	add	r0, sp, #84	; 0x54
 80072f6:	f002 ff55 	bl	800a1a4 <__match>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	f43f aecc 	beq.w	8007098 <_strtod_l+0xb0>
 8007300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b28      	cmp	r3, #40	; 0x28
 8007306:	d12f      	bne.n	8007368 <_strtod_l+0x380>
 8007308:	4996      	ldr	r1, [pc, #600]	; (8007564 <_strtod_l+0x57c>)
 800730a:	aa18      	add	r2, sp, #96	; 0x60
 800730c:	a815      	add	r0, sp, #84	; 0x54
 800730e:	f002 ff5d 	bl	800a1cc <__hexnan>
 8007312:	2805      	cmp	r0, #5
 8007314:	d128      	bne.n	8007368 <_strtod_l+0x380>
 8007316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800731c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007320:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007324:	e69b      	b.n	800705e <_strtod_l+0x76>
 8007326:	9f08      	ldr	r7, [sp, #32]
 8007328:	210a      	movs	r1, #10
 800732a:	fb01 2107 	mla	r1, r1, r7, r2
 800732e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007332:	9208      	str	r2, [sp, #32]
 8007334:	e7b5      	b.n	80072a2 <_strtod_l+0x2ba>
 8007336:	2a6e      	cmp	r2, #110	; 0x6e
 8007338:	e7d9      	b.n	80072ee <_strtod_l+0x306>
 800733a:	498b      	ldr	r1, [pc, #556]	; (8007568 <_strtod_l+0x580>)
 800733c:	a815      	add	r0, sp, #84	; 0x54
 800733e:	f002 ff31 	bl	800a1a4 <__match>
 8007342:	2800      	cmp	r0, #0
 8007344:	f43f aea8 	beq.w	8007098 <_strtod_l+0xb0>
 8007348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800734a:	4988      	ldr	r1, [pc, #544]	; (800756c <_strtod_l+0x584>)
 800734c:	3b01      	subs	r3, #1
 800734e:	a815      	add	r0, sp, #84	; 0x54
 8007350:	9315      	str	r3, [sp, #84]	; 0x54
 8007352:	f002 ff27 	bl	800a1a4 <__match>
 8007356:	b910      	cbnz	r0, 800735e <_strtod_l+0x376>
 8007358:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800735a:	3301      	adds	r3, #1
 800735c:	9315      	str	r3, [sp, #84]	; 0x54
 800735e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800757c <_strtod_l+0x594>
 8007362:	f04f 0800 	mov.w	r8, #0
 8007366:	e67a      	b.n	800705e <_strtod_l+0x76>
 8007368:	4881      	ldr	r0, [pc, #516]	; (8007570 <_strtod_l+0x588>)
 800736a:	f001 fd81 	bl	8008e70 <nan>
 800736e:	ec59 8b10 	vmov	r8, r9, d0
 8007372:	e674      	b.n	800705e <_strtod_l+0x76>
 8007374:	9b05      	ldr	r3, [sp, #20]
 8007376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007378:	1afb      	subs	r3, r7, r3
 800737a:	f1bb 0f00 	cmp.w	fp, #0
 800737e:	bf08      	it	eq
 8007380:	46b3      	moveq	fp, r6
 8007382:	2e10      	cmp	r6, #16
 8007384:	9308      	str	r3, [sp, #32]
 8007386:	4635      	mov	r5, r6
 8007388:	bfa8      	it	ge
 800738a:	2510      	movge	r5, #16
 800738c:	f7f9 f8c2 	bl	8000514 <__aeabi_ui2d>
 8007390:	2e09      	cmp	r6, #9
 8007392:	4680      	mov	r8, r0
 8007394:	4689      	mov	r9, r1
 8007396:	dd13      	ble.n	80073c0 <_strtod_l+0x3d8>
 8007398:	4b76      	ldr	r3, [pc, #472]	; (8007574 <_strtod_l+0x58c>)
 800739a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800739e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073a2:	f7f9 f931 	bl	8000608 <__aeabi_dmul>
 80073a6:	4680      	mov	r8, r0
 80073a8:	4650      	mov	r0, sl
 80073aa:	4689      	mov	r9, r1
 80073ac:	f7f9 f8b2 	bl	8000514 <__aeabi_ui2d>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4640      	mov	r0, r8
 80073b6:	4649      	mov	r1, r9
 80073b8:	f7f8 ff70 	bl	800029c <__adddf3>
 80073bc:	4680      	mov	r8, r0
 80073be:	4689      	mov	r9, r1
 80073c0:	2e0f      	cmp	r6, #15
 80073c2:	dc38      	bgt.n	8007436 <_strtod_l+0x44e>
 80073c4:	9b08      	ldr	r3, [sp, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f43f ae49 	beq.w	800705e <_strtod_l+0x76>
 80073cc:	dd24      	ble.n	8007418 <_strtod_l+0x430>
 80073ce:	2b16      	cmp	r3, #22
 80073d0:	dc0b      	bgt.n	80073ea <_strtod_l+0x402>
 80073d2:	4968      	ldr	r1, [pc, #416]	; (8007574 <_strtod_l+0x58c>)
 80073d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	f7f9 f912 	bl	8000608 <__aeabi_dmul>
 80073e4:	4680      	mov	r8, r0
 80073e6:	4689      	mov	r9, r1
 80073e8:	e639      	b.n	800705e <_strtod_l+0x76>
 80073ea:	9a08      	ldr	r2, [sp, #32]
 80073ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80073f0:	4293      	cmp	r3, r2
 80073f2:	db20      	blt.n	8007436 <_strtod_l+0x44e>
 80073f4:	4c5f      	ldr	r4, [pc, #380]	; (8007574 <_strtod_l+0x58c>)
 80073f6:	f1c6 060f 	rsb	r6, r6, #15
 80073fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80073fe:	4642      	mov	r2, r8
 8007400:	464b      	mov	r3, r9
 8007402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007406:	f7f9 f8ff 	bl	8000608 <__aeabi_dmul>
 800740a:	9b08      	ldr	r3, [sp, #32]
 800740c:	1b9e      	subs	r6, r3, r6
 800740e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007412:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007416:	e7e3      	b.n	80073e0 <_strtod_l+0x3f8>
 8007418:	9b08      	ldr	r3, [sp, #32]
 800741a:	3316      	adds	r3, #22
 800741c:	db0b      	blt.n	8007436 <_strtod_l+0x44e>
 800741e:	9b05      	ldr	r3, [sp, #20]
 8007420:	1bdf      	subs	r7, r3, r7
 8007422:	4b54      	ldr	r3, [pc, #336]	; (8007574 <_strtod_l+0x58c>)
 8007424:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f9 fa14 	bl	800085c <__aeabi_ddiv>
 8007434:	e7d6      	b.n	80073e4 <_strtod_l+0x3fc>
 8007436:	9b08      	ldr	r3, [sp, #32]
 8007438:	1b75      	subs	r5, r6, r5
 800743a:	441d      	add	r5, r3
 800743c:	2d00      	cmp	r5, #0
 800743e:	dd70      	ble.n	8007522 <_strtod_l+0x53a>
 8007440:	f015 030f 	ands.w	r3, r5, #15
 8007444:	d00a      	beq.n	800745c <_strtod_l+0x474>
 8007446:	494b      	ldr	r1, [pc, #300]	; (8007574 <_strtod_l+0x58c>)
 8007448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800744c:	4642      	mov	r2, r8
 800744e:	464b      	mov	r3, r9
 8007450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007454:	f7f9 f8d8 	bl	8000608 <__aeabi_dmul>
 8007458:	4680      	mov	r8, r0
 800745a:	4689      	mov	r9, r1
 800745c:	f035 050f 	bics.w	r5, r5, #15
 8007460:	d04d      	beq.n	80074fe <_strtod_l+0x516>
 8007462:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007466:	dd22      	ble.n	80074ae <_strtod_l+0x4c6>
 8007468:	2500      	movs	r5, #0
 800746a:	46ab      	mov	fp, r5
 800746c:	9509      	str	r5, [sp, #36]	; 0x24
 800746e:	9505      	str	r5, [sp, #20]
 8007470:	2322      	movs	r3, #34	; 0x22
 8007472:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800757c <_strtod_l+0x594>
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	f04f 0800 	mov.w	r8, #0
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	f43f aded 	beq.w	800705e <_strtod_l+0x76>
 8007484:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007486:	4620      	mov	r0, r4
 8007488:	f002 ff8e 	bl	800a3a8 <_Bfree>
 800748c:	9905      	ldr	r1, [sp, #20]
 800748e:	4620      	mov	r0, r4
 8007490:	f002 ff8a 	bl	800a3a8 <_Bfree>
 8007494:	4659      	mov	r1, fp
 8007496:	4620      	mov	r0, r4
 8007498:	f002 ff86 	bl	800a3a8 <_Bfree>
 800749c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800749e:	4620      	mov	r0, r4
 80074a0:	f002 ff82 	bl	800a3a8 <_Bfree>
 80074a4:	4629      	mov	r1, r5
 80074a6:	4620      	mov	r0, r4
 80074a8:	f002 ff7e 	bl	800a3a8 <_Bfree>
 80074ac:	e5d7      	b.n	800705e <_strtod_l+0x76>
 80074ae:	4b32      	ldr	r3, [pc, #200]	; (8007578 <_strtod_l+0x590>)
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	2300      	movs	r3, #0
 80074b4:	112d      	asrs	r5, r5, #4
 80074b6:	4640      	mov	r0, r8
 80074b8:	4649      	mov	r1, r9
 80074ba:	469a      	mov	sl, r3
 80074bc:	2d01      	cmp	r5, #1
 80074be:	dc21      	bgt.n	8007504 <_strtod_l+0x51c>
 80074c0:	b10b      	cbz	r3, 80074c6 <_strtod_l+0x4de>
 80074c2:	4680      	mov	r8, r0
 80074c4:	4689      	mov	r9, r1
 80074c6:	492c      	ldr	r1, [pc, #176]	; (8007578 <_strtod_l+0x590>)
 80074c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80074cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d8:	f7f9 f896 	bl	8000608 <__aeabi_dmul>
 80074dc:	4b27      	ldr	r3, [pc, #156]	; (800757c <_strtod_l+0x594>)
 80074de:	460a      	mov	r2, r1
 80074e0:	400b      	ands	r3, r1
 80074e2:	4927      	ldr	r1, [pc, #156]	; (8007580 <_strtod_l+0x598>)
 80074e4:	428b      	cmp	r3, r1
 80074e6:	4680      	mov	r8, r0
 80074e8:	d8be      	bhi.n	8007468 <_strtod_l+0x480>
 80074ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074ee:	428b      	cmp	r3, r1
 80074f0:	bf86      	itte	hi
 80074f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007584 <_strtod_l+0x59c>
 80074f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80074fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80074fe:	2300      	movs	r3, #0
 8007500:	9304      	str	r3, [sp, #16]
 8007502:	e07b      	b.n	80075fc <_strtod_l+0x614>
 8007504:	07ea      	lsls	r2, r5, #31
 8007506:	d505      	bpl.n	8007514 <_strtod_l+0x52c>
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f9 f87b 	bl	8000608 <__aeabi_dmul>
 8007512:	2301      	movs	r3, #1
 8007514:	9a04      	ldr	r2, [sp, #16]
 8007516:	3208      	adds	r2, #8
 8007518:	f10a 0a01 	add.w	sl, sl, #1
 800751c:	106d      	asrs	r5, r5, #1
 800751e:	9204      	str	r2, [sp, #16]
 8007520:	e7cc      	b.n	80074bc <_strtod_l+0x4d4>
 8007522:	d0ec      	beq.n	80074fe <_strtod_l+0x516>
 8007524:	426d      	negs	r5, r5
 8007526:	f015 020f 	ands.w	r2, r5, #15
 800752a:	d00a      	beq.n	8007542 <_strtod_l+0x55a>
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <_strtod_l+0x58c>)
 800752e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f9 f98f 	bl	800085c <__aeabi_ddiv>
 800753e:	4680      	mov	r8, r0
 8007540:	4689      	mov	r9, r1
 8007542:	112d      	asrs	r5, r5, #4
 8007544:	d0db      	beq.n	80074fe <_strtod_l+0x516>
 8007546:	2d1f      	cmp	r5, #31
 8007548:	dd1e      	ble.n	8007588 <_strtod_l+0x5a0>
 800754a:	2500      	movs	r5, #0
 800754c:	46ab      	mov	fp, r5
 800754e:	9509      	str	r5, [sp, #36]	; 0x24
 8007550:	9505      	str	r5, [sp, #20]
 8007552:	2322      	movs	r3, #34	; 0x22
 8007554:	f04f 0800 	mov.w	r8, #0
 8007558:	f04f 0900 	mov.w	r9, #0
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	e78d      	b.n	800747c <_strtod_l+0x494>
 8007560:	0800b9bd 	.word	0x0800b9bd
 8007564:	0800b970 	.word	0x0800b970
 8007568:	0800b9b5 	.word	0x0800b9b5
 800756c:	0800ba30 	.word	0x0800ba30
 8007570:	0800ba2c 	.word	0x0800ba2c
 8007574:	0800bba0 	.word	0x0800bba0
 8007578:	0800bb78 	.word	0x0800bb78
 800757c:	7ff00000 	.word	0x7ff00000
 8007580:	7ca00000 	.word	0x7ca00000
 8007584:	7fefffff 	.word	0x7fefffff
 8007588:	f015 0310 	ands.w	r3, r5, #16
 800758c:	bf18      	it	ne
 800758e:	236a      	movne	r3, #106	; 0x6a
 8007590:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007934 <_strtod_l+0x94c>
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	2300      	movs	r3, #0
 800759c:	07ea      	lsls	r2, r5, #31
 800759e:	d504      	bpl.n	80075aa <_strtod_l+0x5c2>
 80075a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80075a4:	f7f9 f830 	bl	8000608 <__aeabi_dmul>
 80075a8:	2301      	movs	r3, #1
 80075aa:	106d      	asrs	r5, r5, #1
 80075ac:	f10a 0a08 	add.w	sl, sl, #8
 80075b0:	d1f4      	bne.n	800759c <_strtod_l+0x5b4>
 80075b2:	b10b      	cbz	r3, 80075b8 <_strtod_l+0x5d0>
 80075b4:	4680      	mov	r8, r0
 80075b6:	4689      	mov	r9, r1
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	b1bb      	cbz	r3, 80075ec <_strtod_l+0x604>
 80075bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80075c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	4649      	mov	r1, r9
 80075c8:	dd10      	ble.n	80075ec <_strtod_l+0x604>
 80075ca:	2b1f      	cmp	r3, #31
 80075cc:	f340 811e 	ble.w	800780c <_strtod_l+0x824>
 80075d0:	2b34      	cmp	r3, #52	; 0x34
 80075d2:	bfde      	ittt	le
 80075d4:	f04f 33ff 	movle.w	r3, #4294967295
 80075d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80075dc:	4093      	lslle	r3, r2
 80075de:	f04f 0800 	mov.w	r8, #0
 80075e2:	bfcc      	ite	gt
 80075e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80075e8:	ea03 0901 	andle.w	r9, r3, r1
 80075ec:	2200      	movs	r2, #0
 80075ee:	2300      	movs	r3, #0
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f9 fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d1a6      	bne.n	800754a <_strtod_l+0x562>
 80075fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007602:	4633      	mov	r3, r6
 8007604:	465a      	mov	r2, fp
 8007606:	4620      	mov	r0, r4
 8007608:	f002 ff36 	bl	800a478 <__s2b>
 800760c:	9009      	str	r0, [sp, #36]	; 0x24
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f af2a 	beq.w	8007468 <_strtod_l+0x480>
 8007614:	9a08      	ldr	r2, [sp, #32]
 8007616:	9b05      	ldr	r3, [sp, #20]
 8007618:	2a00      	cmp	r2, #0
 800761a:	eba3 0307 	sub.w	r3, r3, r7
 800761e:	bfa8      	it	ge
 8007620:	2300      	movge	r3, #0
 8007622:	930c      	str	r3, [sp, #48]	; 0x30
 8007624:	2500      	movs	r5, #0
 8007626:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800762a:	9312      	str	r3, [sp, #72]	; 0x48
 800762c:	46ab      	mov	fp, r5
 800762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007630:	4620      	mov	r0, r4
 8007632:	6859      	ldr	r1, [r3, #4]
 8007634:	f002 fe78 	bl	800a328 <_Balloc>
 8007638:	9005      	str	r0, [sp, #20]
 800763a:	2800      	cmp	r0, #0
 800763c:	f43f af18 	beq.w	8007470 <_strtod_l+0x488>
 8007640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	3202      	adds	r2, #2
 8007646:	f103 010c 	add.w	r1, r3, #12
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	300c      	adds	r0, #12
 800764e:	f001 fc00 	bl	8008e52 <memcpy>
 8007652:	ec49 8b10 	vmov	d0, r8, r9
 8007656:	aa18      	add	r2, sp, #96	; 0x60
 8007658:	a917      	add	r1, sp, #92	; 0x5c
 800765a:	4620      	mov	r0, r4
 800765c:	f003 fa40 	bl	800aae0 <__d2b>
 8007660:	ec49 8b18 	vmov	d8, r8, r9
 8007664:	9016      	str	r0, [sp, #88]	; 0x58
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f af02 	beq.w	8007470 <_strtod_l+0x488>
 800766c:	2101      	movs	r1, #1
 800766e:	4620      	mov	r0, r4
 8007670:	f002 ff9a 	bl	800a5a8 <__i2b>
 8007674:	4683      	mov	fp, r0
 8007676:	2800      	cmp	r0, #0
 8007678:	f43f aefa 	beq.w	8007470 <_strtod_l+0x488>
 800767c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800767e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007680:	2e00      	cmp	r6, #0
 8007682:	bfab      	itete	ge
 8007684:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007686:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007688:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800768a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800768e:	bfac      	ite	ge
 8007690:	eb06 0a03 	addge.w	sl, r6, r3
 8007694:	1b9f      	sublt	r7, r3, r6
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	1af6      	subs	r6, r6, r3
 800769a:	4416      	add	r6, r2
 800769c:	4ba0      	ldr	r3, [pc, #640]	; (8007920 <_strtod_l+0x938>)
 800769e:	3e01      	subs	r6, #1
 80076a0:	429e      	cmp	r6, r3
 80076a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076a6:	f280 80c4 	bge.w	8007832 <_strtod_l+0x84a>
 80076aa:	1b9b      	subs	r3, r3, r6
 80076ac:	2b1f      	cmp	r3, #31
 80076ae:	eba2 0203 	sub.w	r2, r2, r3
 80076b2:	f04f 0101 	mov.w	r1, #1
 80076b6:	f300 80b0 	bgt.w	800781a <_strtod_l+0x832>
 80076ba:	fa01 f303 	lsl.w	r3, r1, r3
 80076be:	930e      	str	r3, [sp, #56]	; 0x38
 80076c0:	2300      	movs	r3, #0
 80076c2:	930d      	str	r3, [sp, #52]	; 0x34
 80076c4:	eb0a 0602 	add.w	r6, sl, r2
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	45b2      	cmp	sl, r6
 80076cc:	4417      	add	r7, r2
 80076ce:	441f      	add	r7, r3
 80076d0:	4653      	mov	r3, sl
 80076d2:	bfa8      	it	ge
 80076d4:	4633      	movge	r3, r6
 80076d6:	42bb      	cmp	r3, r7
 80076d8:	bfa8      	it	ge
 80076da:	463b      	movge	r3, r7
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bfc2      	ittt	gt
 80076e0:	1af6      	subgt	r6, r6, r3
 80076e2:	1aff      	subgt	r7, r7, r3
 80076e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80076e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dd17      	ble.n	800771e <_strtod_l+0x736>
 80076ee:	4659      	mov	r1, fp
 80076f0:	461a      	mov	r2, r3
 80076f2:	4620      	mov	r0, r4
 80076f4:	f003 f818 	bl	800a728 <__pow5mult>
 80076f8:	4683      	mov	fp, r0
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f43f aeb8 	beq.w	8007470 <_strtod_l+0x488>
 8007700:	4601      	mov	r1, r0
 8007702:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007704:	4620      	mov	r0, r4
 8007706:	f002 ff65 	bl	800a5d4 <__multiply>
 800770a:	900b      	str	r0, [sp, #44]	; 0x2c
 800770c:	2800      	cmp	r0, #0
 800770e:	f43f aeaf 	beq.w	8007470 <_strtod_l+0x488>
 8007712:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007714:	4620      	mov	r0, r4
 8007716:	f002 fe47 	bl	800a3a8 <_Bfree>
 800771a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800771c:	9316      	str	r3, [sp, #88]	; 0x58
 800771e:	2e00      	cmp	r6, #0
 8007720:	f300 808c 	bgt.w	800783c <_strtod_l+0x854>
 8007724:	9b08      	ldr	r3, [sp, #32]
 8007726:	2b00      	cmp	r3, #0
 8007728:	dd08      	ble.n	800773c <_strtod_l+0x754>
 800772a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800772c:	9905      	ldr	r1, [sp, #20]
 800772e:	4620      	mov	r0, r4
 8007730:	f002 fffa 	bl	800a728 <__pow5mult>
 8007734:	9005      	str	r0, [sp, #20]
 8007736:	2800      	cmp	r0, #0
 8007738:	f43f ae9a 	beq.w	8007470 <_strtod_l+0x488>
 800773c:	2f00      	cmp	r7, #0
 800773e:	dd08      	ble.n	8007752 <_strtod_l+0x76a>
 8007740:	9905      	ldr	r1, [sp, #20]
 8007742:	463a      	mov	r2, r7
 8007744:	4620      	mov	r0, r4
 8007746:	f003 f849 	bl	800a7dc <__lshift>
 800774a:	9005      	str	r0, [sp, #20]
 800774c:	2800      	cmp	r0, #0
 800774e:	f43f ae8f 	beq.w	8007470 <_strtod_l+0x488>
 8007752:	f1ba 0f00 	cmp.w	sl, #0
 8007756:	dd08      	ble.n	800776a <_strtod_l+0x782>
 8007758:	4659      	mov	r1, fp
 800775a:	4652      	mov	r2, sl
 800775c:	4620      	mov	r0, r4
 800775e:	f003 f83d 	bl	800a7dc <__lshift>
 8007762:	4683      	mov	fp, r0
 8007764:	2800      	cmp	r0, #0
 8007766:	f43f ae83 	beq.w	8007470 <_strtod_l+0x488>
 800776a:	9a05      	ldr	r2, [sp, #20]
 800776c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800776e:	4620      	mov	r0, r4
 8007770:	f003 f8bc 	bl	800a8ec <__mdiff>
 8007774:	4605      	mov	r5, r0
 8007776:	2800      	cmp	r0, #0
 8007778:	f43f ae7a 	beq.w	8007470 <_strtod_l+0x488>
 800777c:	68c3      	ldr	r3, [r0, #12]
 800777e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007780:	2300      	movs	r3, #0
 8007782:	60c3      	str	r3, [r0, #12]
 8007784:	4659      	mov	r1, fp
 8007786:	f003 f895 	bl	800a8b4 <__mcmp>
 800778a:	2800      	cmp	r0, #0
 800778c:	da60      	bge.n	8007850 <_strtod_l+0x868>
 800778e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007790:	ea53 0308 	orrs.w	r3, r3, r8
 8007794:	f040 8084 	bne.w	80078a0 <_strtod_l+0x8b8>
 8007798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800779c:	2b00      	cmp	r3, #0
 800779e:	d17f      	bne.n	80078a0 <_strtod_l+0x8b8>
 80077a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077a4:	0d1b      	lsrs	r3, r3, #20
 80077a6:	051b      	lsls	r3, r3, #20
 80077a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077ac:	d978      	bls.n	80078a0 <_strtod_l+0x8b8>
 80077ae:	696b      	ldr	r3, [r5, #20]
 80077b0:	b913      	cbnz	r3, 80077b8 <_strtod_l+0x7d0>
 80077b2:	692b      	ldr	r3, [r5, #16]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	dd73      	ble.n	80078a0 <_strtod_l+0x8b8>
 80077b8:	4629      	mov	r1, r5
 80077ba:	2201      	movs	r2, #1
 80077bc:	4620      	mov	r0, r4
 80077be:	f003 f80d 	bl	800a7dc <__lshift>
 80077c2:	4659      	mov	r1, fp
 80077c4:	4605      	mov	r5, r0
 80077c6:	f003 f875 	bl	800a8b4 <__mcmp>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	dd68      	ble.n	80078a0 <_strtod_l+0x8b8>
 80077ce:	9904      	ldr	r1, [sp, #16]
 80077d0:	4a54      	ldr	r2, [pc, #336]	; (8007924 <_strtod_l+0x93c>)
 80077d2:	464b      	mov	r3, r9
 80077d4:	2900      	cmp	r1, #0
 80077d6:	f000 8084 	beq.w	80078e2 <_strtod_l+0x8fa>
 80077da:	ea02 0109 	and.w	r1, r2, r9
 80077de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077e2:	dc7e      	bgt.n	80078e2 <_strtod_l+0x8fa>
 80077e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077e8:	f77f aeb3 	ble.w	8007552 <_strtod_l+0x56a>
 80077ec:	4b4e      	ldr	r3, [pc, #312]	; (8007928 <_strtod_l+0x940>)
 80077ee:	4640      	mov	r0, r8
 80077f0:	4649      	mov	r1, r9
 80077f2:	2200      	movs	r2, #0
 80077f4:	f7f8 ff08 	bl	8000608 <__aeabi_dmul>
 80077f8:	4b4a      	ldr	r3, [pc, #296]	; (8007924 <_strtod_l+0x93c>)
 80077fa:	400b      	ands	r3, r1
 80077fc:	4680      	mov	r8, r0
 80077fe:	4689      	mov	r9, r1
 8007800:	2b00      	cmp	r3, #0
 8007802:	f47f ae3f 	bne.w	8007484 <_strtod_l+0x49c>
 8007806:	2322      	movs	r3, #34	; 0x22
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	e63b      	b.n	8007484 <_strtod_l+0x49c>
 800780c:	f04f 32ff 	mov.w	r2, #4294967295
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	ea03 0808 	and.w	r8, r3, r8
 8007818:	e6e8      	b.n	80075ec <_strtod_l+0x604>
 800781a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800781e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007822:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007826:	36e2      	adds	r6, #226	; 0xe2
 8007828:	fa01 f306 	lsl.w	r3, r1, r6
 800782c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007830:	e748      	b.n	80076c4 <_strtod_l+0x6dc>
 8007832:	2100      	movs	r1, #0
 8007834:	2301      	movs	r3, #1
 8007836:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800783a:	e743      	b.n	80076c4 <_strtod_l+0x6dc>
 800783c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800783e:	4632      	mov	r2, r6
 8007840:	4620      	mov	r0, r4
 8007842:	f002 ffcb 	bl	800a7dc <__lshift>
 8007846:	9016      	str	r0, [sp, #88]	; 0x58
 8007848:	2800      	cmp	r0, #0
 800784a:	f47f af6b 	bne.w	8007724 <_strtod_l+0x73c>
 800784e:	e60f      	b.n	8007470 <_strtod_l+0x488>
 8007850:	46ca      	mov	sl, r9
 8007852:	d171      	bne.n	8007938 <_strtod_l+0x950>
 8007854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800785a:	b352      	cbz	r2, 80078b2 <_strtod_l+0x8ca>
 800785c:	4a33      	ldr	r2, [pc, #204]	; (800792c <_strtod_l+0x944>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d12a      	bne.n	80078b8 <_strtod_l+0x8d0>
 8007862:	9b04      	ldr	r3, [sp, #16]
 8007864:	4641      	mov	r1, r8
 8007866:	b1fb      	cbz	r3, 80078a8 <_strtod_l+0x8c0>
 8007868:	4b2e      	ldr	r3, [pc, #184]	; (8007924 <_strtod_l+0x93c>)
 800786a:	ea09 0303 	and.w	r3, r9, r3
 800786e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	d81a      	bhi.n	80078ae <_strtod_l+0x8c6>
 8007878:	0d1b      	lsrs	r3, r3, #20
 800787a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	4299      	cmp	r1, r3
 8007884:	d118      	bne.n	80078b8 <_strtod_l+0x8d0>
 8007886:	4b2a      	ldr	r3, [pc, #168]	; (8007930 <_strtod_l+0x948>)
 8007888:	459a      	cmp	sl, r3
 800788a:	d102      	bne.n	8007892 <_strtod_l+0x8aa>
 800788c:	3101      	adds	r1, #1
 800788e:	f43f adef 	beq.w	8007470 <_strtod_l+0x488>
 8007892:	4b24      	ldr	r3, [pc, #144]	; (8007924 <_strtod_l+0x93c>)
 8007894:	ea0a 0303 	and.w	r3, sl, r3
 8007898:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800789c:	f04f 0800 	mov.w	r8, #0
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1a2      	bne.n	80077ec <_strtod_l+0x804>
 80078a6:	e5ed      	b.n	8007484 <_strtod_l+0x49c>
 80078a8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ac:	e7e9      	b.n	8007882 <_strtod_l+0x89a>
 80078ae:	4613      	mov	r3, r2
 80078b0:	e7e7      	b.n	8007882 <_strtod_l+0x89a>
 80078b2:	ea53 0308 	orrs.w	r3, r3, r8
 80078b6:	d08a      	beq.n	80077ce <_strtod_l+0x7e6>
 80078b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ba:	b1e3      	cbz	r3, 80078f6 <_strtod_l+0x90e>
 80078bc:	ea13 0f0a 	tst.w	r3, sl
 80078c0:	d0ee      	beq.n	80078a0 <_strtod_l+0x8b8>
 80078c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c4:	9a04      	ldr	r2, [sp, #16]
 80078c6:	4640      	mov	r0, r8
 80078c8:	4649      	mov	r1, r9
 80078ca:	b1c3      	cbz	r3, 80078fe <_strtod_l+0x916>
 80078cc:	f7ff fb6e 	bl	8006fac <sulp>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	ec51 0b18 	vmov	r0, r1, d8
 80078d8:	f7f8 fce0 	bl	800029c <__adddf3>
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	e7de      	b.n	80078a0 <_strtod_l+0x8b8>
 80078e2:	4013      	ands	r3, r2
 80078e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80078ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80078f0:	f04f 38ff 	mov.w	r8, #4294967295
 80078f4:	e7d4      	b.n	80078a0 <_strtod_l+0x8b8>
 80078f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f8:	ea13 0f08 	tst.w	r3, r8
 80078fc:	e7e0      	b.n	80078c0 <_strtod_l+0x8d8>
 80078fe:	f7ff fb55 	bl	8006fac <sulp>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	ec51 0b18 	vmov	r0, r1, d8
 800790a:	f7f8 fcc5 	bl	8000298 <__aeabi_dsub>
 800790e:	2200      	movs	r2, #0
 8007910:	2300      	movs	r3, #0
 8007912:	4680      	mov	r8, r0
 8007914:	4689      	mov	r9, r1
 8007916:	f7f9 f8df 	bl	8000ad8 <__aeabi_dcmpeq>
 800791a:	2800      	cmp	r0, #0
 800791c:	d0c0      	beq.n	80078a0 <_strtod_l+0x8b8>
 800791e:	e618      	b.n	8007552 <_strtod_l+0x56a>
 8007920:	fffffc02 	.word	0xfffffc02
 8007924:	7ff00000 	.word	0x7ff00000
 8007928:	39500000 	.word	0x39500000
 800792c:	000fffff 	.word	0x000fffff
 8007930:	7fefffff 	.word	0x7fefffff
 8007934:	0800b988 	.word	0x0800b988
 8007938:	4659      	mov	r1, fp
 800793a:	4628      	mov	r0, r5
 800793c:	f003 f92a 	bl	800ab94 <__ratio>
 8007940:	ec57 6b10 	vmov	r6, r7, d0
 8007944:	ee10 0a10 	vmov	r0, s0
 8007948:	2200      	movs	r2, #0
 800794a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800794e:	4639      	mov	r1, r7
 8007950:	f7f9 f8d6 	bl	8000b00 <__aeabi_dcmple>
 8007954:	2800      	cmp	r0, #0
 8007956:	d071      	beq.n	8007a3c <_strtod_l+0xa54>
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d17c      	bne.n	8007a58 <_strtod_l+0xa70>
 800795e:	f1b8 0f00 	cmp.w	r8, #0
 8007962:	d15a      	bne.n	8007a1a <_strtod_l+0xa32>
 8007964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007968:	2b00      	cmp	r3, #0
 800796a:	d15d      	bne.n	8007a28 <_strtod_l+0xa40>
 800796c:	4b90      	ldr	r3, [pc, #576]	; (8007bb0 <_strtod_l+0xbc8>)
 800796e:	2200      	movs	r2, #0
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f9 f8ba 	bl	8000aec <__aeabi_dcmplt>
 8007978:	2800      	cmp	r0, #0
 800797a:	d15c      	bne.n	8007a36 <_strtod_l+0xa4e>
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	4b8c      	ldr	r3, [pc, #560]	; (8007bb4 <_strtod_l+0xbcc>)
 8007982:	2200      	movs	r2, #0
 8007984:	f7f8 fe40 	bl	8000608 <__aeabi_dmul>
 8007988:	4606      	mov	r6, r0
 800798a:	460f      	mov	r7, r1
 800798c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007990:	9606      	str	r6, [sp, #24]
 8007992:	9307      	str	r3, [sp, #28]
 8007994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007998:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800799c:	4b86      	ldr	r3, [pc, #536]	; (8007bb8 <_strtod_l+0xbd0>)
 800799e:	ea0a 0303 	and.w	r3, sl, r3
 80079a2:	930d      	str	r3, [sp, #52]	; 0x34
 80079a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079a6:	4b85      	ldr	r3, [pc, #532]	; (8007bbc <_strtod_l+0xbd4>)
 80079a8:	429a      	cmp	r2, r3
 80079aa:	f040 8090 	bne.w	8007ace <_strtod_l+0xae6>
 80079ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80079b2:	ec49 8b10 	vmov	d0, r8, r9
 80079b6:	f003 f823 	bl	800aa00 <__ulp>
 80079ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079be:	ec51 0b10 	vmov	r0, r1, d0
 80079c2:	f7f8 fe21 	bl	8000608 <__aeabi_dmul>
 80079c6:	4642      	mov	r2, r8
 80079c8:	464b      	mov	r3, r9
 80079ca:	f7f8 fc67 	bl	800029c <__adddf3>
 80079ce:	460b      	mov	r3, r1
 80079d0:	4979      	ldr	r1, [pc, #484]	; (8007bb8 <_strtod_l+0xbd0>)
 80079d2:	4a7b      	ldr	r2, [pc, #492]	; (8007bc0 <_strtod_l+0xbd8>)
 80079d4:	4019      	ands	r1, r3
 80079d6:	4291      	cmp	r1, r2
 80079d8:	4680      	mov	r8, r0
 80079da:	d944      	bls.n	8007a66 <_strtod_l+0xa7e>
 80079dc:	ee18 2a90 	vmov	r2, s17
 80079e0:	4b78      	ldr	r3, [pc, #480]	; (8007bc4 <_strtod_l+0xbdc>)
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d104      	bne.n	80079f0 <_strtod_l+0xa08>
 80079e6:	ee18 3a10 	vmov	r3, s16
 80079ea:	3301      	adds	r3, #1
 80079ec:	f43f ad40 	beq.w	8007470 <_strtod_l+0x488>
 80079f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007bc4 <_strtod_l+0xbdc>
 80079f4:	f04f 38ff 	mov.w	r8, #4294967295
 80079f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079fa:	4620      	mov	r0, r4
 80079fc:	f002 fcd4 	bl	800a3a8 <_Bfree>
 8007a00:	9905      	ldr	r1, [sp, #20]
 8007a02:	4620      	mov	r0, r4
 8007a04:	f002 fcd0 	bl	800a3a8 <_Bfree>
 8007a08:	4659      	mov	r1, fp
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f002 fccc 	bl	800a3a8 <_Bfree>
 8007a10:	4629      	mov	r1, r5
 8007a12:	4620      	mov	r0, r4
 8007a14:	f002 fcc8 	bl	800a3a8 <_Bfree>
 8007a18:	e609      	b.n	800762e <_strtod_l+0x646>
 8007a1a:	f1b8 0f01 	cmp.w	r8, #1
 8007a1e:	d103      	bne.n	8007a28 <_strtod_l+0xa40>
 8007a20:	f1b9 0f00 	cmp.w	r9, #0
 8007a24:	f43f ad95 	beq.w	8007552 <_strtod_l+0x56a>
 8007a28:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007b80 <_strtod_l+0xb98>
 8007a2c:	4f60      	ldr	r7, [pc, #384]	; (8007bb0 <_strtod_l+0xbc8>)
 8007a2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a32:	2600      	movs	r6, #0
 8007a34:	e7ae      	b.n	8007994 <_strtod_l+0x9ac>
 8007a36:	4f5f      	ldr	r7, [pc, #380]	; (8007bb4 <_strtod_l+0xbcc>)
 8007a38:	2600      	movs	r6, #0
 8007a3a:	e7a7      	b.n	800798c <_strtod_l+0x9a4>
 8007a3c:	4b5d      	ldr	r3, [pc, #372]	; (8007bb4 <_strtod_l+0xbcc>)
 8007a3e:	4630      	mov	r0, r6
 8007a40:	4639      	mov	r1, r7
 8007a42:	2200      	movs	r2, #0
 8007a44:	f7f8 fde0 	bl	8000608 <__aeabi_dmul>
 8007a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d09c      	beq.n	800798c <_strtod_l+0x9a4>
 8007a52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a56:	e79d      	b.n	8007994 <_strtod_l+0x9ac>
 8007a58:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007b88 <_strtod_l+0xba0>
 8007a5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a60:	ec57 6b17 	vmov	r6, r7, d7
 8007a64:	e796      	b.n	8007994 <_strtod_l+0x9ac>
 8007a66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	46ca      	mov	sl, r9
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1c2      	bne.n	80079f8 <_strtod_l+0xa10>
 8007a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a78:	0d1b      	lsrs	r3, r3, #20
 8007a7a:	051b      	lsls	r3, r3, #20
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d1bb      	bne.n	80079f8 <_strtod_l+0xa10>
 8007a80:	4630      	mov	r0, r6
 8007a82:	4639      	mov	r1, r7
 8007a84:	f7f9 f920 	bl	8000cc8 <__aeabi_d2lz>
 8007a88:	f7f8 fd90 	bl	80005ac <__aeabi_l2d>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f8 fc00 	bl	8000298 <__aeabi_dsub>
 8007a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a9e:	ea43 0308 	orr.w	r3, r3, r8
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	d054      	beq.n	8007b54 <_strtod_l+0xb6c>
 8007aaa:	a339      	add	r3, pc, #228	; (adr r3, 8007b90 <_strtod_l+0xba8>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f7f9 f81c 	bl	8000aec <__aeabi_dcmplt>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f47f ace5 	bne.w	8007484 <_strtod_l+0x49c>
 8007aba:	a337      	add	r3, pc, #220	; (adr r3, 8007b98 <_strtod_l+0xbb0>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f9 f830 	bl	8000b28 <__aeabi_dcmpgt>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d095      	beq.n	80079f8 <_strtod_l+0xa10>
 8007acc:	e4da      	b.n	8007484 <_strtod_l+0x49c>
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	b333      	cbz	r3, 8007b20 <_strtod_l+0xb38>
 8007ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ad8:	d822      	bhi.n	8007b20 <_strtod_l+0xb38>
 8007ada:	a331      	add	r3, pc, #196	; (adr r3, 8007ba0 <_strtod_l+0xbb8>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f9 f80c 	bl	8000b00 <__aeabi_dcmple>
 8007ae8:	b1a0      	cbz	r0, 8007b14 <_strtod_l+0xb2c>
 8007aea:	4639      	mov	r1, r7
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7f9 f863 	bl	8000bb8 <__aeabi_d2uiz>
 8007af2:	2801      	cmp	r0, #1
 8007af4:	bf38      	it	cc
 8007af6:	2001      	movcc	r0, #1
 8007af8:	f7f8 fd0c 	bl	8000514 <__aeabi_ui2d>
 8007afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afe:	4606      	mov	r6, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	bb23      	cbnz	r3, 8007b4e <_strtod_l+0xb66>
 8007b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b08:	9010      	str	r0, [sp, #64]	; 0x40
 8007b0a:	9311      	str	r3, [sp, #68]	; 0x44
 8007b0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b24:	eeb0 0a48 	vmov.f32	s0, s16
 8007b28:	eef0 0a68 	vmov.f32	s1, s17
 8007b2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007b30:	f002 ff66 	bl	800aa00 <__ulp>
 8007b34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b38:	ec53 2b10 	vmov	r2, r3, d0
 8007b3c:	f7f8 fd64 	bl	8000608 <__aeabi_dmul>
 8007b40:	ec53 2b18 	vmov	r2, r3, d8
 8007b44:	f7f8 fbaa 	bl	800029c <__adddf3>
 8007b48:	4680      	mov	r8, r0
 8007b4a:	4689      	mov	r9, r1
 8007b4c:	e78d      	b.n	8007a6a <_strtod_l+0xa82>
 8007b4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007b52:	e7db      	b.n	8007b0c <_strtod_l+0xb24>
 8007b54:	a314      	add	r3, pc, #80	; (adr r3, 8007ba8 <_strtod_l+0xbc0>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 ffc7 	bl	8000aec <__aeabi_dcmplt>
 8007b5e:	e7b3      	b.n	8007ac8 <_strtod_l+0xae0>
 8007b60:	2300      	movs	r3, #0
 8007b62:	930a      	str	r3, [sp, #40]	; 0x28
 8007b64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	f7ff ba7c 	b.w	8007066 <_strtod_l+0x7e>
 8007b6e:	2a65      	cmp	r2, #101	; 0x65
 8007b70:	f43f ab75 	beq.w	800725e <_strtod_l+0x276>
 8007b74:	2a45      	cmp	r2, #69	; 0x45
 8007b76:	f43f ab72 	beq.w	800725e <_strtod_l+0x276>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f7ff bbaa 	b.w	80072d4 <_strtod_l+0x2ec>
 8007b80:	00000000 	.word	0x00000000
 8007b84:	bff00000 	.word	0xbff00000
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	3ff00000 	.word	0x3ff00000
 8007b90:	94a03595 	.word	0x94a03595
 8007b94:	3fdfffff 	.word	0x3fdfffff
 8007b98:	35afe535 	.word	0x35afe535
 8007b9c:	3fe00000 	.word	0x3fe00000
 8007ba0:	ffc00000 	.word	0xffc00000
 8007ba4:	41dfffff 	.word	0x41dfffff
 8007ba8:	94a03595 	.word	0x94a03595
 8007bac:	3fcfffff 	.word	0x3fcfffff
 8007bb0:	3ff00000 	.word	0x3ff00000
 8007bb4:	3fe00000 	.word	0x3fe00000
 8007bb8:	7ff00000 	.word	0x7ff00000
 8007bbc:	7fe00000 	.word	0x7fe00000
 8007bc0:	7c9fffff 	.word	0x7c9fffff
 8007bc4:	7fefffff 	.word	0x7fefffff

08007bc8 <_strtod_r>:
 8007bc8:	4b01      	ldr	r3, [pc, #4]	; (8007bd0 <_strtod_r+0x8>)
 8007bca:	f7ff ba0d 	b.w	8006fe8 <_strtod_l>
 8007bce:	bf00      	nop
 8007bd0:	20000028 	.word	0x20000028

08007bd4 <__cvt>:
 8007bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd8:	ec55 4b10 	vmov	r4, r5, d0
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	460e      	mov	r6, r1
 8007be0:	4619      	mov	r1, r3
 8007be2:	462b      	mov	r3, r5
 8007be4:	bfbb      	ittet	lt
 8007be6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bea:	461d      	movlt	r5, r3
 8007bec:	2300      	movge	r3, #0
 8007bee:	232d      	movlt	r3, #45	; 0x2d
 8007bf0:	700b      	strb	r3, [r1, #0]
 8007bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bf8:	4691      	mov	r9, r2
 8007bfa:	f023 0820 	bic.w	r8, r3, #32
 8007bfe:	bfbc      	itt	lt
 8007c00:	4622      	movlt	r2, r4
 8007c02:	4614      	movlt	r4, r2
 8007c04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c08:	d005      	beq.n	8007c16 <__cvt+0x42>
 8007c0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c0e:	d100      	bne.n	8007c12 <__cvt+0x3e>
 8007c10:	3601      	adds	r6, #1
 8007c12:	2102      	movs	r1, #2
 8007c14:	e000      	b.n	8007c18 <__cvt+0x44>
 8007c16:	2103      	movs	r1, #3
 8007c18:	ab03      	add	r3, sp, #12
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	ab02      	add	r3, sp, #8
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	ec45 4b10 	vmov	d0, r4, r5
 8007c24:	4653      	mov	r3, sl
 8007c26:	4632      	mov	r2, r6
 8007c28:	f001 f9d6 	bl	8008fd8 <_dtoa_r>
 8007c2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c30:	4607      	mov	r7, r0
 8007c32:	d102      	bne.n	8007c3a <__cvt+0x66>
 8007c34:	f019 0f01 	tst.w	r9, #1
 8007c38:	d022      	beq.n	8007c80 <__cvt+0xac>
 8007c3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c3e:	eb07 0906 	add.w	r9, r7, r6
 8007c42:	d110      	bne.n	8007c66 <__cvt+0x92>
 8007c44:	783b      	ldrb	r3, [r7, #0]
 8007c46:	2b30      	cmp	r3, #48	; 0x30
 8007c48:	d10a      	bne.n	8007c60 <__cvt+0x8c>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4620      	mov	r0, r4
 8007c50:	4629      	mov	r1, r5
 8007c52:	f7f8 ff41 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c56:	b918      	cbnz	r0, 8007c60 <__cvt+0x8c>
 8007c58:	f1c6 0601 	rsb	r6, r6, #1
 8007c5c:	f8ca 6000 	str.w	r6, [sl]
 8007c60:	f8da 3000 	ldr.w	r3, [sl]
 8007c64:	4499      	add	r9, r3
 8007c66:	2200      	movs	r2, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	f7f8 ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c72:	b108      	cbz	r0, 8007c78 <__cvt+0xa4>
 8007c74:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c78:	2230      	movs	r2, #48	; 0x30
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	454b      	cmp	r3, r9
 8007c7e:	d307      	bcc.n	8007c90 <__cvt+0xbc>
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c84:	1bdb      	subs	r3, r3, r7
 8007c86:	4638      	mov	r0, r7
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	b004      	add	sp, #16
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c90:	1c59      	adds	r1, r3, #1
 8007c92:	9103      	str	r1, [sp, #12]
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	e7f0      	b.n	8007c7a <__cvt+0xa6>

08007c98 <__exponent>:
 8007c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2900      	cmp	r1, #0
 8007c9e:	bfb8      	it	lt
 8007ca0:	4249      	neglt	r1, r1
 8007ca2:	f803 2b02 	strb.w	r2, [r3], #2
 8007ca6:	bfb4      	ite	lt
 8007ca8:	222d      	movlt	r2, #45	; 0x2d
 8007caa:	222b      	movge	r2, #43	; 0x2b
 8007cac:	2909      	cmp	r1, #9
 8007cae:	7042      	strb	r2, [r0, #1]
 8007cb0:	dd2a      	ble.n	8007d08 <__exponent+0x70>
 8007cb2:	f10d 0207 	add.w	r2, sp, #7
 8007cb6:	4617      	mov	r7, r2
 8007cb8:	260a      	movs	r6, #10
 8007cba:	4694      	mov	ip, r2
 8007cbc:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cc0:	fb06 1415 	mls	r4, r6, r5, r1
 8007cc4:	3430      	adds	r4, #48	; 0x30
 8007cc6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cca:	460c      	mov	r4, r1
 8007ccc:	2c63      	cmp	r4, #99	; 0x63
 8007cce:	f102 32ff 	add.w	r2, r2, #4294967295
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	dcf1      	bgt.n	8007cba <__exponent+0x22>
 8007cd6:	3130      	adds	r1, #48	; 0x30
 8007cd8:	f1ac 0402 	sub.w	r4, ip, #2
 8007cdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ce0:	1c41      	adds	r1, r0, #1
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	42ba      	cmp	r2, r7
 8007ce6:	d30a      	bcc.n	8007cfe <__exponent+0x66>
 8007ce8:	f10d 0209 	add.w	r2, sp, #9
 8007cec:	eba2 020c 	sub.w	r2, r2, ip
 8007cf0:	42bc      	cmp	r4, r7
 8007cf2:	bf88      	it	hi
 8007cf4:	2200      	movhi	r2, #0
 8007cf6:	4413      	add	r3, r2
 8007cf8:	1a18      	subs	r0, r3, r0
 8007cfa:	b003      	add	sp, #12
 8007cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d02:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d06:	e7ed      	b.n	8007ce4 <__exponent+0x4c>
 8007d08:	2330      	movs	r3, #48	; 0x30
 8007d0a:	3130      	adds	r1, #48	; 0x30
 8007d0c:	7083      	strb	r3, [r0, #2]
 8007d0e:	70c1      	strb	r1, [r0, #3]
 8007d10:	1d03      	adds	r3, r0, #4
 8007d12:	e7f1      	b.n	8007cf8 <__exponent+0x60>

08007d14 <_printf_float>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	ed2d 8b02 	vpush	{d8}
 8007d1c:	b08d      	sub	sp, #52	; 0x34
 8007d1e:	460c      	mov	r4, r1
 8007d20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d24:	4616      	mov	r6, r2
 8007d26:	461f      	mov	r7, r3
 8007d28:	4605      	mov	r5, r0
 8007d2a:	f001 f80b 	bl	8008d44 <_localeconv_r>
 8007d2e:	f8d0 a000 	ldr.w	sl, [r0]
 8007d32:	4650      	mov	r0, sl
 8007d34:	f7f8 faa4 	bl	8000280 <strlen>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	9305      	str	r3, [sp, #20]
 8007d40:	f8d8 3000 	ldr.w	r3, [r8]
 8007d44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d48:	3307      	adds	r3, #7
 8007d4a:	f023 0307 	bic.w	r3, r3, #7
 8007d4e:	f103 0208 	add.w	r2, r3, #8
 8007d52:	f8c8 2000 	str.w	r2, [r8]
 8007d56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d64:	ee08 0a10 	vmov	s16, r0
 8007d68:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d70:	4b9e      	ldr	r3, [pc, #632]	; (8007fec <_printf_float+0x2d8>)
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	f7f8 fee1 	bl	8000b3c <__aeabi_dcmpun>
 8007d7a:	bb88      	cbnz	r0, 8007de0 <_printf_float+0xcc>
 8007d7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d80:	4b9a      	ldr	r3, [pc, #616]	; (8007fec <_printf_float+0x2d8>)
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	f7f8 febb 	bl	8000b00 <__aeabi_dcmple>
 8007d8a:	bb48      	cbnz	r0, 8007de0 <_printf_float+0xcc>
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4640      	mov	r0, r8
 8007d92:	4649      	mov	r1, r9
 8007d94:	f7f8 feaa 	bl	8000aec <__aeabi_dcmplt>
 8007d98:	b110      	cbz	r0, 8007da0 <_printf_float+0x8c>
 8007d9a:	232d      	movs	r3, #45	; 0x2d
 8007d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da0:	4a93      	ldr	r2, [pc, #588]	; (8007ff0 <_printf_float+0x2dc>)
 8007da2:	4b94      	ldr	r3, [pc, #592]	; (8007ff4 <_printf_float+0x2e0>)
 8007da4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007da8:	bf94      	ite	ls
 8007daa:	4690      	movls	r8, r2
 8007dac:	4698      	movhi	r8, r3
 8007dae:	2303      	movs	r3, #3
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	9b05      	ldr	r3, [sp, #20]
 8007db4:	f023 0304 	bic.w	r3, r3, #4
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	f04f 0900 	mov.w	r9, #0
 8007dbe:	9700      	str	r7, [sp, #0]
 8007dc0:	4633      	mov	r3, r6
 8007dc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f9da 	bl	8008180 <_printf_common>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	f040 8090 	bne.w	8007ef2 <_printf_float+0x1de>
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd6:	b00d      	add	sp, #52	; 0x34
 8007dd8:	ecbd 8b02 	vpop	{d8}
 8007ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de0:	4642      	mov	r2, r8
 8007de2:	464b      	mov	r3, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	4649      	mov	r1, r9
 8007de8:	f7f8 fea8 	bl	8000b3c <__aeabi_dcmpun>
 8007dec:	b140      	cbz	r0, 8007e00 <_printf_float+0xec>
 8007dee:	464b      	mov	r3, r9
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bfbc      	itt	lt
 8007df4:	232d      	movlt	r3, #45	; 0x2d
 8007df6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dfa:	4a7f      	ldr	r2, [pc, #508]	; (8007ff8 <_printf_float+0x2e4>)
 8007dfc:	4b7f      	ldr	r3, [pc, #508]	; (8007ffc <_printf_float+0x2e8>)
 8007dfe:	e7d1      	b.n	8007da4 <_printf_float+0x90>
 8007e00:	6863      	ldr	r3, [r4, #4]
 8007e02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e06:	9206      	str	r2, [sp, #24]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	d13f      	bne.n	8007e8c <_printf_float+0x178>
 8007e0c:	2306      	movs	r3, #6
 8007e0e:	6063      	str	r3, [r4, #4]
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	6861      	ldr	r1, [r4, #4]
 8007e14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e18:	2300      	movs	r3, #0
 8007e1a:	9303      	str	r3, [sp, #12]
 8007e1c:	ab0a      	add	r3, sp, #40	; 0x28
 8007e1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e22:	ab09      	add	r3, sp, #36	; 0x24
 8007e24:	ec49 8b10 	vmov	d0, r8, r9
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	6022      	str	r2, [r4, #0]
 8007e2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e30:	4628      	mov	r0, r5
 8007e32:	f7ff fecf 	bl	8007bd4 <__cvt>
 8007e36:	9b06      	ldr	r3, [sp, #24]
 8007e38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e3a:	2b47      	cmp	r3, #71	; 0x47
 8007e3c:	4680      	mov	r8, r0
 8007e3e:	d108      	bne.n	8007e52 <_printf_float+0x13e>
 8007e40:	1cc8      	adds	r0, r1, #3
 8007e42:	db02      	blt.n	8007e4a <_printf_float+0x136>
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	4299      	cmp	r1, r3
 8007e48:	dd41      	ble.n	8007ece <_printf_float+0x1ba>
 8007e4a:	f1ab 0302 	sub.w	r3, fp, #2
 8007e4e:	fa5f fb83 	uxtb.w	fp, r3
 8007e52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e56:	d820      	bhi.n	8007e9a <_printf_float+0x186>
 8007e58:	3901      	subs	r1, #1
 8007e5a:	465a      	mov	r2, fp
 8007e5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e60:	9109      	str	r1, [sp, #36]	; 0x24
 8007e62:	f7ff ff19 	bl	8007c98 <__exponent>
 8007e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e68:	1813      	adds	r3, r2, r0
 8007e6a:	2a01      	cmp	r2, #1
 8007e6c:	4681      	mov	r9, r0
 8007e6e:	6123      	str	r3, [r4, #16]
 8007e70:	dc02      	bgt.n	8007e78 <_printf_float+0x164>
 8007e72:	6822      	ldr	r2, [r4, #0]
 8007e74:	07d2      	lsls	r2, r2, #31
 8007e76:	d501      	bpl.n	8007e7c <_printf_float+0x168>
 8007e78:	3301      	adds	r3, #1
 8007e7a:	6123      	str	r3, [r4, #16]
 8007e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d09c      	beq.n	8007dbe <_printf_float+0xaa>
 8007e84:	232d      	movs	r3, #45	; 0x2d
 8007e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8a:	e798      	b.n	8007dbe <_printf_float+0xaa>
 8007e8c:	9a06      	ldr	r2, [sp, #24]
 8007e8e:	2a47      	cmp	r2, #71	; 0x47
 8007e90:	d1be      	bne.n	8007e10 <_printf_float+0xfc>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1bc      	bne.n	8007e10 <_printf_float+0xfc>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e7b9      	b.n	8007e0e <_printf_float+0xfa>
 8007e9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e9e:	d118      	bne.n	8007ed2 <_printf_float+0x1be>
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	6863      	ldr	r3, [r4, #4]
 8007ea4:	dd0b      	ble.n	8007ebe <_printf_float+0x1aa>
 8007ea6:	6121      	str	r1, [r4, #16]
 8007ea8:	b913      	cbnz	r3, 8007eb0 <_printf_float+0x19c>
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	07d0      	lsls	r0, r2, #31
 8007eae:	d502      	bpl.n	8007eb6 <_printf_float+0x1a2>
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	440b      	add	r3, r1
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007eb8:	f04f 0900 	mov.w	r9, #0
 8007ebc:	e7de      	b.n	8007e7c <_printf_float+0x168>
 8007ebe:	b913      	cbnz	r3, 8007ec6 <_printf_float+0x1b2>
 8007ec0:	6822      	ldr	r2, [r4, #0]
 8007ec2:	07d2      	lsls	r2, r2, #31
 8007ec4:	d501      	bpl.n	8007eca <_printf_float+0x1b6>
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	e7f4      	b.n	8007eb4 <_printf_float+0x1a0>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e7f2      	b.n	8007eb4 <_printf_float+0x1a0>
 8007ece:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed4:	4299      	cmp	r1, r3
 8007ed6:	db05      	blt.n	8007ee4 <_printf_float+0x1d0>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	6121      	str	r1, [r4, #16]
 8007edc:	07d8      	lsls	r0, r3, #31
 8007ede:	d5ea      	bpl.n	8007eb6 <_printf_float+0x1a2>
 8007ee0:	1c4b      	adds	r3, r1, #1
 8007ee2:	e7e7      	b.n	8007eb4 <_printf_float+0x1a0>
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	bfd4      	ite	le
 8007ee8:	f1c1 0202 	rsble	r2, r1, #2
 8007eec:	2201      	movgt	r2, #1
 8007eee:	4413      	add	r3, r2
 8007ef0:	e7e0      	b.n	8007eb4 <_printf_float+0x1a0>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	055a      	lsls	r2, r3, #21
 8007ef6:	d407      	bmi.n	8007f08 <_printf_float+0x1f4>
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	4642      	mov	r2, r8
 8007efc:	4631      	mov	r1, r6
 8007efe:	4628      	mov	r0, r5
 8007f00:	47b8      	blx	r7
 8007f02:	3001      	adds	r0, #1
 8007f04:	d12c      	bne.n	8007f60 <_printf_float+0x24c>
 8007f06:	e764      	b.n	8007dd2 <_printf_float+0xbe>
 8007f08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f0c:	f240 80e0 	bls.w	80080d0 <_printf_float+0x3bc>
 8007f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f14:	2200      	movs	r2, #0
 8007f16:	2300      	movs	r3, #0
 8007f18:	f7f8 fdde 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d034      	beq.n	8007f8a <_printf_float+0x276>
 8007f20:	4a37      	ldr	r2, [pc, #220]	; (8008000 <_printf_float+0x2ec>)
 8007f22:	2301      	movs	r3, #1
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f af51 	beq.w	8007dd2 <_printf_float+0xbe>
 8007f30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f34:	429a      	cmp	r2, r3
 8007f36:	db02      	blt.n	8007f3e <_printf_float+0x22a>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	07d8      	lsls	r0, r3, #31
 8007f3c:	d510      	bpl.n	8007f60 <_printf_float+0x24c>
 8007f3e:	ee18 3a10 	vmov	r3, s16
 8007f42:	4652      	mov	r2, sl
 8007f44:	4631      	mov	r1, r6
 8007f46:	4628      	mov	r0, r5
 8007f48:	47b8      	blx	r7
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	f43f af41 	beq.w	8007dd2 <_printf_float+0xbe>
 8007f50:	f04f 0800 	mov.w	r8, #0
 8007f54:	f104 091a 	add.w	r9, r4, #26
 8007f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	4543      	cmp	r3, r8
 8007f5e:	dc09      	bgt.n	8007f74 <_printf_float+0x260>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	079b      	lsls	r3, r3, #30
 8007f64:	f100 8107 	bmi.w	8008176 <_printf_float+0x462>
 8007f68:	68e0      	ldr	r0, [r4, #12]
 8007f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6c:	4298      	cmp	r0, r3
 8007f6e:	bfb8      	it	lt
 8007f70:	4618      	movlt	r0, r3
 8007f72:	e730      	b.n	8007dd6 <_printf_float+0xc2>
 8007f74:	2301      	movs	r3, #1
 8007f76:	464a      	mov	r2, r9
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f af27 	beq.w	8007dd2 <_printf_float+0xbe>
 8007f84:	f108 0801 	add.w	r8, r8, #1
 8007f88:	e7e6      	b.n	8007f58 <_printf_float+0x244>
 8007f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dc39      	bgt.n	8008004 <_printf_float+0x2f0>
 8007f90:	4a1b      	ldr	r2, [pc, #108]	; (8008000 <_printf_float+0x2ec>)
 8007f92:	2301      	movs	r3, #1
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f43f af19 	beq.w	8007dd2 <_printf_float+0xbe>
 8007fa0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	d102      	bne.n	8007fae <_printf_float+0x29a>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	07d9      	lsls	r1, r3, #31
 8007fac:	d5d8      	bpl.n	8007f60 <_printf_float+0x24c>
 8007fae:	ee18 3a10 	vmov	r3, s16
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	47b8      	blx	r7
 8007fba:	3001      	adds	r0, #1
 8007fbc:	f43f af09 	beq.w	8007dd2 <_printf_float+0xbe>
 8007fc0:	f04f 0900 	mov.w	r9, #0
 8007fc4:	f104 0a1a 	add.w	sl, r4, #26
 8007fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fca:	425b      	negs	r3, r3
 8007fcc:	454b      	cmp	r3, r9
 8007fce:	dc01      	bgt.n	8007fd4 <_printf_float+0x2c0>
 8007fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd2:	e792      	b.n	8007efa <_printf_float+0x1e6>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f aef7 	beq.w	8007dd2 <_printf_float+0xbe>
 8007fe4:	f109 0901 	add.w	r9, r9, #1
 8007fe8:	e7ee      	b.n	8007fc8 <_printf_float+0x2b4>
 8007fea:	bf00      	nop
 8007fec:	7fefffff 	.word	0x7fefffff
 8007ff0:	0800b9b0 	.word	0x0800b9b0
 8007ff4:	0800b9b4 	.word	0x0800b9b4
 8007ff8:	0800b9b8 	.word	0x0800b9b8
 8007ffc:	0800b9bc 	.word	0x0800b9bc
 8008000:	0800b9c0 	.word	0x0800b9c0
 8008004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008008:	429a      	cmp	r2, r3
 800800a:	bfa8      	it	ge
 800800c:	461a      	movge	r2, r3
 800800e:	2a00      	cmp	r2, #0
 8008010:	4691      	mov	r9, r2
 8008012:	dc37      	bgt.n	8008084 <_printf_float+0x370>
 8008014:	f04f 0b00 	mov.w	fp, #0
 8008018:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800801c:	f104 021a 	add.w	r2, r4, #26
 8008020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008022:	9305      	str	r3, [sp, #20]
 8008024:	eba3 0309 	sub.w	r3, r3, r9
 8008028:	455b      	cmp	r3, fp
 800802a:	dc33      	bgt.n	8008094 <_printf_float+0x380>
 800802c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008030:	429a      	cmp	r2, r3
 8008032:	db3b      	blt.n	80080ac <_printf_float+0x398>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	07da      	lsls	r2, r3, #31
 8008038:	d438      	bmi.n	80080ac <_printf_float+0x398>
 800803a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800803e:	eba2 0903 	sub.w	r9, r2, r3
 8008042:	9b05      	ldr	r3, [sp, #20]
 8008044:	1ad2      	subs	r2, r2, r3
 8008046:	4591      	cmp	r9, r2
 8008048:	bfa8      	it	ge
 800804a:	4691      	movge	r9, r2
 800804c:	f1b9 0f00 	cmp.w	r9, #0
 8008050:	dc35      	bgt.n	80080be <_printf_float+0x3aa>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800805a:	f104 0a1a 	add.w	sl, r4, #26
 800805e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008062:	1a9b      	subs	r3, r3, r2
 8008064:	eba3 0309 	sub.w	r3, r3, r9
 8008068:	4543      	cmp	r3, r8
 800806a:	f77f af79 	ble.w	8007f60 <_printf_float+0x24c>
 800806e:	2301      	movs	r3, #1
 8008070:	4652      	mov	r2, sl
 8008072:	4631      	mov	r1, r6
 8008074:	4628      	mov	r0, r5
 8008076:	47b8      	blx	r7
 8008078:	3001      	adds	r0, #1
 800807a:	f43f aeaa 	beq.w	8007dd2 <_printf_float+0xbe>
 800807e:	f108 0801 	add.w	r8, r8, #1
 8008082:	e7ec      	b.n	800805e <_printf_float+0x34a>
 8008084:	4613      	mov	r3, r2
 8008086:	4631      	mov	r1, r6
 8008088:	4642      	mov	r2, r8
 800808a:	4628      	mov	r0, r5
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	d1c0      	bne.n	8008014 <_printf_float+0x300>
 8008092:	e69e      	b.n	8007dd2 <_printf_float+0xbe>
 8008094:	2301      	movs	r3, #1
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	9205      	str	r2, [sp, #20]
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	f43f ae97 	beq.w	8007dd2 <_printf_float+0xbe>
 80080a4:	9a05      	ldr	r2, [sp, #20]
 80080a6:	f10b 0b01 	add.w	fp, fp, #1
 80080aa:	e7b9      	b.n	8008020 <_printf_float+0x30c>
 80080ac:	ee18 3a10 	vmov	r3, s16
 80080b0:	4652      	mov	r2, sl
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	d1be      	bne.n	800803a <_printf_float+0x326>
 80080bc:	e689      	b.n	8007dd2 <_printf_float+0xbe>
 80080be:	9a05      	ldr	r2, [sp, #20]
 80080c0:	464b      	mov	r3, r9
 80080c2:	4442      	add	r2, r8
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	d1c1      	bne.n	8008052 <_printf_float+0x33e>
 80080ce:	e680      	b.n	8007dd2 <_printf_float+0xbe>
 80080d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080d2:	2a01      	cmp	r2, #1
 80080d4:	dc01      	bgt.n	80080da <_printf_float+0x3c6>
 80080d6:	07db      	lsls	r3, r3, #31
 80080d8:	d53a      	bpl.n	8008150 <_printf_float+0x43c>
 80080da:	2301      	movs	r3, #1
 80080dc:	4642      	mov	r2, r8
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	f43f ae74 	beq.w	8007dd2 <_printf_float+0xbe>
 80080ea:	ee18 3a10 	vmov	r3, s16
 80080ee:	4652      	mov	r2, sl
 80080f0:	4631      	mov	r1, r6
 80080f2:	4628      	mov	r0, r5
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	f43f ae6b 	beq.w	8007dd2 <_printf_float+0xbe>
 80080fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008100:	2200      	movs	r2, #0
 8008102:	2300      	movs	r3, #0
 8008104:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008108:	f7f8 fce6 	bl	8000ad8 <__aeabi_dcmpeq>
 800810c:	b9d8      	cbnz	r0, 8008146 <_printf_float+0x432>
 800810e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008112:	f108 0201 	add.w	r2, r8, #1
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	d10e      	bne.n	800813e <_printf_float+0x42a>
 8008120:	e657      	b.n	8007dd2 <_printf_float+0xbe>
 8008122:	2301      	movs	r3, #1
 8008124:	4652      	mov	r2, sl
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	f43f ae50 	beq.w	8007dd2 <_printf_float+0xbe>
 8008132:	f108 0801 	add.w	r8, r8, #1
 8008136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008138:	3b01      	subs	r3, #1
 800813a:	4543      	cmp	r3, r8
 800813c:	dcf1      	bgt.n	8008122 <_printf_float+0x40e>
 800813e:	464b      	mov	r3, r9
 8008140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008144:	e6da      	b.n	8007efc <_printf_float+0x1e8>
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	f104 0a1a 	add.w	sl, r4, #26
 800814e:	e7f2      	b.n	8008136 <_printf_float+0x422>
 8008150:	2301      	movs	r3, #1
 8008152:	4642      	mov	r2, r8
 8008154:	e7df      	b.n	8008116 <_printf_float+0x402>
 8008156:	2301      	movs	r3, #1
 8008158:	464a      	mov	r2, r9
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	f43f ae36 	beq.w	8007dd2 <_printf_float+0xbe>
 8008166:	f108 0801 	add.w	r8, r8, #1
 800816a:	68e3      	ldr	r3, [r4, #12]
 800816c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800816e:	1a5b      	subs	r3, r3, r1
 8008170:	4543      	cmp	r3, r8
 8008172:	dcf0      	bgt.n	8008156 <_printf_float+0x442>
 8008174:	e6f8      	b.n	8007f68 <_printf_float+0x254>
 8008176:	f04f 0800 	mov.w	r8, #0
 800817a:	f104 0919 	add.w	r9, r4, #25
 800817e:	e7f4      	b.n	800816a <_printf_float+0x456>

08008180 <_printf_common>:
 8008180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008184:	4616      	mov	r6, r2
 8008186:	4699      	mov	r9, r3
 8008188:	688a      	ldr	r2, [r1, #8]
 800818a:	690b      	ldr	r3, [r1, #16]
 800818c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008190:	4293      	cmp	r3, r2
 8008192:	bfb8      	it	lt
 8008194:	4613      	movlt	r3, r2
 8008196:	6033      	str	r3, [r6, #0]
 8008198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800819c:	4607      	mov	r7, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	b10a      	cbz	r2, 80081a6 <_printf_common+0x26>
 80081a2:	3301      	adds	r3, #1
 80081a4:	6033      	str	r3, [r6, #0]
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	0699      	lsls	r1, r3, #26
 80081aa:	bf42      	ittt	mi
 80081ac:	6833      	ldrmi	r3, [r6, #0]
 80081ae:	3302      	addmi	r3, #2
 80081b0:	6033      	strmi	r3, [r6, #0]
 80081b2:	6825      	ldr	r5, [r4, #0]
 80081b4:	f015 0506 	ands.w	r5, r5, #6
 80081b8:	d106      	bne.n	80081c8 <_printf_common+0x48>
 80081ba:	f104 0a19 	add.w	sl, r4, #25
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	6832      	ldr	r2, [r6, #0]
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dc26      	bgt.n	8008216 <_printf_common+0x96>
 80081c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081cc:	1e13      	subs	r3, r2, #0
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	bf18      	it	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	0692      	lsls	r2, r2, #26
 80081d6:	d42b      	bmi.n	8008230 <_printf_common+0xb0>
 80081d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081dc:	4649      	mov	r1, r9
 80081de:	4638      	mov	r0, r7
 80081e0:	47c0      	blx	r8
 80081e2:	3001      	adds	r0, #1
 80081e4:	d01e      	beq.n	8008224 <_printf_common+0xa4>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	f003 0306 	and.w	r3, r3, #6
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	bf02      	ittt	eq
 80081f2:	68e5      	ldreq	r5, [r4, #12]
 80081f4:	6833      	ldreq	r3, [r6, #0]
 80081f6:	1aed      	subeq	r5, r5, r3
 80081f8:	68a3      	ldr	r3, [r4, #8]
 80081fa:	bf0c      	ite	eq
 80081fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008200:	2500      	movne	r5, #0
 8008202:	4293      	cmp	r3, r2
 8008204:	bfc4      	itt	gt
 8008206:	1a9b      	subgt	r3, r3, r2
 8008208:	18ed      	addgt	r5, r5, r3
 800820a:	2600      	movs	r6, #0
 800820c:	341a      	adds	r4, #26
 800820e:	42b5      	cmp	r5, r6
 8008210:	d11a      	bne.n	8008248 <_printf_common+0xc8>
 8008212:	2000      	movs	r0, #0
 8008214:	e008      	b.n	8008228 <_printf_common+0xa8>
 8008216:	2301      	movs	r3, #1
 8008218:	4652      	mov	r2, sl
 800821a:	4649      	mov	r1, r9
 800821c:	4638      	mov	r0, r7
 800821e:	47c0      	blx	r8
 8008220:	3001      	adds	r0, #1
 8008222:	d103      	bne.n	800822c <_printf_common+0xac>
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822c:	3501      	adds	r5, #1
 800822e:	e7c6      	b.n	80081be <_printf_common+0x3e>
 8008230:	18e1      	adds	r1, r4, r3
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	2030      	movs	r0, #48	; 0x30
 8008236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800823a:	4422      	add	r2, r4
 800823c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008244:	3302      	adds	r3, #2
 8008246:	e7c7      	b.n	80081d8 <_printf_common+0x58>
 8008248:	2301      	movs	r3, #1
 800824a:	4622      	mov	r2, r4
 800824c:	4649      	mov	r1, r9
 800824e:	4638      	mov	r0, r7
 8008250:	47c0      	blx	r8
 8008252:	3001      	adds	r0, #1
 8008254:	d0e6      	beq.n	8008224 <_printf_common+0xa4>
 8008256:	3601      	adds	r6, #1
 8008258:	e7d9      	b.n	800820e <_printf_common+0x8e>
	...

0800825c <_printf_i>:
 800825c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	7e0f      	ldrb	r7, [r1, #24]
 8008262:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008264:	2f78      	cmp	r7, #120	; 0x78
 8008266:	4691      	mov	r9, r2
 8008268:	4680      	mov	r8, r0
 800826a:	460c      	mov	r4, r1
 800826c:	469a      	mov	sl, r3
 800826e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008272:	d807      	bhi.n	8008284 <_printf_i+0x28>
 8008274:	2f62      	cmp	r7, #98	; 0x62
 8008276:	d80a      	bhi.n	800828e <_printf_i+0x32>
 8008278:	2f00      	cmp	r7, #0
 800827a:	f000 80d4 	beq.w	8008426 <_printf_i+0x1ca>
 800827e:	2f58      	cmp	r7, #88	; 0x58
 8008280:	f000 80c0 	beq.w	8008404 <_printf_i+0x1a8>
 8008284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800828c:	e03a      	b.n	8008304 <_printf_i+0xa8>
 800828e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008292:	2b15      	cmp	r3, #21
 8008294:	d8f6      	bhi.n	8008284 <_printf_i+0x28>
 8008296:	a101      	add	r1, pc, #4	; (adr r1, 800829c <_printf_i+0x40>)
 8008298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800829c:	080082f5 	.word	0x080082f5
 80082a0:	08008309 	.word	0x08008309
 80082a4:	08008285 	.word	0x08008285
 80082a8:	08008285 	.word	0x08008285
 80082ac:	08008285 	.word	0x08008285
 80082b0:	08008285 	.word	0x08008285
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008285 	.word	0x08008285
 80082bc:	08008285 	.word	0x08008285
 80082c0:	08008285 	.word	0x08008285
 80082c4:	08008285 	.word	0x08008285
 80082c8:	0800840d 	.word	0x0800840d
 80082cc:	08008335 	.word	0x08008335
 80082d0:	080083c7 	.word	0x080083c7
 80082d4:	08008285 	.word	0x08008285
 80082d8:	08008285 	.word	0x08008285
 80082dc:	0800842f 	.word	0x0800842f
 80082e0:	08008285 	.word	0x08008285
 80082e4:	08008335 	.word	0x08008335
 80082e8:	08008285 	.word	0x08008285
 80082ec:	08008285 	.word	0x08008285
 80082f0:	080083cf 	.word	0x080083cf
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	1d1a      	adds	r2, r3, #4
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	602a      	str	r2, [r5, #0]
 80082fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008304:	2301      	movs	r3, #1
 8008306:	e09f      	b.n	8008448 <_printf_i+0x1ec>
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	0607      	lsls	r7, r0, #24
 800830e:	f103 0104 	add.w	r1, r3, #4
 8008312:	6029      	str	r1, [r5, #0]
 8008314:	d501      	bpl.n	800831a <_printf_i+0xbe>
 8008316:	681e      	ldr	r6, [r3, #0]
 8008318:	e003      	b.n	8008322 <_printf_i+0xc6>
 800831a:	0646      	lsls	r6, r0, #25
 800831c:	d5fb      	bpl.n	8008316 <_printf_i+0xba>
 800831e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008322:	2e00      	cmp	r6, #0
 8008324:	da03      	bge.n	800832e <_printf_i+0xd2>
 8008326:	232d      	movs	r3, #45	; 0x2d
 8008328:	4276      	negs	r6, r6
 800832a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832e:	485a      	ldr	r0, [pc, #360]	; (8008498 <_printf_i+0x23c>)
 8008330:	230a      	movs	r3, #10
 8008332:	e012      	b.n	800835a <_printf_i+0xfe>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	6820      	ldr	r0, [r4, #0]
 8008338:	1d19      	adds	r1, r3, #4
 800833a:	6029      	str	r1, [r5, #0]
 800833c:	0605      	lsls	r5, r0, #24
 800833e:	d501      	bpl.n	8008344 <_printf_i+0xe8>
 8008340:	681e      	ldr	r6, [r3, #0]
 8008342:	e002      	b.n	800834a <_printf_i+0xee>
 8008344:	0641      	lsls	r1, r0, #25
 8008346:	d5fb      	bpl.n	8008340 <_printf_i+0xe4>
 8008348:	881e      	ldrh	r6, [r3, #0]
 800834a:	4853      	ldr	r0, [pc, #332]	; (8008498 <_printf_i+0x23c>)
 800834c:	2f6f      	cmp	r7, #111	; 0x6f
 800834e:	bf0c      	ite	eq
 8008350:	2308      	moveq	r3, #8
 8008352:	230a      	movne	r3, #10
 8008354:	2100      	movs	r1, #0
 8008356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800835a:	6865      	ldr	r5, [r4, #4]
 800835c:	60a5      	str	r5, [r4, #8]
 800835e:	2d00      	cmp	r5, #0
 8008360:	bfa2      	ittt	ge
 8008362:	6821      	ldrge	r1, [r4, #0]
 8008364:	f021 0104 	bicge.w	r1, r1, #4
 8008368:	6021      	strge	r1, [r4, #0]
 800836a:	b90e      	cbnz	r6, 8008370 <_printf_i+0x114>
 800836c:	2d00      	cmp	r5, #0
 800836e:	d04b      	beq.n	8008408 <_printf_i+0x1ac>
 8008370:	4615      	mov	r5, r2
 8008372:	fbb6 f1f3 	udiv	r1, r6, r3
 8008376:	fb03 6711 	mls	r7, r3, r1, r6
 800837a:	5dc7      	ldrb	r7, [r0, r7]
 800837c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008380:	4637      	mov	r7, r6
 8008382:	42bb      	cmp	r3, r7
 8008384:	460e      	mov	r6, r1
 8008386:	d9f4      	bls.n	8008372 <_printf_i+0x116>
 8008388:	2b08      	cmp	r3, #8
 800838a:	d10b      	bne.n	80083a4 <_printf_i+0x148>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	07de      	lsls	r6, r3, #31
 8008390:	d508      	bpl.n	80083a4 <_printf_i+0x148>
 8008392:	6923      	ldr	r3, [r4, #16]
 8008394:	6861      	ldr	r1, [r4, #4]
 8008396:	4299      	cmp	r1, r3
 8008398:	bfde      	ittt	le
 800839a:	2330      	movle	r3, #48	; 0x30
 800839c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083a4:	1b52      	subs	r2, r2, r5
 80083a6:	6122      	str	r2, [r4, #16]
 80083a8:	f8cd a000 	str.w	sl, [sp]
 80083ac:	464b      	mov	r3, r9
 80083ae:	aa03      	add	r2, sp, #12
 80083b0:	4621      	mov	r1, r4
 80083b2:	4640      	mov	r0, r8
 80083b4:	f7ff fee4 	bl	8008180 <_printf_common>
 80083b8:	3001      	adds	r0, #1
 80083ba:	d14a      	bne.n	8008452 <_printf_i+0x1f6>
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295
 80083c0:	b004      	add	sp, #16
 80083c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	f043 0320 	orr.w	r3, r3, #32
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	4833      	ldr	r0, [pc, #204]	; (800849c <_printf_i+0x240>)
 80083d0:	2778      	movs	r7, #120	; 0x78
 80083d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	6829      	ldr	r1, [r5, #0]
 80083da:	061f      	lsls	r7, r3, #24
 80083dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80083e0:	d402      	bmi.n	80083e8 <_printf_i+0x18c>
 80083e2:	065f      	lsls	r7, r3, #25
 80083e4:	bf48      	it	mi
 80083e6:	b2b6      	uxthmi	r6, r6
 80083e8:	07df      	lsls	r7, r3, #31
 80083ea:	bf48      	it	mi
 80083ec:	f043 0320 	orrmi.w	r3, r3, #32
 80083f0:	6029      	str	r1, [r5, #0]
 80083f2:	bf48      	it	mi
 80083f4:	6023      	strmi	r3, [r4, #0]
 80083f6:	b91e      	cbnz	r6, 8008400 <_printf_i+0x1a4>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	f023 0320 	bic.w	r3, r3, #32
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	2310      	movs	r3, #16
 8008402:	e7a7      	b.n	8008354 <_printf_i+0xf8>
 8008404:	4824      	ldr	r0, [pc, #144]	; (8008498 <_printf_i+0x23c>)
 8008406:	e7e4      	b.n	80083d2 <_printf_i+0x176>
 8008408:	4615      	mov	r5, r2
 800840a:	e7bd      	b.n	8008388 <_printf_i+0x12c>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	6826      	ldr	r6, [r4, #0]
 8008410:	6961      	ldr	r1, [r4, #20]
 8008412:	1d18      	adds	r0, r3, #4
 8008414:	6028      	str	r0, [r5, #0]
 8008416:	0635      	lsls	r5, r6, #24
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	d501      	bpl.n	8008420 <_printf_i+0x1c4>
 800841c:	6019      	str	r1, [r3, #0]
 800841e:	e002      	b.n	8008426 <_printf_i+0x1ca>
 8008420:	0670      	lsls	r0, r6, #25
 8008422:	d5fb      	bpl.n	800841c <_printf_i+0x1c0>
 8008424:	8019      	strh	r1, [r3, #0]
 8008426:	2300      	movs	r3, #0
 8008428:	6123      	str	r3, [r4, #16]
 800842a:	4615      	mov	r5, r2
 800842c:	e7bc      	b.n	80083a8 <_printf_i+0x14c>
 800842e:	682b      	ldr	r3, [r5, #0]
 8008430:	1d1a      	adds	r2, r3, #4
 8008432:	602a      	str	r2, [r5, #0]
 8008434:	681d      	ldr	r5, [r3, #0]
 8008436:	6862      	ldr	r2, [r4, #4]
 8008438:	2100      	movs	r1, #0
 800843a:	4628      	mov	r0, r5
 800843c:	f7f7 fed0 	bl	80001e0 <memchr>
 8008440:	b108      	cbz	r0, 8008446 <_printf_i+0x1ea>
 8008442:	1b40      	subs	r0, r0, r5
 8008444:	6060      	str	r0, [r4, #4]
 8008446:	6863      	ldr	r3, [r4, #4]
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	2300      	movs	r3, #0
 800844c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008450:	e7aa      	b.n	80083a8 <_printf_i+0x14c>
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	462a      	mov	r2, r5
 8008456:	4649      	mov	r1, r9
 8008458:	4640      	mov	r0, r8
 800845a:	47d0      	blx	sl
 800845c:	3001      	adds	r0, #1
 800845e:	d0ad      	beq.n	80083bc <_printf_i+0x160>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	079b      	lsls	r3, r3, #30
 8008464:	d413      	bmi.n	800848e <_printf_i+0x232>
 8008466:	68e0      	ldr	r0, [r4, #12]
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	4298      	cmp	r0, r3
 800846c:	bfb8      	it	lt
 800846e:	4618      	movlt	r0, r3
 8008470:	e7a6      	b.n	80083c0 <_printf_i+0x164>
 8008472:	2301      	movs	r3, #1
 8008474:	4632      	mov	r2, r6
 8008476:	4649      	mov	r1, r9
 8008478:	4640      	mov	r0, r8
 800847a:	47d0      	blx	sl
 800847c:	3001      	adds	r0, #1
 800847e:	d09d      	beq.n	80083bc <_printf_i+0x160>
 8008480:	3501      	adds	r5, #1
 8008482:	68e3      	ldr	r3, [r4, #12]
 8008484:	9903      	ldr	r1, [sp, #12]
 8008486:	1a5b      	subs	r3, r3, r1
 8008488:	42ab      	cmp	r3, r5
 800848a:	dcf2      	bgt.n	8008472 <_printf_i+0x216>
 800848c:	e7eb      	b.n	8008466 <_printf_i+0x20a>
 800848e:	2500      	movs	r5, #0
 8008490:	f104 0619 	add.w	r6, r4, #25
 8008494:	e7f5      	b.n	8008482 <_printf_i+0x226>
 8008496:	bf00      	nop
 8008498:	0800b9c2 	.word	0x0800b9c2
 800849c:	0800b9d3 	.word	0x0800b9d3

080084a0 <_scanf_float>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	b087      	sub	sp, #28
 80084a6:	4617      	mov	r7, r2
 80084a8:	9303      	str	r3, [sp, #12]
 80084aa:	688b      	ldr	r3, [r1, #8]
 80084ac:	1e5a      	subs	r2, r3, #1
 80084ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084b2:	bf83      	ittte	hi
 80084b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084b8:	195b      	addhi	r3, r3, r5
 80084ba:	9302      	strhi	r3, [sp, #8]
 80084bc:	2300      	movls	r3, #0
 80084be:	bf86      	itte	hi
 80084c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084c4:	608b      	strhi	r3, [r1, #8]
 80084c6:	9302      	strls	r3, [sp, #8]
 80084c8:	680b      	ldr	r3, [r1, #0]
 80084ca:	468b      	mov	fp, r1
 80084cc:	2500      	movs	r5, #0
 80084ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80084d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084da:	4680      	mov	r8, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	465e      	mov	r6, fp
 80084e0:	46aa      	mov	sl, r5
 80084e2:	46a9      	mov	r9, r5
 80084e4:	9501      	str	r5, [sp, #4]
 80084e6:	68a2      	ldr	r2, [r4, #8]
 80084e8:	b152      	cbz	r2, 8008500 <_scanf_float+0x60>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b4e      	cmp	r3, #78	; 0x4e
 80084f0:	d864      	bhi.n	80085bc <_scanf_float+0x11c>
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d83c      	bhi.n	8008570 <_scanf_float+0xd0>
 80084f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80084fa:	b2c8      	uxtb	r0, r1
 80084fc:	280e      	cmp	r0, #14
 80084fe:	d93a      	bls.n	8008576 <_scanf_float+0xd6>
 8008500:	f1b9 0f00 	cmp.w	r9, #0
 8008504:	d003      	beq.n	800850e <_scanf_float+0x6e>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008512:	f1ba 0f01 	cmp.w	sl, #1
 8008516:	f200 8113 	bhi.w	8008740 <_scanf_float+0x2a0>
 800851a:	455e      	cmp	r6, fp
 800851c:	f200 8105 	bhi.w	800872a <_scanf_float+0x28a>
 8008520:	2501      	movs	r5, #1
 8008522:	4628      	mov	r0, r5
 8008524:	b007      	add	sp, #28
 8008526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800852e:	2a0d      	cmp	r2, #13
 8008530:	d8e6      	bhi.n	8008500 <_scanf_float+0x60>
 8008532:	a101      	add	r1, pc, #4	; (adr r1, 8008538 <_scanf_float+0x98>)
 8008534:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008538:	08008677 	.word	0x08008677
 800853c:	08008501 	.word	0x08008501
 8008540:	08008501 	.word	0x08008501
 8008544:	08008501 	.word	0x08008501
 8008548:	080086d7 	.word	0x080086d7
 800854c:	080086af 	.word	0x080086af
 8008550:	08008501 	.word	0x08008501
 8008554:	08008501 	.word	0x08008501
 8008558:	08008685 	.word	0x08008685
 800855c:	08008501 	.word	0x08008501
 8008560:	08008501 	.word	0x08008501
 8008564:	08008501 	.word	0x08008501
 8008568:	08008501 	.word	0x08008501
 800856c:	0800863d 	.word	0x0800863d
 8008570:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008574:	e7db      	b.n	800852e <_scanf_float+0x8e>
 8008576:	290e      	cmp	r1, #14
 8008578:	d8c2      	bhi.n	8008500 <_scanf_float+0x60>
 800857a:	a001      	add	r0, pc, #4	; (adr r0, 8008580 <_scanf_float+0xe0>)
 800857c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008580:	0800862f 	.word	0x0800862f
 8008584:	08008501 	.word	0x08008501
 8008588:	0800862f 	.word	0x0800862f
 800858c:	080086c3 	.word	0x080086c3
 8008590:	08008501 	.word	0x08008501
 8008594:	080085dd 	.word	0x080085dd
 8008598:	08008619 	.word	0x08008619
 800859c:	08008619 	.word	0x08008619
 80085a0:	08008619 	.word	0x08008619
 80085a4:	08008619 	.word	0x08008619
 80085a8:	08008619 	.word	0x08008619
 80085ac:	08008619 	.word	0x08008619
 80085b0:	08008619 	.word	0x08008619
 80085b4:	08008619 	.word	0x08008619
 80085b8:	08008619 	.word	0x08008619
 80085bc:	2b6e      	cmp	r3, #110	; 0x6e
 80085be:	d809      	bhi.n	80085d4 <_scanf_float+0x134>
 80085c0:	2b60      	cmp	r3, #96	; 0x60
 80085c2:	d8b2      	bhi.n	800852a <_scanf_float+0x8a>
 80085c4:	2b54      	cmp	r3, #84	; 0x54
 80085c6:	d077      	beq.n	80086b8 <_scanf_float+0x218>
 80085c8:	2b59      	cmp	r3, #89	; 0x59
 80085ca:	d199      	bne.n	8008500 <_scanf_float+0x60>
 80085cc:	2d07      	cmp	r5, #7
 80085ce:	d197      	bne.n	8008500 <_scanf_float+0x60>
 80085d0:	2508      	movs	r5, #8
 80085d2:	e029      	b.n	8008628 <_scanf_float+0x188>
 80085d4:	2b74      	cmp	r3, #116	; 0x74
 80085d6:	d06f      	beq.n	80086b8 <_scanf_float+0x218>
 80085d8:	2b79      	cmp	r3, #121	; 0x79
 80085da:	e7f6      	b.n	80085ca <_scanf_float+0x12a>
 80085dc:	6821      	ldr	r1, [r4, #0]
 80085de:	05c8      	lsls	r0, r1, #23
 80085e0:	d51a      	bpl.n	8008618 <_scanf_float+0x178>
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80085e8:	6021      	str	r1, [r4, #0]
 80085ea:	f109 0901 	add.w	r9, r9, #1
 80085ee:	b11b      	cbz	r3, 80085f8 <_scanf_float+0x158>
 80085f0:	3b01      	subs	r3, #1
 80085f2:	3201      	adds	r2, #1
 80085f4:	9302      	str	r3, [sp, #8]
 80085f6:	60a2      	str	r2, [r4, #8]
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	60a3      	str	r3, [r4, #8]
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	3301      	adds	r3, #1
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3b01      	subs	r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	f340 8084 	ble.w	8008718 <_scanf_float+0x278>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	603b      	str	r3, [r7, #0]
 8008616:	e766      	b.n	80084e6 <_scanf_float+0x46>
 8008618:	eb1a 0f05 	cmn.w	sl, r5
 800861c:	f47f af70 	bne.w	8008500 <_scanf_float+0x60>
 8008620:	6822      	ldr	r2, [r4, #0]
 8008622:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008626:	6022      	str	r2, [r4, #0]
 8008628:	f806 3b01 	strb.w	r3, [r6], #1
 800862c:	e7e4      	b.n	80085f8 <_scanf_float+0x158>
 800862e:	6822      	ldr	r2, [r4, #0]
 8008630:	0610      	lsls	r0, r2, #24
 8008632:	f57f af65 	bpl.w	8008500 <_scanf_float+0x60>
 8008636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800863a:	e7f4      	b.n	8008626 <_scanf_float+0x186>
 800863c:	f1ba 0f00 	cmp.w	sl, #0
 8008640:	d10e      	bne.n	8008660 <_scanf_float+0x1c0>
 8008642:	f1b9 0f00 	cmp.w	r9, #0
 8008646:	d10e      	bne.n	8008666 <_scanf_float+0x1c6>
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800864e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008652:	d108      	bne.n	8008666 <_scanf_float+0x1c6>
 8008654:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008658:	6022      	str	r2, [r4, #0]
 800865a:	f04f 0a01 	mov.w	sl, #1
 800865e:	e7e3      	b.n	8008628 <_scanf_float+0x188>
 8008660:	f1ba 0f02 	cmp.w	sl, #2
 8008664:	d055      	beq.n	8008712 <_scanf_float+0x272>
 8008666:	2d01      	cmp	r5, #1
 8008668:	d002      	beq.n	8008670 <_scanf_float+0x1d0>
 800866a:	2d04      	cmp	r5, #4
 800866c:	f47f af48 	bne.w	8008500 <_scanf_float+0x60>
 8008670:	3501      	adds	r5, #1
 8008672:	b2ed      	uxtb	r5, r5
 8008674:	e7d8      	b.n	8008628 <_scanf_float+0x188>
 8008676:	f1ba 0f01 	cmp.w	sl, #1
 800867a:	f47f af41 	bne.w	8008500 <_scanf_float+0x60>
 800867e:	f04f 0a02 	mov.w	sl, #2
 8008682:	e7d1      	b.n	8008628 <_scanf_float+0x188>
 8008684:	b97d      	cbnz	r5, 80086a6 <_scanf_float+0x206>
 8008686:	f1b9 0f00 	cmp.w	r9, #0
 800868a:	f47f af3c 	bne.w	8008506 <_scanf_float+0x66>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008694:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008698:	f47f af39 	bne.w	800850e <_scanf_float+0x6e>
 800869c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086a0:	6022      	str	r2, [r4, #0]
 80086a2:	2501      	movs	r5, #1
 80086a4:	e7c0      	b.n	8008628 <_scanf_float+0x188>
 80086a6:	2d03      	cmp	r5, #3
 80086a8:	d0e2      	beq.n	8008670 <_scanf_float+0x1d0>
 80086aa:	2d05      	cmp	r5, #5
 80086ac:	e7de      	b.n	800866c <_scanf_float+0x1cc>
 80086ae:	2d02      	cmp	r5, #2
 80086b0:	f47f af26 	bne.w	8008500 <_scanf_float+0x60>
 80086b4:	2503      	movs	r5, #3
 80086b6:	e7b7      	b.n	8008628 <_scanf_float+0x188>
 80086b8:	2d06      	cmp	r5, #6
 80086ba:	f47f af21 	bne.w	8008500 <_scanf_float+0x60>
 80086be:	2507      	movs	r5, #7
 80086c0:	e7b2      	b.n	8008628 <_scanf_float+0x188>
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	0591      	lsls	r1, r2, #22
 80086c6:	f57f af1b 	bpl.w	8008500 <_scanf_float+0x60>
 80086ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086ce:	6022      	str	r2, [r4, #0]
 80086d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80086d4:	e7a8      	b.n	8008628 <_scanf_float+0x188>
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80086dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086e0:	d006      	beq.n	80086f0 <_scanf_float+0x250>
 80086e2:	0550      	lsls	r0, r2, #21
 80086e4:	f57f af0c 	bpl.w	8008500 <_scanf_float+0x60>
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	f43f af0f 	beq.w	800850e <_scanf_float+0x6e>
 80086f0:	0591      	lsls	r1, r2, #22
 80086f2:	bf58      	it	pl
 80086f4:	9901      	ldrpl	r1, [sp, #4]
 80086f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086fa:	bf58      	it	pl
 80086fc:	eba9 0101 	subpl.w	r1, r9, r1
 8008700:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008704:	bf58      	it	pl
 8008706:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	f04f 0900 	mov.w	r9, #0
 8008710:	e78a      	b.n	8008628 <_scanf_float+0x188>
 8008712:	f04f 0a03 	mov.w	sl, #3
 8008716:	e787      	b.n	8008628 <_scanf_float+0x188>
 8008718:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800871c:	4639      	mov	r1, r7
 800871e:	4640      	mov	r0, r8
 8008720:	4798      	blx	r3
 8008722:	2800      	cmp	r0, #0
 8008724:	f43f aedf 	beq.w	80084e6 <_scanf_float+0x46>
 8008728:	e6ea      	b.n	8008500 <_scanf_float+0x60>
 800872a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800872e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008732:	463a      	mov	r2, r7
 8008734:	4640      	mov	r0, r8
 8008736:	4798      	blx	r3
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	3b01      	subs	r3, #1
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	e6ec      	b.n	800851a <_scanf_float+0x7a>
 8008740:	1e6b      	subs	r3, r5, #1
 8008742:	2b06      	cmp	r3, #6
 8008744:	d825      	bhi.n	8008792 <_scanf_float+0x2f2>
 8008746:	2d02      	cmp	r5, #2
 8008748:	d836      	bhi.n	80087b8 <_scanf_float+0x318>
 800874a:	455e      	cmp	r6, fp
 800874c:	f67f aee8 	bls.w	8008520 <_scanf_float+0x80>
 8008750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008754:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008758:	463a      	mov	r2, r7
 800875a:	4640      	mov	r0, r8
 800875c:	4798      	blx	r3
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	3b01      	subs	r3, #1
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	e7f1      	b.n	800874a <_scanf_float+0x2aa>
 8008766:	9802      	ldr	r0, [sp, #8]
 8008768:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800876c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008770:	9002      	str	r0, [sp, #8]
 8008772:	463a      	mov	r2, r7
 8008774:	4640      	mov	r0, r8
 8008776:	4798      	blx	r3
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	3b01      	subs	r3, #1
 800877c:	6123      	str	r3, [r4, #16]
 800877e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008782:	fa5f fa8a 	uxtb.w	sl, sl
 8008786:	f1ba 0f02 	cmp.w	sl, #2
 800878a:	d1ec      	bne.n	8008766 <_scanf_float+0x2c6>
 800878c:	3d03      	subs	r5, #3
 800878e:	b2ed      	uxtb	r5, r5
 8008790:	1b76      	subs	r6, r6, r5
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	05da      	lsls	r2, r3, #23
 8008796:	d52f      	bpl.n	80087f8 <_scanf_float+0x358>
 8008798:	055b      	lsls	r3, r3, #21
 800879a:	d510      	bpl.n	80087be <_scanf_float+0x31e>
 800879c:	455e      	cmp	r6, fp
 800879e:	f67f aebf 	bls.w	8008520 <_scanf_float+0x80>
 80087a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087aa:	463a      	mov	r2, r7
 80087ac:	4640      	mov	r0, r8
 80087ae:	4798      	blx	r3
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	e7f1      	b.n	800879c <_scanf_float+0x2fc>
 80087b8:	46aa      	mov	sl, r5
 80087ba:	9602      	str	r6, [sp, #8]
 80087bc:	e7df      	b.n	800877e <_scanf_float+0x2de>
 80087be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087c2:	6923      	ldr	r3, [r4, #16]
 80087c4:	2965      	cmp	r1, #101	; 0x65
 80087c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80087ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	d00c      	beq.n	80087ec <_scanf_float+0x34c>
 80087d2:	2945      	cmp	r1, #69	; 0x45
 80087d4:	d00a      	beq.n	80087ec <_scanf_float+0x34c>
 80087d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087da:	463a      	mov	r2, r7
 80087dc:	4640      	mov	r0, r8
 80087de:	4798      	blx	r3
 80087e0:	6923      	ldr	r3, [r4, #16]
 80087e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	1eb5      	subs	r5, r6, #2
 80087ea:	6123      	str	r3, [r4, #16]
 80087ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087f0:	463a      	mov	r2, r7
 80087f2:	4640      	mov	r0, r8
 80087f4:	4798      	blx	r3
 80087f6:	462e      	mov	r6, r5
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	f015 0510 	ands.w	r5, r5, #16
 80087fe:	d158      	bne.n	80088b2 <_scanf_float+0x412>
 8008800:	7035      	strb	r5, [r6, #0]
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800880c:	d11c      	bne.n	8008848 <_scanf_float+0x3a8>
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	454b      	cmp	r3, r9
 8008812:	eba3 0209 	sub.w	r2, r3, r9
 8008816:	d124      	bne.n	8008862 <_scanf_float+0x3c2>
 8008818:	2200      	movs	r2, #0
 800881a:	4659      	mov	r1, fp
 800881c:	4640      	mov	r0, r8
 800881e:	f7ff f9d3 	bl	8007bc8 <_strtod_r>
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	6821      	ldr	r1, [r4, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f011 0f02 	tst.w	r1, #2
 800882c:	ec57 6b10 	vmov	r6, r7, d0
 8008830:	f103 0204 	add.w	r2, r3, #4
 8008834:	d020      	beq.n	8008878 <_scanf_float+0x3d8>
 8008836:	9903      	ldr	r1, [sp, #12]
 8008838:	600a      	str	r2, [r1, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	e9c3 6700 	strd	r6, r7, [r3]
 8008840:	68e3      	ldr	r3, [r4, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60e3      	str	r3, [r4, #12]
 8008846:	e66c      	b.n	8008522 <_scanf_float+0x82>
 8008848:	9b04      	ldr	r3, [sp, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0e4      	beq.n	8008818 <_scanf_float+0x378>
 800884e:	9905      	ldr	r1, [sp, #20]
 8008850:	230a      	movs	r3, #10
 8008852:	462a      	mov	r2, r5
 8008854:	3101      	adds	r1, #1
 8008856:	4640      	mov	r0, r8
 8008858:	f002 fa96 	bl	800ad88 <_strtol_r>
 800885c:	9b04      	ldr	r3, [sp, #16]
 800885e:	9e05      	ldr	r6, [sp, #20]
 8008860:	1ac2      	subs	r2, r0, r3
 8008862:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008866:	429e      	cmp	r6, r3
 8008868:	bf28      	it	cs
 800886a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800886e:	4912      	ldr	r1, [pc, #72]	; (80088b8 <_scanf_float+0x418>)
 8008870:	4630      	mov	r0, r6
 8008872:	f000 f955 	bl	8008b20 <siprintf>
 8008876:	e7cf      	b.n	8008818 <_scanf_float+0x378>
 8008878:	f011 0f04 	tst.w	r1, #4
 800887c:	9903      	ldr	r1, [sp, #12]
 800887e:	600a      	str	r2, [r1, #0]
 8008880:	d1db      	bne.n	800883a <_scanf_float+0x39a>
 8008882:	f8d3 8000 	ldr.w	r8, [r3]
 8008886:	ee10 2a10 	vmov	r2, s0
 800888a:	ee10 0a10 	vmov	r0, s0
 800888e:	463b      	mov	r3, r7
 8008890:	4639      	mov	r1, r7
 8008892:	f7f8 f953 	bl	8000b3c <__aeabi_dcmpun>
 8008896:	b128      	cbz	r0, 80088a4 <_scanf_float+0x404>
 8008898:	4808      	ldr	r0, [pc, #32]	; (80088bc <_scanf_float+0x41c>)
 800889a:	f000 faf1 	bl	8008e80 <nanf>
 800889e:	ed88 0a00 	vstr	s0, [r8]
 80088a2:	e7cd      	b.n	8008840 <_scanf_float+0x3a0>
 80088a4:	4630      	mov	r0, r6
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f8 f9a6 	bl	8000bf8 <__aeabi_d2f>
 80088ac:	f8c8 0000 	str.w	r0, [r8]
 80088b0:	e7c6      	b.n	8008840 <_scanf_float+0x3a0>
 80088b2:	2500      	movs	r5, #0
 80088b4:	e635      	b.n	8008522 <_scanf_float+0x82>
 80088b6:	bf00      	nop
 80088b8:	0800b9e4 	.word	0x0800b9e4
 80088bc:	0800ba2c 	.word	0x0800ba2c

080088c0 <std>:
 80088c0:	2300      	movs	r3, #0
 80088c2:	b510      	push	{r4, lr}
 80088c4:	4604      	mov	r4, r0
 80088c6:	e9c0 3300 	strd	r3, r3, [r0]
 80088ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ce:	6083      	str	r3, [r0, #8]
 80088d0:	8181      	strh	r1, [r0, #12]
 80088d2:	6643      	str	r3, [r0, #100]	; 0x64
 80088d4:	81c2      	strh	r2, [r0, #14]
 80088d6:	6183      	str	r3, [r0, #24]
 80088d8:	4619      	mov	r1, r3
 80088da:	2208      	movs	r2, #8
 80088dc:	305c      	adds	r0, #92	; 0x5c
 80088de:	f000 fa17 	bl	8008d10 <memset>
 80088e2:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <std+0x58>)
 80088e4:	6263      	str	r3, [r4, #36]	; 0x24
 80088e6:	4b0d      	ldr	r3, [pc, #52]	; (800891c <std+0x5c>)
 80088e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <std+0x60>)
 80088ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088ee:	4b0d      	ldr	r3, [pc, #52]	; (8008924 <std+0x64>)
 80088f0:	6323      	str	r3, [r4, #48]	; 0x30
 80088f2:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <std+0x68>)
 80088f4:	6224      	str	r4, [r4, #32]
 80088f6:	429c      	cmp	r4, r3
 80088f8:	d006      	beq.n	8008908 <std+0x48>
 80088fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80088fe:	4294      	cmp	r4, r2
 8008900:	d002      	beq.n	8008908 <std+0x48>
 8008902:	33d0      	adds	r3, #208	; 0xd0
 8008904:	429c      	cmp	r4, r3
 8008906:	d105      	bne.n	8008914 <std+0x54>
 8008908:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800890c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008910:	f000 ba9c 	b.w	8008e4c <__retarget_lock_init_recursive>
 8008914:	bd10      	pop	{r4, pc}
 8008916:	bf00      	nop
 8008918:	08008b61 	.word	0x08008b61
 800891c:	08008b83 	.word	0x08008b83
 8008920:	08008bbb 	.word	0x08008bbb
 8008924:	08008bdf 	.word	0x08008bdf
 8008928:	20000508 	.word	0x20000508

0800892c <stdio_exit_handler>:
 800892c:	4a02      	ldr	r2, [pc, #8]	; (8008938 <stdio_exit_handler+0xc>)
 800892e:	4903      	ldr	r1, [pc, #12]	; (800893c <stdio_exit_handler+0x10>)
 8008930:	4803      	ldr	r0, [pc, #12]	; (8008940 <stdio_exit_handler+0x14>)
 8008932:	f000 b869 	b.w	8008a08 <_fwalk_sglue>
 8008936:	bf00      	nop
 8008938:	2000001c 	.word	0x2000001c
 800893c:	0800b3ed 	.word	0x0800b3ed
 8008940:	20000194 	.word	0x20000194

08008944 <cleanup_stdio>:
 8008944:	6841      	ldr	r1, [r0, #4]
 8008946:	4b0c      	ldr	r3, [pc, #48]	; (8008978 <cleanup_stdio+0x34>)
 8008948:	4299      	cmp	r1, r3
 800894a:	b510      	push	{r4, lr}
 800894c:	4604      	mov	r4, r0
 800894e:	d001      	beq.n	8008954 <cleanup_stdio+0x10>
 8008950:	f002 fd4c 	bl	800b3ec <_fflush_r>
 8008954:	68a1      	ldr	r1, [r4, #8]
 8008956:	4b09      	ldr	r3, [pc, #36]	; (800897c <cleanup_stdio+0x38>)
 8008958:	4299      	cmp	r1, r3
 800895a:	d002      	beq.n	8008962 <cleanup_stdio+0x1e>
 800895c:	4620      	mov	r0, r4
 800895e:	f002 fd45 	bl	800b3ec <_fflush_r>
 8008962:	68e1      	ldr	r1, [r4, #12]
 8008964:	4b06      	ldr	r3, [pc, #24]	; (8008980 <cleanup_stdio+0x3c>)
 8008966:	4299      	cmp	r1, r3
 8008968:	d004      	beq.n	8008974 <cleanup_stdio+0x30>
 800896a:	4620      	mov	r0, r4
 800896c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008970:	f002 bd3c 	b.w	800b3ec <_fflush_r>
 8008974:	bd10      	pop	{r4, pc}
 8008976:	bf00      	nop
 8008978:	20000508 	.word	0x20000508
 800897c:	20000570 	.word	0x20000570
 8008980:	200005d8 	.word	0x200005d8

08008984 <global_stdio_init.part.0>:
 8008984:	b510      	push	{r4, lr}
 8008986:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <global_stdio_init.part.0+0x30>)
 8008988:	4c0b      	ldr	r4, [pc, #44]	; (80089b8 <global_stdio_init.part.0+0x34>)
 800898a:	4a0c      	ldr	r2, [pc, #48]	; (80089bc <global_stdio_init.part.0+0x38>)
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	4620      	mov	r0, r4
 8008990:	2200      	movs	r2, #0
 8008992:	2104      	movs	r1, #4
 8008994:	f7ff ff94 	bl	80088c0 <std>
 8008998:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800899c:	2201      	movs	r2, #1
 800899e:	2109      	movs	r1, #9
 80089a0:	f7ff ff8e 	bl	80088c0 <std>
 80089a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80089a8:	2202      	movs	r2, #2
 80089aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ae:	2112      	movs	r1, #18
 80089b0:	f7ff bf86 	b.w	80088c0 <std>
 80089b4:	20000640 	.word	0x20000640
 80089b8:	20000508 	.word	0x20000508
 80089bc:	0800892d 	.word	0x0800892d

080089c0 <__sfp_lock_acquire>:
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <__sfp_lock_acquire+0x8>)
 80089c2:	f000 ba44 	b.w	8008e4e <__retarget_lock_acquire_recursive>
 80089c6:	bf00      	nop
 80089c8:	20000649 	.word	0x20000649

080089cc <__sfp_lock_release>:
 80089cc:	4801      	ldr	r0, [pc, #4]	; (80089d4 <__sfp_lock_release+0x8>)
 80089ce:	f000 ba3f 	b.w	8008e50 <__retarget_lock_release_recursive>
 80089d2:	bf00      	nop
 80089d4:	20000649 	.word	0x20000649

080089d8 <__sinit>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	4604      	mov	r4, r0
 80089dc:	f7ff fff0 	bl	80089c0 <__sfp_lock_acquire>
 80089e0:	6a23      	ldr	r3, [r4, #32]
 80089e2:	b11b      	cbz	r3, 80089ec <__sinit+0x14>
 80089e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e8:	f7ff bff0 	b.w	80089cc <__sfp_lock_release>
 80089ec:	4b04      	ldr	r3, [pc, #16]	; (8008a00 <__sinit+0x28>)
 80089ee:	6223      	str	r3, [r4, #32]
 80089f0:	4b04      	ldr	r3, [pc, #16]	; (8008a04 <__sinit+0x2c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1f5      	bne.n	80089e4 <__sinit+0xc>
 80089f8:	f7ff ffc4 	bl	8008984 <global_stdio_init.part.0>
 80089fc:	e7f2      	b.n	80089e4 <__sinit+0xc>
 80089fe:	bf00      	nop
 8008a00:	08008945 	.word	0x08008945
 8008a04:	20000640 	.word	0x20000640

08008a08 <_fwalk_sglue>:
 8008a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	4688      	mov	r8, r1
 8008a10:	4614      	mov	r4, r2
 8008a12:	2600      	movs	r6, #0
 8008a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a18:	f1b9 0901 	subs.w	r9, r9, #1
 8008a1c:	d505      	bpl.n	8008a2a <_fwalk_sglue+0x22>
 8008a1e:	6824      	ldr	r4, [r4, #0]
 8008a20:	2c00      	cmp	r4, #0
 8008a22:	d1f7      	bne.n	8008a14 <_fwalk_sglue+0xc>
 8008a24:	4630      	mov	r0, r6
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d907      	bls.n	8008a40 <_fwalk_sglue+0x38>
 8008a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a34:	3301      	adds	r3, #1
 8008a36:	d003      	beq.n	8008a40 <_fwalk_sglue+0x38>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	47c0      	blx	r8
 8008a3e:	4306      	orrs	r6, r0
 8008a40:	3568      	adds	r5, #104	; 0x68
 8008a42:	e7e9      	b.n	8008a18 <_fwalk_sglue+0x10>

08008a44 <iprintf>:
 8008a44:	b40f      	push	{r0, r1, r2, r3}
 8008a46:	b507      	push	{r0, r1, r2, lr}
 8008a48:	4906      	ldr	r1, [pc, #24]	; (8008a64 <iprintf+0x20>)
 8008a4a:	ab04      	add	r3, sp, #16
 8008a4c:	6808      	ldr	r0, [r1, #0]
 8008a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a52:	6881      	ldr	r1, [r0, #8]
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	f002 fb29 	bl	800b0ac <_vfiprintf_r>
 8008a5a:	b003      	add	sp, #12
 8008a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a60:	b004      	add	sp, #16
 8008a62:	4770      	bx	lr
 8008a64:	200001e0 	.word	0x200001e0

08008a68 <_puts_r>:
 8008a68:	6a03      	ldr	r3, [r0, #32]
 8008a6a:	b570      	push	{r4, r5, r6, lr}
 8008a6c:	6884      	ldr	r4, [r0, #8]
 8008a6e:	4605      	mov	r5, r0
 8008a70:	460e      	mov	r6, r1
 8008a72:	b90b      	cbnz	r3, 8008a78 <_puts_r+0x10>
 8008a74:	f7ff ffb0 	bl	80089d8 <__sinit>
 8008a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a7a:	07db      	lsls	r3, r3, #31
 8008a7c:	d405      	bmi.n	8008a8a <_puts_r+0x22>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	0598      	lsls	r0, r3, #22
 8008a82:	d402      	bmi.n	8008a8a <_puts_r+0x22>
 8008a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a86:	f000 f9e2 	bl	8008e4e <__retarget_lock_acquire_recursive>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	0719      	lsls	r1, r3, #28
 8008a8e:	d513      	bpl.n	8008ab8 <_puts_r+0x50>
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	b18b      	cbz	r3, 8008ab8 <_puts_r+0x50>
 8008a94:	3e01      	subs	r6, #1
 8008a96:	68a3      	ldr	r3, [r4, #8]
 8008a98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	60a3      	str	r3, [r4, #8]
 8008aa0:	b9e9      	cbnz	r1, 8008ade <_puts_r+0x76>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	da2e      	bge.n	8008b04 <_puts_r+0x9c>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	210a      	movs	r1, #10
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f000 f89b 	bl	8008be6 <__swbuf_r>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d007      	beq.n	8008ac4 <_puts_r+0x5c>
 8008ab4:	250a      	movs	r5, #10
 8008ab6:	e007      	b.n	8008ac8 <_puts_r+0x60>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4628      	mov	r0, r5
 8008abc:	f000 f8d0 	bl	8008c60 <__swsetup_r>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d0e7      	beq.n	8008a94 <_puts_r+0x2c>
 8008ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aca:	07da      	lsls	r2, r3, #31
 8008acc:	d405      	bmi.n	8008ada <_puts_r+0x72>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	059b      	lsls	r3, r3, #22
 8008ad2:	d402      	bmi.n	8008ada <_puts_r+0x72>
 8008ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ad6:	f000 f9bb 	bl	8008e50 <__retarget_lock_release_recursive>
 8008ada:	4628      	mov	r0, r5
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da04      	bge.n	8008aec <_puts_r+0x84>
 8008ae2:	69a2      	ldr	r2, [r4, #24]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	dc06      	bgt.n	8008af6 <_puts_r+0x8e>
 8008ae8:	290a      	cmp	r1, #10
 8008aea:	d004      	beq.n	8008af6 <_puts_r+0x8e>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	7019      	strb	r1, [r3, #0]
 8008af4:	e7cf      	b.n	8008a96 <_puts_r+0x2e>
 8008af6:	4622      	mov	r2, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 f874 	bl	8008be6 <__swbuf_r>
 8008afe:	3001      	adds	r0, #1
 8008b00:	d1c9      	bne.n	8008a96 <_puts_r+0x2e>
 8008b02:	e7df      	b.n	8008ac4 <_puts_r+0x5c>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	250a      	movs	r5, #10
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	6022      	str	r2, [r4, #0]
 8008b0c:	701d      	strb	r5, [r3, #0]
 8008b0e:	e7db      	b.n	8008ac8 <_puts_r+0x60>

08008b10 <puts>:
 8008b10:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <puts+0xc>)
 8008b12:	4601      	mov	r1, r0
 8008b14:	6818      	ldr	r0, [r3, #0]
 8008b16:	f7ff bfa7 	b.w	8008a68 <_puts_r>
 8008b1a:	bf00      	nop
 8008b1c:	200001e0 	.word	0x200001e0

08008b20 <siprintf>:
 8008b20:	b40e      	push	{r1, r2, r3}
 8008b22:	b500      	push	{lr}
 8008b24:	b09c      	sub	sp, #112	; 0x70
 8008b26:	ab1d      	add	r3, sp, #116	; 0x74
 8008b28:	9002      	str	r0, [sp, #8]
 8008b2a:	9006      	str	r0, [sp, #24]
 8008b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b30:	4809      	ldr	r0, [pc, #36]	; (8008b58 <siprintf+0x38>)
 8008b32:	9107      	str	r1, [sp, #28]
 8008b34:	9104      	str	r1, [sp, #16]
 8008b36:	4909      	ldr	r1, [pc, #36]	; (8008b5c <siprintf+0x3c>)
 8008b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3c:	9105      	str	r1, [sp, #20]
 8008b3e:	6800      	ldr	r0, [r0, #0]
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	a902      	add	r1, sp, #8
 8008b44:	f002 f98a 	bl	800ae5c <_svfiprintf_r>
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	b01c      	add	sp, #112	; 0x70
 8008b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b54:	b003      	add	sp, #12
 8008b56:	4770      	bx	lr
 8008b58:	200001e0 	.word	0x200001e0
 8008b5c:	ffff0208 	.word	0xffff0208

08008b60 <__sread>:
 8008b60:	b510      	push	{r4, lr}
 8008b62:	460c      	mov	r4, r1
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	f000 f912 	bl	8008d90 <_read_r>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	bfab      	itete	ge
 8008b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b72:	89a3      	ldrhlt	r3, [r4, #12]
 8008b74:	181b      	addge	r3, r3, r0
 8008b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b7a:	bfac      	ite	ge
 8008b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b7e:	81a3      	strhlt	r3, [r4, #12]
 8008b80:	bd10      	pop	{r4, pc}

08008b82 <__swrite>:
 8008b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b86:	461f      	mov	r7, r3
 8008b88:	898b      	ldrh	r3, [r1, #12]
 8008b8a:	05db      	lsls	r3, r3, #23
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	4616      	mov	r6, r2
 8008b92:	d505      	bpl.n	8008ba0 <__swrite+0x1e>
 8008b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b98:	2302      	movs	r3, #2
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f000 f8e6 	bl	8008d6c <_lseek_r>
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008baa:	81a3      	strh	r3, [r4, #12]
 8008bac:	4632      	mov	r2, r6
 8008bae:	463b      	mov	r3, r7
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb6:	f000 b90d 	b.w	8008dd4 <_write_r>

08008bba <__sseek>:
 8008bba:	b510      	push	{r4, lr}
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc2:	f000 f8d3 	bl	8008d6c <_lseek_r>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	bf15      	itete	ne
 8008bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bd6:	81a3      	strheq	r3, [r4, #12]
 8008bd8:	bf18      	it	ne
 8008bda:	81a3      	strhne	r3, [r4, #12]
 8008bdc:	bd10      	pop	{r4, pc}

08008bde <__sclose>:
 8008bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be2:	f000 b8b3 	b.w	8008d4c <_close_r>

08008be6 <__swbuf_r>:
 8008be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be8:	460e      	mov	r6, r1
 8008bea:	4614      	mov	r4, r2
 8008bec:	4605      	mov	r5, r0
 8008bee:	b118      	cbz	r0, 8008bf8 <__swbuf_r+0x12>
 8008bf0:	6a03      	ldr	r3, [r0, #32]
 8008bf2:	b90b      	cbnz	r3, 8008bf8 <__swbuf_r+0x12>
 8008bf4:	f7ff fef0 	bl	80089d8 <__sinit>
 8008bf8:	69a3      	ldr	r3, [r4, #24]
 8008bfa:	60a3      	str	r3, [r4, #8]
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	071a      	lsls	r2, r3, #28
 8008c00:	d525      	bpl.n	8008c4e <__swbuf_r+0x68>
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	b31b      	cbz	r3, 8008c4e <__swbuf_r+0x68>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	6922      	ldr	r2, [r4, #16]
 8008c0a:	1a98      	subs	r0, r3, r2
 8008c0c:	6963      	ldr	r3, [r4, #20]
 8008c0e:	b2f6      	uxtb	r6, r6
 8008c10:	4283      	cmp	r3, r0
 8008c12:	4637      	mov	r7, r6
 8008c14:	dc04      	bgt.n	8008c20 <__swbuf_r+0x3a>
 8008c16:	4621      	mov	r1, r4
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f002 fbe7 	bl	800b3ec <_fflush_r>
 8008c1e:	b9e0      	cbnz	r0, 8008c5a <__swbuf_r+0x74>
 8008c20:	68a3      	ldr	r3, [r4, #8]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	60a3      	str	r3, [r4, #8]
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	701e      	strb	r6, [r3, #0]
 8008c2e:	6962      	ldr	r2, [r4, #20]
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d004      	beq.n	8008c40 <__swbuf_r+0x5a>
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	07db      	lsls	r3, r3, #31
 8008c3a:	d506      	bpl.n	8008c4a <__swbuf_r+0x64>
 8008c3c:	2e0a      	cmp	r6, #10
 8008c3e:	d104      	bne.n	8008c4a <__swbuf_r+0x64>
 8008c40:	4621      	mov	r1, r4
 8008c42:	4628      	mov	r0, r5
 8008c44:	f002 fbd2 	bl	800b3ec <_fflush_r>
 8008c48:	b938      	cbnz	r0, 8008c5a <__swbuf_r+0x74>
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f000 f805 	bl	8008c60 <__swsetup_r>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0d5      	beq.n	8008c06 <__swbuf_r+0x20>
 8008c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c5e:	e7f4      	b.n	8008c4a <__swbuf_r+0x64>

08008c60 <__swsetup_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <__swsetup_r+0xac>)
 8008c64:	4605      	mov	r5, r0
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	460c      	mov	r4, r1
 8008c6a:	b118      	cbz	r0, 8008c74 <__swsetup_r+0x14>
 8008c6c:	6a03      	ldr	r3, [r0, #32]
 8008c6e:	b90b      	cbnz	r3, 8008c74 <__swsetup_r+0x14>
 8008c70:	f7ff feb2 	bl	80089d8 <__sinit>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c7a:	0718      	lsls	r0, r3, #28
 8008c7c:	d422      	bmi.n	8008cc4 <__swsetup_r+0x64>
 8008c7e:	06d9      	lsls	r1, r3, #27
 8008c80:	d407      	bmi.n	8008c92 <__swsetup_r+0x32>
 8008c82:	2309      	movs	r3, #9
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	e034      	b.n	8008cfc <__swsetup_r+0x9c>
 8008c92:	0758      	lsls	r0, r3, #29
 8008c94:	d512      	bpl.n	8008cbc <__swsetup_r+0x5c>
 8008c96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c98:	b141      	cbz	r1, 8008cac <__swsetup_r+0x4c>
 8008c9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	d002      	beq.n	8008ca8 <__swsetup_r+0x48>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f000 ff8a 	bl	8009bbc <_free_r>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	6363      	str	r3, [r4, #52]	; 0x34
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	f043 0308 	orr.w	r3, r3, #8
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	6923      	ldr	r3, [r4, #16]
 8008cc6:	b94b      	cbnz	r3, 8008cdc <__swsetup_r+0x7c>
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd2:	d003      	beq.n	8008cdc <__swsetup_r+0x7c>
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f002 fbe8 	bl	800b4ac <__smakebuf_r>
 8008cdc:	89a0      	ldrh	r0, [r4, #12]
 8008cde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ce2:	f010 0301 	ands.w	r3, r0, #1
 8008ce6:	d00a      	beq.n	8008cfe <__swsetup_r+0x9e>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60a3      	str	r3, [r4, #8]
 8008cec:	6963      	ldr	r3, [r4, #20]
 8008cee:	425b      	negs	r3, r3
 8008cf0:	61a3      	str	r3, [r4, #24]
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	b943      	cbnz	r3, 8008d08 <__swsetup_r+0xa8>
 8008cf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cfa:	d1c4      	bne.n	8008c86 <__swsetup_r+0x26>
 8008cfc:	bd38      	pop	{r3, r4, r5, pc}
 8008cfe:	0781      	lsls	r1, r0, #30
 8008d00:	bf58      	it	pl
 8008d02:	6963      	ldrpl	r3, [r4, #20]
 8008d04:	60a3      	str	r3, [r4, #8]
 8008d06:	e7f4      	b.n	8008cf2 <__swsetup_r+0x92>
 8008d08:	2000      	movs	r0, #0
 8008d0a:	e7f7      	b.n	8008cfc <__swsetup_r+0x9c>
 8008d0c:	200001e0 	.word	0x200001e0

08008d10 <memset>:
 8008d10:	4402      	add	r2, r0
 8008d12:	4603      	mov	r3, r0
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d100      	bne.n	8008d1a <memset+0xa>
 8008d18:	4770      	bx	lr
 8008d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1e:	e7f9      	b.n	8008d14 <memset+0x4>

08008d20 <strncmp>:
 8008d20:	b510      	push	{r4, lr}
 8008d22:	b16a      	cbz	r2, 8008d40 <strncmp+0x20>
 8008d24:	3901      	subs	r1, #1
 8008d26:	1884      	adds	r4, r0, r2
 8008d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d103      	bne.n	8008d3c <strncmp+0x1c>
 8008d34:	42a0      	cmp	r0, r4
 8008d36:	d001      	beq.n	8008d3c <strncmp+0x1c>
 8008d38:	2a00      	cmp	r2, #0
 8008d3a:	d1f5      	bne.n	8008d28 <strncmp+0x8>
 8008d3c:	1ad0      	subs	r0, r2, r3
 8008d3e:	bd10      	pop	{r4, pc}
 8008d40:	4610      	mov	r0, r2
 8008d42:	e7fc      	b.n	8008d3e <strncmp+0x1e>

08008d44 <_localeconv_r>:
 8008d44:	4800      	ldr	r0, [pc, #0]	; (8008d48 <_localeconv_r+0x4>)
 8008d46:	4770      	bx	lr
 8008d48:	20000118 	.word	0x20000118

08008d4c <_close_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d06      	ldr	r5, [pc, #24]	; (8008d68 <_close_r+0x1c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	f7f9 ff8b 	bl	8002c72 <_close>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_close_r+0x1a>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_close_r+0x1a>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20000644 	.word	0x20000644

08008d6c <_lseek_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	; (8008d8c <_lseek_r+0x20>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f7f9 ffa0 	bl	8002cc0 <_lseek>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_lseek_r+0x1e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_lseek_r+0x1e>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20000644 	.word	0x20000644

08008d90 <_read_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	; (8008db0 <_read_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f9 ff2e 	bl	8002c00 <_read>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_read_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_read_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20000644 	.word	0x20000644

08008db4 <_sbrk_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d06      	ldr	r5, [pc, #24]	; (8008dd0 <_sbrk_r+0x1c>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	f7f9 ff8c 	bl	8002cdc <_sbrk>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_sbrk_r+0x1a>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_sbrk_r+0x1a>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	20000644 	.word	0x20000644

08008dd4 <_write_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d07      	ldr	r5, [pc, #28]	; (8008df4 <_write_r+0x20>)
 8008dd8:	4604      	mov	r4, r0
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	2200      	movs	r2, #0
 8008de0:	602a      	str	r2, [r5, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f7f9 ff29 	bl	8002c3a <_write>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_write_r+0x1e>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_write_r+0x1e>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20000644 	.word	0x20000644

08008df8 <__errno>:
 8008df8:	4b01      	ldr	r3, [pc, #4]	; (8008e00 <__errno+0x8>)
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	200001e0 	.word	0x200001e0

08008e04 <__libc_init_array>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	4d0d      	ldr	r5, [pc, #52]	; (8008e3c <__libc_init_array+0x38>)
 8008e08:	4c0d      	ldr	r4, [pc, #52]	; (8008e40 <__libc_init_array+0x3c>)
 8008e0a:	1b64      	subs	r4, r4, r5
 8008e0c:	10a4      	asrs	r4, r4, #2
 8008e0e:	2600      	movs	r6, #0
 8008e10:	42a6      	cmp	r6, r4
 8008e12:	d109      	bne.n	8008e28 <__libc_init_array+0x24>
 8008e14:	4d0b      	ldr	r5, [pc, #44]	; (8008e44 <__libc_init_array+0x40>)
 8008e16:	4c0c      	ldr	r4, [pc, #48]	; (8008e48 <__libc_init_array+0x44>)
 8008e18:	f002 fc58 	bl	800b6cc <_init>
 8008e1c:	1b64      	subs	r4, r4, r5
 8008e1e:	10a4      	asrs	r4, r4, #2
 8008e20:	2600      	movs	r6, #0
 8008e22:	42a6      	cmp	r6, r4
 8008e24:	d105      	bne.n	8008e32 <__libc_init_array+0x2e>
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2c:	4798      	blx	r3
 8008e2e:	3601      	adds	r6, #1
 8008e30:	e7ee      	b.n	8008e10 <__libc_init_array+0xc>
 8008e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e36:	4798      	blx	r3
 8008e38:	3601      	adds	r6, #1
 8008e3a:	e7f2      	b.n	8008e22 <__libc_init_array+0x1e>
 8008e3c:	0800bd90 	.word	0x0800bd90
 8008e40:	0800bd90 	.word	0x0800bd90
 8008e44:	0800bd90 	.word	0x0800bd90
 8008e48:	0800bd94 	.word	0x0800bd94

08008e4c <__retarget_lock_init_recursive>:
 8008e4c:	4770      	bx	lr

08008e4e <__retarget_lock_acquire_recursive>:
 8008e4e:	4770      	bx	lr

08008e50 <__retarget_lock_release_recursive>:
 8008e50:	4770      	bx	lr

08008e52 <memcpy>:
 8008e52:	440a      	add	r2, r1
 8008e54:	4291      	cmp	r1, r2
 8008e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e5a:	d100      	bne.n	8008e5e <memcpy+0xc>
 8008e5c:	4770      	bx	lr
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e68:	4291      	cmp	r1, r2
 8008e6a:	d1f9      	bne.n	8008e60 <memcpy+0xe>
 8008e6c:	bd10      	pop	{r4, pc}
	...

08008e70 <nan>:
 8008e70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008e78 <nan+0x8>
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	00000000 	.word	0x00000000
 8008e7c:	7ff80000 	.word	0x7ff80000

08008e80 <nanf>:
 8008e80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e88 <nanf+0x8>
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	7fc00000 	.word	0x7fc00000

08008e8c <__assert_func>:
 8008e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e8e:	4614      	mov	r4, r2
 8008e90:	461a      	mov	r2, r3
 8008e92:	4b09      	ldr	r3, [pc, #36]	; (8008eb8 <__assert_func+0x2c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4605      	mov	r5, r0
 8008e98:	68d8      	ldr	r0, [r3, #12]
 8008e9a:	b14c      	cbz	r4, 8008eb0 <__assert_func+0x24>
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <__assert_func+0x30>)
 8008e9e:	9100      	str	r1, [sp, #0]
 8008ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ea4:	4906      	ldr	r1, [pc, #24]	; (8008ec0 <__assert_func+0x34>)
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	f002 fac8 	bl	800b43c <fiprintf>
 8008eac:	f002 fb76 	bl	800b59c <abort>
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <__assert_func+0x38>)
 8008eb2:	461c      	mov	r4, r3
 8008eb4:	e7f3      	b.n	8008e9e <__assert_func+0x12>
 8008eb6:	bf00      	nop
 8008eb8:	200001e0 	.word	0x200001e0
 8008ebc:	0800b9f1 	.word	0x0800b9f1
 8008ec0:	0800b9fe 	.word	0x0800b9fe
 8008ec4:	0800ba2c 	.word	0x0800ba2c

08008ec8 <quorem>:
 8008ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	6903      	ldr	r3, [r0, #16]
 8008ece:	690c      	ldr	r4, [r1, #16]
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	db7e      	blt.n	8008fd4 <quorem+0x10c>
 8008ed6:	3c01      	subs	r4, #1
 8008ed8:	f101 0814 	add.w	r8, r1, #20
 8008edc:	f100 0514 	add.w	r5, r0, #20
 8008ee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008eea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ef6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008efa:	fbb2 f6f3 	udiv	r6, r2, r3
 8008efe:	d331      	bcc.n	8008f64 <quorem+0x9c>
 8008f00:	f04f 0e00 	mov.w	lr, #0
 8008f04:	4640      	mov	r0, r8
 8008f06:	46ac      	mov	ip, r5
 8008f08:	46f2      	mov	sl, lr
 8008f0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f0e:	b293      	uxth	r3, r2
 8008f10:	fb06 e303 	mla	r3, r6, r3, lr
 8008f14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f18:	0c1a      	lsrs	r2, r3, #16
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f20:	f8dc a000 	ldr.w	sl, [ip]
 8008f24:	fa13 f38a 	uxtah	r3, r3, sl
 8008f28:	fb06 220e 	mla	r2, r6, lr, r2
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f34:	b292      	uxth	r2, r2
 8008f36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f3e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f42:	4581      	cmp	r9, r0
 8008f44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f48:	f84c 3b04 	str.w	r3, [ip], #4
 8008f4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f50:	d2db      	bcs.n	8008f0a <quorem+0x42>
 8008f52:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f56:	b92b      	cbnz	r3, 8008f64 <quorem+0x9c>
 8008f58:	9b01      	ldr	r3, [sp, #4]
 8008f5a:	3b04      	subs	r3, #4
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	461a      	mov	r2, r3
 8008f60:	d32c      	bcc.n	8008fbc <quorem+0xf4>
 8008f62:	613c      	str	r4, [r7, #16]
 8008f64:	4638      	mov	r0, r7
 8008f66:	f001 fca5 	bl	800a8b4 <__mcmp>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	db22      	blt.n	8008fb4 <quorem+0xec>
 8008f6e:	3601      	adds	r6, #1
 8008f70:	4629      	mov	r1, r5
 8008f72:	2000      	movs	r0, #0
 8008f74:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f78:	f8d1 c000 	ldr.w	ip, [r1]
 8008f7c:	b293      	uxth	r3, r2
 8008f7e:	1ac3      	subs	r3, r0, r3
 8008f80:	0c12      	lsrs	r2, r2, #16
 8008f82:	fa13 f38c 	uxtah	r3, r3, ip
 8008f86:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008f8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f94:	45c1      	cmp	r9, r8
 8008f96:	f841 3b04 	str.w	r3, [r1], #4
 8008f9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f9e:	d2e9      	bcs.n	8008f74 <quorem+0xac>
 8008fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fa8:	b922      	cbnz	r2, 8008fb4 <quorem+0xec>
 8008faa:	3b04      	subs	r3, #4
 8008fac:	429d      	cmp	r5, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	d30a      	bcc.n	8008fc8 <quorem+0x100>
 8008fb2:	613c      	str	r4, [r7, #16]
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	b003      	add	sp, #12
 8008fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	3b04      	subs	r3, #4
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	d1ce      	bne.n	8008f62 <quorem+0x9a>
 8008fc4:	3c01      	subs	r4, #1
 8008fc6:	e7c9      	b.n	8008f5c <quorem+0x94>
 8008fc8:	6812      	ldr	r2, [r2, #0]
 8008fca:	3b04      	subs	r3, #4
 8008fcc:	2a00      	cmp	r2, #0
 8008fce:	d1f0      	bne.n	8008fb2 <quorem+0xea>
 8008fd0:	3c01      	subs	r4, #1
 8008fd2:	e7eb      	b.n	8008fac <quorem+0xe4>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e7ee      	b.n	8008fb6 <quorem+0xee>

08008fd8 <_dtoa_r>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	ed2d 8b04 	vpush	{d8-d9}
 8008fe0:	69c5      	ldr	r5, [r0, #28]
 8008fe2:	b093      	sub	sp, #76	; 0x4c
 8008fe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008fe8:	ec57 6b10 	vmov	r6, r7, d0
 8008fec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ff0:	9107      	str	r1, [sp, #28]
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ff8:	b975      	cbnz	r5, 8009018 <_dtoa_r+0x40>
 8008ffa:	2010      	movs	r0, #16
 8008ffc:	f7fd ff22 	bl	8006e44 <malloc>
 8009000:	4602      	mov	r2, r0
 8009002:	61e0      	str	r0, [r4, #28]
 8009004:	b920      	cbnz	r0, 8009010 <_dtoa_r+0x38>
 8009006:	4bae      	ldr	r3, [pc, #696]	; (80092c0 <_dtoa_r+0x2e8>)
 8009008:	21ef      	movs	r1, #239	; 0xef
 800900a:	48ae      	ldr	r0, [pc, #696]	; (80092c4 <_dtoa_r+0x2ec>)
 800900c:	f7ff ff3e 	bl	8008e8c <__assert_func>
 8009010:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009014:	6005      	str	r5, [r0, #0]
 8009016:	60c5      	str	r5, [r0, #12]
 8009018:	69e3      	ldr	r3, [r4, #28]
 800901a:	6819      	ldr	r1, [r3, #0]
 800901c:	b151      	cbz	r1, 8009034 <_dtoa_r+0x5c>
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	604a      	str	r2, [r1, #4]
 8009022:	2301      	movs	r3, #1
 8009024:	4093      	lsls	r3, r2
 8009026:	608b      	str	r3, [r1, #8]
 8009028:	4620      	mov	r0, r4
 800902a:	f001 f9bd 	bl	800a3a8 <_Bfree>
 800902e:	69e3      	ldr	r3, [r4, #28]
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	1e3b      	subs	r3, r7, #0
 8009036:	bfbb      	ittet	lt
 8009038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800903c:	9303      	strlt	r3, [sp, #12]
 800903e:	2300      	movge	r3, #0
 8009040:	2201      	movlt	r2, #1
 8009042:	bfac      	ite	ge
 8009044:	f8c8 3000 	strge.w	r3, [r8]
 8009048:	f8c8 2000 	strlt.w	r2, [r8]
 800904c:	4b9e      	ldr	r3, [pc, #632]	; (80092c8 <_dtoa_r+0x2f0>)
 800904e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009052:	ea33 0308 	bics.w	r3, r3, r8
 8009056:	d11b      	bne.n	8009090 <_dtoa_r+0xb8>
 8009058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800905a:	f242 730f 	movw	r3, #9999	; 0x270f
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009064:	4333      	orrs	r3, r6
 8009066:	f000 8593 	beq.w	8009b90 <_dtoa_r+0xbb8>
 800906a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800906c:	b963      	cbnz	r3, 8009088 <_dtoa_r+0xb0>
 800906e:	4b97      	ldr	r3, [pc, #604]	; (80092cc <_dtoa_r+0x2f4>)
 8009070:	e027      	b.n	80090c2 <_dtoa_r+0xea>
 8009072:	4b97      	ldr	r3, [pc, #604]	; (80092d0 <_dtoa_r+0x2f8>)
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	9800      	ldr	r0, [sp, #0]
 800907e:	b013      	add	sp, #76	; 0x4c
 8009080:	ecbd 8b04 	vpop	{d8-d9}
 8009084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009088:	4b90      	ldr	r3, [pc, #576]	; (80092cc <_dtoa_r+0x2f4>)
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	3303      	adds	r3, #3
 800908e:	e7f3      	b.n	8009078 <_dtoa_r+0xa0>
 8009090:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009094:	2200      	movs	r2, #0
 8009096:	ec51 0b17 	vmov	r0, r1, d7
 800909a:	eeb0 8a47 	vmov.f32	s16, s14
 800909e:	eef0 8a67 	vmov.f32	s17, s15
 80090a2:	2300      	movs	r3, #0
 80090a4:	f7f7 fd18 	bl	8000ad8 <__aeabi_dcmpeq>
 80090a8:	4681      	mov	r9, r0
 80090aa:	b160      	cbz	r0, 80090c6 <_dtoa_r+0xee>
 80090ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090ae:	2301      	movs	r3, #1
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8568 	beq.w	8009b8a <_dtoa_r+0xbb2>
 80090ba:	4b86      	ldr	r3, [pc, #536]	; (80092d4 <_dtoa_r+0x2fc>)
 80090bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	e7da      	b.n	800907c <_dtoa_r+0xa4>
 80090c6:	aa10      	add	r2, sp, #64	; 0x40
 80090c8:	a911      	add	r1, sp, #68	; 0x44
 80090ca:	4620      	mov	r0, r4
 80090cc:	eeb0 0a48 	vmov.f32	s0, s16
 80090d0:	eef0 0a68 	vmov.f32	s1, s17
 80090d4:	f001 fd04 	bl	800aae0 <__d2b>
 80090d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80090dc:	4682      	mov	sl, r0
 80090de:	2d00      	cmp	r5, #0
 80090e0:	d07f      	beq.n	80091e2 <_dtoa_r+0x20a>
 80090e2:	ee18 3a90 	vmov	r3, s17
 80090e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80090ee:	ec51 0b18 	vmov	r0, r1, d8
 80090f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80090f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80090fe:	4619      	mov	r1, r3
 8009100:	2200      	movs	r2, #0
 8009102:	4b75      	ldr	r3, [pc, #468]	; (80092d8 <_dtoa_r+0x300>)
 8009104:	f7f7 f8c8 	bl	8000298 <__aeabi_dsub>
 8009108:	a367      	add	r3, pc, #412	; (adr r3, 80092a8 <_dtoa_r+0x2d0>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 fa7b 	bl	8000608 <__aeabi_dmul>
 8009112:	a367      	add	r3, pc, #412	; (adr r3, 80092b0 <_dtoa_r+0x2d8>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 f8c0 	bl	800029c <__adddf3>
 800911c:	4606      	mov	r6, r0
 800911e:	4628      	mov	r0, r5
 8009120:	460f      	mov	r7, r1
 8009122:	f7f7 fa07 	bl	8000534 <__aeabi_i2d>
 8009126:	a364      	add	r3, pc, #400	; (adr r3, 80092b8 <_dtoa_r+0x2e0>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 fa6c 	bl	8000608 <__aeabi_dmul>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4630      	mov	r0, r6
 8009136:	4639      	mov	r1, r7
 8009138:	f7f7 f8b0 	bl	800029c <__adddf3>
 800913c:	4606      	mov	r6, r0
 800913e:	460f      	mov	r7, r1
 8009140:	f7f7 fd12 	bl	8000b68 <__aeabi_d2iz>
 8009144:	2200      	movs	r2, #0
 8009146:	4683      	mov	fp, r0
 8009148:	2300      	movs	r3, #0
 800914a:	4630      	mov	r0, r6
 800914c:	4639      	mov	r1, r7
 800914e:	f7f7 fccd 	bl	8000aec <__aeabi_dcmplt>
 8009152:	b148      	cbz	r0, 8009168 <_dtoa_r+0x190>
 8009154:	4658      	mov	r0, fp
 8009156:	f7f7 f9ed 	bl	8000534 <__aeabi_i2d>
 800915a:	4632      	mov	r2, r6
 800915c:	463b      	mov	r3, r7
 800915e:	f7f7 fcbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009162:	b908      	cbnz	r0, 8009168 <_dtoa_r+0x190>
 8009164:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009168:	f1bb 0f16 	cmp.w	fp, #22
 800916c:	d857      	bhi.n	800921e <_dtoa_r+0x246>
 800916e:	4b5b      	ldr	r3, [pc, #364]	; (80092dc <_dtoa_r+0x304>)
 8009170:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	ec51 0b18 	vmov	r0, r1, d8
 800917c:	f7f7 fcb6 	bl	8000aec <__aeabi_dcmplt>
 8009180:	2800      	cmp	r0, #0
 8009182:	d04e      	beq.n	8009222 <_dtoa_r+0x24a>
 8009184:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009188:	2300      	movs	r3, #0
 800918a:	930c      	str	r3, [sp, #48]	; 0x30
 800918c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800918e:	1b5b      	subs	r3, r3, r5
 8009190:	1e5a      	subs	r2, r3, #1
 8009192:	bf45      	ittet	mi
 8009194:	f1c3 0301 	rsbmi	r3, r3, #1
 8009198:	9305      	strmi	r3, [sp, #20]
 800919a:	2300      	movpl	r3, #0
 800919c:	2300      	movmi	r3, #0
 800919e:	9206      	str	r2, [sp, #24]
 80091a0:	bf54      	ite	pl
 80091a2:	9305      	strpl	r3, [sp, #20]
 80091a4:	9306      	strmi	r3, [sp, #24]
 80091a6:	f1bb 0f00 	cmp.w	fp, #0
 80091aa:	db3c      	blt.n	8009226 <_dtoa_r+0x24e>
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80091b2:	445b      	add	r3, fp
 80091b4:	9306      	str	r3, [sp, #24]
 80091b6:	2300      	movs	r3, #0
 80091b8:	9308      	str	r3, [sp, #32]
 80091ba:	9b07      	ldr	r3, [sp, #28]
 80091bc:	2b09      	cmp	r3, #9
 80091be:	d868      	bhi.n	8009292 <_dtoa_r+0x2ba>
 80091c0:	2b05      	cmp	r3, #5
 80091c2:	bfc4      	itt	gt
 80091c4:	3b04      	subgt	r3, #4
 80091c6:	9307      	strgt	r3, [sp, #28]
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	f1a3 0302 	sub.w	r3, r3, #2
 80091ce:	bfcc      	ite	gt
 80091d0:	2500      	movgt	r5, #0
 80091d2:	2501      	movle	r5, #1
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	f200 8085 	bhi.w	80092e4 <_dtoa_r+0x30c>
 80091da:	e8df f003 	tbb	[pc, r3]
 80091de:	3b2e      	.short	0x3b2e
 80091e0:	5839      	.short	0x5839
 80091e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80091e6:	441d      	add	r5, r3
 80091e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	bfc1      	itttt	gt
 80091f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80091f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80091fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009200:	bfd6      	itet	le
 8009202:	f1c3 0320 	rsble	r3, r3, #32
 8009206:	ea48 0003 	orrgt.w	r0, r8, r3
 800920a:	fa06 f003 	lslle.w	r0, r6, r3
 800920e:	f7f7 f981 	bl	8000514 <__aeabi_ui2d>
 8009212:	2201      	movs	r2, #1
 8009214:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009218:	3d01      	subs	r5, #1
 800921a:	920e      	str	r2, [sp, #56]	; 0x38
 800921c:	e76f      	b.n	80090fe <_dtoa_r+0x126>
 800921e:	2301      	movs	r3, #1
 8009220:	e7b3      	b.n	800918a <_dtoa_r+0x1b2>
 8009222:	900c      	str	r0, [sp, #48]	; 0x30
 8009224:	e7b2      	b.n	800918c <_dtoa_r+0x1b4>
 8009226:	9b05      	ldr	r3, [sp, #20]
 8009228:	eba3 030b 	sub.w	r3, r3, fp
 800922c:	9305      	str	r3, [sp, #20]
 800922e:	f1cb 0300 	rsb	r3, fp, #0
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	2300      	movs	r3, #0
 8009236:	930b      	str	r3, [sp, #44]	; 0x2c
 8009238:	e7bf      	b.n	80091ba <_dtoa_r+0x1e2>
 800923a:	2300      	movs	r3, #0
 800923c:	9309      	str	r3, [sp, #36]	; 0x24
 800923e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	dc52      	bgt.n	80092ea <_dtoa_r+0x312>
 8009244:	2301      	movs	r3, #1
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	461a      	mov	r2, r3
 800924c:	920a      	str	r2, [sp, #40]	; 0x28
 800924e:	e00b      	b.n	8009268 <_dtoa_r+0x290>
 8009250:	2301      	movs	r3, #1
 8009252:	e7f3      	b.n	800923c <_dtoa_r+0x264>
 8009254:	2300      	movs	r3, #0
 8009256:	9309      	str	r3, [sp, #36]	; 0x24
 8009258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925a:	445b      	add	r3, fp
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	3301      	adds	r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	bfb8      	it	lt
 8009266:	2301      	movlt	r3, #1
 8009268:	69e0      	ldr	r0, [r4, #28]
 800926a:	2100      	movs	r1, #0
 800926c:	2204      	movs	r2, #4
 800926e:	f102 0614 	add.w	r6, r2, #20
 8009272:	429e      	cmp	r6, r3
 8009274:	d93d      	bls.n	80092f2 <_dtoa_r+0x31a>
 8009276:	6041      	str	r1, [r0, #4]
 8009278:	4620      	mov	r0, r4
 800927a:	f001 f855 	bl	800a328 <_Balloc>
 800927e:	9000      	str	r0, [sp, #0]
 8009280:	2800      	cmp	r0, #0
 8009282:	d139      	bne.n	80092f8 <_dtoa_r+0x320>
 8009284:	4b16      	ldr	r3, [pc, #88]	; (80092e0 <_dtoa_r+0x308>)
 8009286:	4602      	mov	r2, r0
 8009288:	f240 11af 	movw	r1, #431	; 0x1af
 800928c:	e6bd      	b.n	800900a <_dtoa_r+0x32>
 800928e:	2301      	movs	r3, #1
 8009290:	e7e1      	b.n	8009256 <_dtoa_r+0x27e>
 8009292:	2501      	movs	r5, #1
 8009294:	2300      	movs	r3, #0
 8009296:	9307      	str	r3, [sp, #28]
 8009298:	9509      	str	r5, [sp, #36]	; 0x24
 800929a:	f04f 33ff 	mov.w	r3, #4294967295
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	2200      	movs	r2, #0
 80092a4:	2312      	movs	r3, #18
 80092a6:	e7d1      	b.n	800924c <_dtoa_r+0x274>
 80092a8:	636f4361 	.word	0x636f4361
 80092ac:	3fd287a7 	.word	0x3fd287a7
 80092b0:	8b60c8b3 	.word	0x8b60c8b3
 80092b4:	3fc68a28 	.word	0x3fc68a28
 80092b8:	509f79fb 	.word	0x509f79fb
 80092bc:	3fd34413 	.word	0x3fd34413
 80092c0:	0800ba3a 	.word	0x0800ba3a
 80092c4:	0800ba51 	.word	0x0800ba51
 80092c8:	7ff00000 	.word	0x7ff00000
 80092cc:	0800ba36 	.word	0x0800ba36
 80092d0:	0800ba2d 	.word	0x0800ba2d
 80092d4:	0800b9c1 	.word	0x0800b9c1
 80092d8:	3ff80000 	.word	0x3ff80000
 80092dc:	0800bba0 	.word	0x0800bba0
 80092e0:	0800baa9 	.word	0x0800baa9
 80092e4:	2301      	movs	r3, #1
 80092e6:	9309      	str	r3, [sp, #36]	; 0x24
 80092e8:	e7d7      	b.n	800929a <_dtoa_r+0x2c2>
 80092ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	e7ba      	b.n	8009268 <_dtoa_r+0x290>
 80092f2:	3101      	adds	r1, #1
 80092f4:	0052      	lsls	r2, r2, #1
 80092f6:	e7ba      	b.n	800926e <_dtoa_r+0x296>
 80092f8:	69e3      	ldr	r3, [r4, #28]
 80092fa:	9a00      	ldr	r2, [sp, #0]
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	2b0e      	cmp	r3, #14
 8009302:	f200 80a8 	bhi.w	8009456 <_dtoa_r+0x47e>
 8009306:	2d00      	cmp	r5, #0
 8009308:	f000 80a5 	beq.w	8009456 <_dtoa_r+0x47e>
 800930c:	f1bb 0f00 	cmp.w	fp, #0
 8009310:	dd38      	ble.n	8009384 <_dtoa_r+0x3ac>
 8009312:	4bc0      	ldr	r3, [pc, #768]	; (8009614 <_dtoa_r+0x63c>)
 8009314:	f00b 020f 	and.w	r2, fp, #15
 8009318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800931c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009320:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009324:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009328:	d019      	beq.n	800935e <_dtoa_r+0x386>
 800932a:	4bbb      	ldr	r3, [pc, #748]	; (8009618 <_dtoa_r+0x640>)
 800932c:	ec51 0b18 	vmov	r0, r1, d8
 8009330:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009334:	f7f7 fa92 	bl	800085c <__aeabi_ddiv>
 8009338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800933c:	f008 080f 	and.w	r8, r8, #15
 8009340:	2503      	movs	r5, #3
 8009342:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009618 <_dtoa_r+0x640>
 8009346:	f1b8 0f00 	cmp.w	r8, #0
 800934a:	d10a      	bne.n	8009362 <_dtoa_r+0x38a>
 800934c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009350:	4632      	mov	r2, r6
 8009352:	463b      	mov	r3, r7
 8009354:	f7f7 fa82 	bl	800085c <__aeabi_ddiv>
 8009358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800935c:	e02b      	b.n	80093b6 <_dtoa_r+0x3de>
 800935e:	2502      	movs	r5, #2
 8009360:	e7ef      	b.n	8009342 <_dtoa_r+0x36a>
 8009362:	f018 0f01 	tst.w	r8, #1
 8009366:	d008      	beq.n	800937a <_dtoa_r+0x3a2>
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009370:	f7f7 f94a 	bl	8000608 <__aeabi_dmul>
 8009374:	3501      	adds	r5, #1
 8009376:	4606      	mov	r6, r0
 8009378:	460f      	mov	r7, r1
 800937a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800937e:	f109 0908 	add.w	r9, r9, #8
 8009382:	e7e0      	b.n	8009346 <_dtoa_r+0x36e>
 8009384:	f000 809f 	beq.w	80094c6 <_dtoa_r+0x4ee>
 8009388:	f1cb 0600 	rsb	r6, fp, #0
 800938c:	4ba1      	ldr	r3, [pc, #644]	; (8009614 <_dtoa_r+0x63c>)
 800938e:	4fa2      	ldr	r7, [pc, #648]	; (8009618 <_dtoa_r+0x640>)
 8009390:	f006 020f 	and.w	r2, r6, #15
 8009394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	ec51 0b18 	vmov	r0, r1, d8
 80093a0:	f7f7 f932 	bl	8000608 <__aeabi_dmul>
 80093a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a8:	1136      	asrs	r6, r6, #4
 80093aa:	2300      	movs	r3, #0
 80093ac:	2502      	movs	r5, #2
 80093ae:	2e00      	cmp	r6, #0
 80093b0:	d17e      	bne.n	80094b0 <_dtoa_r+0x4d8>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1d0      	bne.n	8009358 <_dtoa_r+0x380>
 80093b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8084 	beq.w	80094ca <_dtoa_r+0x4f2>
 80093c2:	4b96      	ldr	r3, [pc, #600]	; (800961c <_dtoa_r+0x644>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	f7f7 fb8f 	bl	8000aec <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d07b      	beq.n	80094ca <_dtoa_r+0x4f2>
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d078      	beq.n	80094ca <_dtoa_r+0x4f2>
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	dd39      	ble.n	8009452 <_dtoa_r+0x47a>
 80093de:	4b90      	ldr	r3, [pc, #576]	; (8009620 <_dtoa_r+0x648>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	4640      	mov	r0, r8
 80093e4:	4649      	mov	r1, r9
 80093e6:	f7f7 f90f 	bl	8000608 <__aeabi_dmul>
 80093ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093ee:	9e01      	ldr	r6, [sp, #4]
 80093f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80093f4:	3501      	adds	r5, #1
 80093f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80093fa:	4628      	mov	r0, r5
 80093fc:	f7f7 f89a 	bl	8000534 <__aeabi_i2d>
 8009400:	4642      	mov	r2, r8
 8009402:	464b      	mov	r3, r9
 8009404:	f7f7 f900 	bl	8000608 <__aeabi_dmul>
 8009408:	4b86      	ldr	r3, [pc, #536]	; (8009624 <_dtoa_r+0x64c>)
 800940a:	2200      	movs	r2, #0
 800940c:	f7f6 ff46 	bl	800029c <__adddf3>
 8009410:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009418:	9303      	str	r3, [sp, #12]
 800941a:	2e00      	cmp	r6, #0
 800941c:	d158      	bne.n	80094d0 <_dtoa_r+0x4f8>
 800941e:	4b82      	ldr	r3, [pc, #520]	; (8009628 <_dtoa_r+0x650>)
 8009420:	2200      	movs	r2, #0
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f6 ff37 	bl	8000298 <__aeabi_dsub>
 800942a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800942e:	4680      	mov	r8, r0
 8009430:	4689      	mov	r9, r1
 8009432:	f7f7 fb79 	bl	8000b28 <__aeabi_dcmpgt>
 8009436:	2800      	cmp	r0, #0
 8009438:	f040 8296 	bne.w	8009968 <_dtoa_r+0x990>
 800943c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009440:	4640      	mov	r0, r8
 8009442:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009446:	4649      	mov	r1, r9
 8009448:	f7f7 fb50 	bl	8000aec <__aeabi_dcmplt>
 800944c:	2800      	cmp	r0, #0
 800944e:	f040 8289 	bne.w	8009964 <_dtoa_r+0x98c>
 8009452:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009458:	2b00      	cmp	r3, #0
 800945a:	f2c0 814e 	blt.w	80096fa <_dtoa_r+0x722>
 800945e:	f1bb 0f0e 	cmp.w	fp, #14
 8009462:	f300 814a 	bgt.w	80096fa <_dtoa_r+0x722>
 8009466:	4b6b      	ldr	r3, [pc, #428]	; (8009614 <_dtoa_r+0x63c>)
 8009468:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800946c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	f280 80dc 	bge.w	8009630 <_dtoa_r+0x658>
 8009478:	9b04      	ldr	r3, [sp, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f300 80d8 	bgt.w	8009630 <_dtoa_r+0x658>
 8009480:	f040 826f 	bne.w	8009962 <_dtoa_r+0x98a>
 8009484:	4b68      	ldr	r3, [pc, #416]	; (8009628 <_dtoa_r+0x650>)
 8009486:	2200      	movs	r2, #0
 8009488:	4640      	mov	r0, r8
 800948a:	4649      	mov	r1, r9
 800948c:	f7f7 f8bc 	bl	8000608 <__aeabi_dmul>
 8009490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009494:	f7f7 fb3e 	bl	8000b14 <__aeabi_dcmpge>
 8009498:	9e04      	ldr	r6, [sp, #16]
 800949a:	4637      	mov	r7, r6
 800949c:	2800      	cmp	r0, #0
 800949e:	f040 8245 	bne.w	800992c <_dtoa_r+0x954>
 80094a2:	9d00      	ldr	r5, [sp, #0]
 80094a4:	2331      	movs	r3, #49	; 0x31
 80094a6:	f805 3b01 	strb.w	r3, [r5], #1
 80094aa:	f10b 0b01 	add.w	fp, fp, #1
 80094ae:	e241      	b.n	8009934 <_dtoa_r+0x95c>
 80094b0:	07f2      	lsls	r2, r6, #31
 80094b2:	d505      	bpl.n	80094c0 <_dtoa_r+0x4e8>
 80094b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b8:	f7f7 f8a6 	bl	8000608 <__aeabi_dmul>
 80094bc:	3501      	adds	r5, #1
 80094be:	2301      	movs	r3, #1
 80094c0:	1076      	asrs	r6, r6, #1
 80094c2:	3708      	adds	r7, #8
 80094c4:	e773      	b.n	80093ae <_dtoa_r+0x3d6>
 80094c6:	2502      	movs	r5, #2
 80094c8:	e775      	b.n	80093b6 <_dtoa_r+0x3de>
 80094ca:	9e04      	ldr	r6, [sp, #16]
 80094cc:	465f      	mov	r7, fp
 80094ce:	e792      	b.n	80093f6 <_dtoa_r+0x41e>
 80094d0:	9900      	ldr	r1, [sp, #0]
 80094d2:	4b50      	ldr	r3, [pc, #320]	; (8009614 <_dtoa_r+0x63c>)
 80094d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094d8:	4431      	add	r1, r6
 80094da:	9102      	str	r1, [sp, #8]
 80094dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094de:	eeb0 9a47 	vmov.f32	s18, s14
 80094e2:	eef0 9a67 	vmov.f32	s19, s15
 80094e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d044      	beq.n	800957c <_dtoa_r+0x5a4>
 80094f2:	494e      	ldr	r1, [pc, #312]	; (800962c <_dtoa_r+0x654>)
 80094f4:	2000      	movs	r0, #0
 80094f6:	f7f7 f9b1 	bl	800085c <__aeabi_ddiv>
 80094fa:	ec53 2b19 	vmov	r2, r3, d9
 80094fe:	f7f6 fecb 	bl	8000298 <__aeabi_dsub>
 8009502:	9d00      	ldr	r5, [sp, #0]
 8009504:	ec41 0b19 	vmov	d9, r0, r1
 8009508:	4649      	mov	r1, r9
 800950a:	4640      	mov	r0, r8
 800950c:	f7f7 fb2c 	bl	8000b68 <__aeabi_d2iz>
 8009510:	4606      	mov	r6, r0
 8009512:	f7f7 f80f 	bl	8000534 <__aeabi_i2d>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4640      	mov	r0, r8
 800951c:	4649      	mov	r1, r9
 800951e:	f7f6 febb 	bl	8000298 <__aeabi_dsub>
 8009522:	3630      	adds	r6, #48	; 0x30
 8009524:	f805 6b01 	strb.w	r6, [r5], #1
 8009528:	ec53 2b19 	vmov	r2, r3, d9
 800952c:	4680      	mov	r8, r0
 800952e:	4689      	mov	r9, r1
 8009530:	f7f7 fadc 	bl	8000aec <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	d164      	bne.n	8009602 <_dtoa_r+0x62a>
 8009538:	4642      	mov	r2, r8
 800953a:	464b      	mov	r3, r9
 800953c:	4937      	ldr	r1, [pc, #220]	; (800961c <_dtoa_r+0x644>)
 800953e:	2000      	movs	r0, #0
 8009540:	f7f6 feaa 	bl	8000298 <__aeabi_dsub>
 8009544:	ec53 2b19 	vmov	r2, r3, d9
 8009548:	f7f7 fad0 	bl	8000aec <__aeabi_dcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	f040 80b6 	bne.w	80096be <_dtoa_r+0x6e6>
 8009552:	9b02      	ldr	r3, [sp, #8]
 8009554:	429d      	cmp	r5, r3
 8009556:	f43f af7c 	beq.w	8009452 <_dtoa_r+0x47a>
 800955a:	4b31      	ldr	r3, [pc, #196]	; (8009620 <_dtoa_r+0x648>)
 800955c:	ec51 0b19 	vmov	r0, r1, d9
 8009560:	2200      	movs	r2, #0
 8009562:	f7f7 f851 	bl	8000608 <__aeabi_dmul>
 8009566:	4b2e      	ldr	r3, [pc, #184]	; (8009620 <_dtoa_r+0x648>)
 8009568:	ec41 0b19 	vmov	d9, r0, r1
 800956c:	2200      	movs	r2, #0
 800956e:	4640      	mov	r0, r8
 8009570:	4649      	mov	r1, r9
 8009572:	f7f7 f849 	bl	8000608 <__aeabi_dmul>
 8009576:	4680      	mov	r8, r0
 8009578:	4689      	mov	r9, r1
 800957a:	e7c5      	b.n	8009508 <_dtoa_r+0x530>
 800957c:	ec51 0b17 	vmov	r0, r1, d7
 8009580:	f7f7 f842 	bl	8000608 <__aeabi_dmul>
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	9d00      	ldr	r5, [sp, #0]
 8009588:	930f      	str	r3, [sp, #60]	; 0x3c
 800958a:	ec41 0b19 	vmov	d9, r0, r1
 800958e:	4649      	mov	r1, r9
 8009590:	4640      	mov	r0, r8
 8009592:	f7f7 fae9 	bl	8000b68 <__aeabi_d2iz>
 8009596:	4606      	mov	r6, r0
 8009598:	f7f6 ffcc 	bl	8000534 <__aeabi_i2d>
 800959c:	3630      	adds	r6, #48	; 0x30
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	f7f6 fe77 	bl	8000298 <__aeabi_dsub>
 80095aa:	f805 6b01 	strb.w	r6, [r5], #1
 80095ae:	9b02      	ldr	r3, [sp, #8]
 80095b0:	429d      	cmp	r5, r3
 80095b2:	4680      	mov	r8, r0
 80095b4:	4689      	mov	r9, r1
 80095b6:	f04f 0200 	mov.w	r2, #0
 80095ba:	d124      	bne.n	8009606 <_dtoa_r+0x62e>
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <_dtoa_r+0x654>)
 80095be:	ec51 0b19 	vmov	r0, r1, d9
 80095c2:	f7f6 fe6b 	bl	800029c <__adddf3>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f7 faab 	bl	8000b28 <__aeabi_dcmpgt>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d173      	bne.n	80096be <_dtoa_r+0x6e6>
 80095d6:	ec53 2b19 	vmov	r2, r3, d9
 80095da:	4914      	ldr	r1, [pc, #80]	; (800962c <_dtoa_r+0x654>)
 80095dc:	2000      	movs	r0, #0
 80095de:	f7f6 fe5b 	bl	8000298 <__aeabi_dsub>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4640      	mov	r0, r8
 80095e8:	4649      	mov	r1, r9
 80095ea:	f7f7 fa7f 	bl	8000aec <__aeabi_dcmplt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f43f af2f 	beq.w	8009452 <_dtoa_r+0x47a>
 80095f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80095f6:	1e6b      	subs	r3, r5, #1
 80095f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80095fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095fe:	2b30      	cmp	r3, #48	; 0x30
 8009600:	d0f8      	beq.n	80095f4 <_dtoa_r+0x61c>
 8009602:	46bb      	mov	fp, r7
 8009604:	e04a      	b.n	800969c <_dtoa_r+0x6c4>
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <_dtoa_r+0x648>)
 8009608:	f7f6 fffe 	bl	8000608 <__aeabi_dmul>
 800960c:	4680      	mov	r8, r0
 800960e:	4689      	mov	r9, r1
 8009610:	e7bd      	b.n	800958e <_dtoa_r+0x5b6>
 8009612:	bf00      	nop
 8009614:	0800bba0 	.word	0x0800bba0
 8009618:	0800bb78 	.word	0x0800bb78
 800961c:	3ff00000 	.word	0x3ff00000
 8009620:	40240000 	.word	0x40240000
 8009624:	401c0000 	.word	0x401c0000
 8009628:	40140000 	.word	0x40140000
 800962c:	3fe00000 	.word	0x3fe00000
 8009630:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009634:	9d00      	ldr	r5, [sp, #0]
 8009636:	4642      	mov	r2, r8
 8009638:	464b      	mov	r3, r9
 800963a:	4630      	mov	r0, r6
 800963c:	4639      	mov	r1, r7
 800963e:	f7f7 f90d 	bl	800085c <__aeabi_ddiv>
 8009642:	f7f7 fa91 	bl	8000b68 <__aeabi_d2iz>
 8009646:	9001      	str	r0, [sp, #4]
 8009648:	f7f6 ff74 	bl	8000534 <__aeabi_i2d>
 800964c:	4642      	mov	r2, r8
 800964e:	464b      	mov	r3, r9
 8009650:	f7f6 ffda 	bl	8000608 <__aeabi_dmul>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f6 fe1c 	bl	8000298 <__aeabi_dsub>
 8009660:	9e01      	ldr	r6, [sp, #4]
 8009662:	9f04      	ldr	r7, [sp, #16]
 8009664:	3630      	adds	r6, #48	; 0x30
 8009666:	f805 6b01 	strb.w	r6, [r5], #1
 800966a:	9e00      	ldr	r6, [sp, #0]
 800966c:	1bae      	subs	r6, r5, r6
 800966e:	42b7      	cmp	r7, r6
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	d134      	bne.n	80096e0 <_dtoa_r+0x708>
 8009676:	f7f6 fe11 	bl	800029c <__adddf3>
 800967a:	4642      	mov	r2, r8
 800967c:	464b      	mov	r3, r9
 800967e:	4606      	mov	r6, r0
 8009680:	460f      	mov	r7, r1
 8009682:	f7f7 fa51 	bl	8000b28 <__aeabi_dcmpgt>
 8009686:	b9c8      	cbnz	r0, 80096bc <_dtoa_r+0x6e4>
 8009688:	4642      	mov	r2, r8
 800968a:	464b      	mov	r3, r9
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f7 fa22 	bl	8000ad8 <__aeabi_dcmpeq>
 8009694:	b110      	cbz	r0, 800969c <_dtoa_r+0x6c4>
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	07db      	lsls	r3, r3, #31
 800969a:	d40f      	bmi.n	80096bc <_dtoa_r+0x6e4>
 800969c:	4651      	mov	r1, sl
 800969e:	4620      	mov	r0, r4
 80096a0:	f000 fe82 	bl	800a3a8 <_Bfree>
 80096a4:	2300      	movs	r3, #0
 80096a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096a8:	702b      	strb	r3, [r5, #0]
 80096aa:	f10b 0301 	add.w	r3, fp, #1
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f43f ace2 	beq.w	800907c <_dtoa_r+0xa4>
 80096b8:	601d      	str	r5, [r3, #0]
 80096ba:	e4df      	b.n	800907c <_dtoa_r+0xa4>
 80096bc:	465f      	mov	r7, fp
 80096be:	462b      	mov	r3, r5
 80096c0:	461d      	mov	r5, r3
 80096c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096c6:	2a39      	cmp	r2, #57	; 0x39
 80096c8:	d106      	bne.n	80096d8 <_dtoa_r+0x700>
 80096ca:	9a00      	ldr	r2, [sp, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d1f7      	bne.n	80096c0 <_dtoa_r+0x6e8>
 80096d0:	9900      	ldr	r1, [sp, #0]
 80096d2:	2230      	movs	r2, #48	; 0x30
 80096d4:	3701      	adds	r7, #1
 80096d6:	700a      	strb	r2, [r1, #0]
 80096d8:	781a      	ldrb	r2, [r3, #0]
 80096da:	3201      	adds	r2, #1
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	e790      	b.n	8009602 <_dtoa_r+0x62a>
 80096e0:	4ba3      	ldr	r3, [pc, #652]	; (8009970 <_dtoa_r+0x998>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	f7f6 ff90 	bl	8000608 <__aeabi_dmul>
 80096e8:	2200      	movs	r2, #0
 80096ea:	2300      	movs	r3, #0
 80096ec:	4606      	mov	r6, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	f7f7 f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d09e      	beq.n	8009636 <_dtoa_r+0x65e>
 80096f8:	e7d0      	b.n	800969c <_dtoa_r+0x6c4>
 80096fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fc:	2a00      	cmp	r2, #0
 80096fe:	f000 80ca 	beq.w	8009896 <_dtoa_r+0x8be>
 8009702:	9a07      	ldr	r2, [sp, #28]
 8009704:	2a01      	cmp	r2, #1
 8009706:	f300 80ad 	bgt.w	8009864 <_dtoa_r+0x88c>
 800970a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800970c:	2a00      	cmp	r2, #0
 800970e:	f000 80a5 	beq.w	800985c <_dtoa_r+0x884>
 8009712:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009716:	9e08      	ldr	r6, [sp, #32]
 8009718:	9d05      	ldr	r5, [sp, #20]
 800971a:	9a05      	ldr	r2, [sp, #20]
 800971c:	441a      	add	r2, r3
 800971e:	9205      	str	r2, [sp, #20]
 8009720:	9a06      	ldr	r2, [sp, #24]
 8009722:	2101      	movs	r1, #1
 8009724:	441a      	add	r2, r3
 8009726:	4620      	mov	r0, r4
 8009728:	9206      	str	r2, [sp, #24]
 800972a:	f000 ff3d 	bl	800a5a8 <__i2b>
 800972e:	4607      	mov	r7, r0
 8009730:	b165      	cbz	r5, 800974c <_dtoa_r+0x774>
 8009732:	9b06      	ldr	r3, [sp, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	dd09      	ble.n	800974c <_dtoa_r+0x774>
 8009738:	42ab      	cmp	r3, r5
 800973a:	9a05      	ldr	r2, [sp, #20]
 800973c:	bfa8      	it	ge
 800973e:	462b      	movge	r3, r5
 8009740:	1ad2      	subs	r2, r2, r3
 8009742:	9205      	str	r2, [sp, #20]
 8009744:	9a06      	ldr	r2, [sp, #24]
 8009746:	1aed      	subs	r5, r5, r3
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	9306      	str	r3, [sp, #24]
 800974c:	9b08      	ldr	r3, [sp, #32]
 800974e:	b1f3      	cbz	r3, 800978e <_dtoa_r+0x7b6>
 8009750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80a3 	beq.w	800989e <_dtoa_r+0x8c6>
 8009758:	2e00      	cmp	r6, #0
 800975a:	dd10      	ble.n	800977e <_dtoa_r+0x7a6>
 800975c:	4639      	mov	r1, r7
 800975e:	4632      	mov	r2, r6
 8009760:	4620      	mov	r0, r4
 8009762:	f000 ffe1 	bl	800a728 <__pow5mult>
 8009766:	4652      	mov	r2, sl
 8009768:	4601      	mov	r1, r0
 800976a:	4607      	mov	r7, r0
 800976c:	4620      	mov	r0, r4
 800976e:	f000 ff31 	bl	800a5d4 <__multiply>
 8009772:	4651      	mov	r1, sl
 8009774:	4680      	mov	r8, r0
 8009776:	4620      	mov	r0, r4
 8009778:	f000 fe16 	bl	800a3a8 <_Bfree>
 800977c:	46c2      	mov	sl, r8
 800977e:	9b08      	ldr	r3, [sp, #32]
 8009780:	1b9a      	subs	r2, r3, r6
 8009782:	d004      	beq.n	800978e <_dtoa_r+0x7b6>
 8009784:	4651      	mov	r1, sl
 8009786:	4620      	mov	r0, r4
 8009788:	f000 ffce 	bl	800a728 <__pow5mult>
 800978c:	4682      	mov	sl, r0
 800978e:	2101      	movs	r1, #1
 8009790:	4620      	mov	r0, r4
 8009792:	f000 ff09 	bl	800a5a8 <__i2b>
 8009796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009798:	2b00      	cmp	r3, #0
 800979a:	4606      	mov	r6, r0
 800979c:	f340 8081 	ble.w	80098a2 <_dtoa_r+0x8ca>
 80097a0:	461a      	mov	r2, r3
 80097a2:	4601      	mov	r1, r0
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 ffbf 	bl	800a728 <__pow5mult>
 80097aa:	9b07      	ldr	r3, [sp, #28]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	4606      	mov	r6, r0
 80097b0:	dd7a      	ble.n	80098a8 <_dtoa_r+0x8d0>
 80097b2:	f04f 0800 	mov.w	r8, #0
 80097b6:	6933      	ldr	r3, [r6, #16]
 80097b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097bc:	6918      	ldr	r0, [r3, #16]
 80097be:	f000 fea5 	bl	800a50c <__hi0bits>
 80097c2:	f1c0 0020 	rsb	r0, r0, #32
 80097c6:	9b06      	ldr	r3, [sp, #24]
 80097c8:	4418      	add	r0, r3
 80097ca:	f010 001f 	ands.w	r0, r0, #31
 80097ce:	f000 8094 	beq.w	80098fa <_dtoa_r+0x922>
 80097d2:	f1c0 0320 	rsb	r3, r0, #32
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	f340 8085 	ble.w	80098e6 <_dtoa_r+0x90e>
 80097dc:	9b05      	ldr	r3, [sp, #20]
 80097de:	f1c0 001c 	rsb	r0, r0, #28
 80097e2:	4403      	add	r3, r0
 80097e4:	9305      	str	r3, [sp, #20]
 80097e6:	9b06      	ldr	r3, [sp, #24]
 80097e8:	4403      	add	r3, r0
 80097ea:	4405      	add	r5, r0
 80097ec:	9306      	str	r3, [sp, #24]
 80097ee:	9b05      	ldr	r3, [sp, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dd05      	ble.n	8009800 <_dtoa_r+0x828>
 80097f4:	4651      	mov	r1, sl
 80097f6:	461a      	mov	r2, r3
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 ffef 	bl	800a7dc <__lshift>
 80097fe:	4682      	mov	sl, r0
 8009800:	9b06      	ldr	r3, [sp, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd05      	ble.n	8009812 <_dtoa_r+0x83a>
 8009806:	4631      	mov	r1, r6
 8009808:	461a      	mov	r2, r3
 800980a:	4620      	mov	r0, r4
 800980c:	f000 ffe6 	bl	800a7dc <__lshift>
 8009810:	4606      	mov	r6, r0
 8009812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009814:	2b00      	cmp	r3, #0
 8009816:	d072      	beq.n	80098fe <_dtoa_r+0x926>
 8009818:	4631      	mov	r1, r6
 800981a:	4650      	mov	r0, sl
 800981c:	f001 f84a 	bl	800a8b4 <__mcmp>
 8009820:	2800      	cmp	r0, #0
 8009822:	da6c      	bge.n	80098fe <_dtoa_r+0x926>
 8009824:	2300      	movs	r3, #0
 8009826:	4651      	mov	r1, sl
 8009828:	220a      	movs	r2, #10
 800982a:	4620      	mov	r0, r4
 800982c:	f000 fdde 	bl	800a3ec <__multadd>
 8009830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009832:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009836:	4682      	mov	sl, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 81b0 	beq.w	8009b9e <_dtoa_r+0xbc6>
 800983e:	2300      	movs	r3, #0
 8009840:	4639      	mov	r1, r7
 8009842:	220a      	movs	r2, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f000 fdd1 	bl	800a3ec <__multadd>
 800984a:	9b01      	ldr	r3, [sp, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	4607      	mov	r7, r0
 8009850:	f300 8096 	bgt.w	8009980 <_dtoa_r+0x9a8>
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	2b02      	cmp	r3, #2
 8009858:	dc59      	bgt.n	800990e <_dtoa_r+0x936>
 800985a:	e091      	b.n	8009980 <_dtoa_r+0x9a8>
 800985c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800985e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009862:	e758      	b.n	8009716 <_dtoa_r+0x73e>
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	1e5e      	subs	r6, r3, #1
 8009868:	9b08      	ldr	r3, [sp, #32]
 800986a:	42b3      	cmp	r3, r6
 800986c:	bfbf      	itttt	lt
 800986e:	9b08      	ldrlt	r3, [sp, #32]
 8009870:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009872:	9608      	strlt	r6, [sp, #32]
 8009874:	1af3      	sublt	r3, r6, r3
 8009876:	bfb4      	ite	lt
 8009878:	18d2      	addlt	r2, r2, r3
 800987a:	1b9e      	subge	r6, r3, r6
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	bfbc      	itt	lt
 8009880:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009882:	2600      	movlt	r6, #0
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfb7      	itett	lt
 8009888:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800988c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009890:	1a9d      	sublt	r5, r3, r2
 8009892:	2300      	movlt	r3, #0
 8009894:	e741      	b.n	800971a <_dtoa_r+0x742>
 8009896:	9e08      	ldr	r6, [sp, #32]
 8009898:	9d05      	ldr	r5, [sp, #20]
 800989a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800989c:	e748      	b.n	8009730 <_dtoa_r+0x758>
 800989e:	9a08      	ldr	r2, [sp, #32]
 80098a0:	e770      	b.n	8009784 <_dtoa_r+0x7ac>
 80098a2:	9b07      	ldr	r3, [sp, #28]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	dc19      	bgt.n	80098dc <_dtoa_r+0x904>
 80098a8:	9b02      	ldr	r3, [sp, #8]
 80098aa:	b9bb      	cbnz	r3, 80098dc <_dtoa_r+0x904>
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b2:	b99b      	cbnz	r3, 80098dc <_dtoa_r+0x904>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098ba:	0d1b      	lsrs	r3, r3, #20
 80098bc:	051b      	lsls	r3, r3, #20
 80098be:	b183      	cbz	r3, 80098e2 <_dtoa_r+0x90a>
 80098c0:	9b05      	ldr	r3, [sp, #20]
 80098c2:	3301      	adds	r3, #1
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	9b06      	ldr	r3, [sp, #24]
 80098c8:	3301      	adds	r3, #1
 80098ca:	9306      	str	r3, [sp, #24]
 80098cc:	f04f 0801 	mov.w	r8, #1
 80098d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f47f af6f 	bne.w	80097b6 <_dtoa_r+0x7de>
 80098d8:	2001      	movs	r0, #1
 80098da:	e774      	b.n	80097c6 <_dtoa_r+0x7ee>
 80098dc:	f04f 0800 	mov.w	r8, #0
 80098e0:	e7f6      	b.n	80098d0 <_dtoa_r+0x8f8>
 80098e2:	4698      	mov	r8, r3
 80098e4:	e7f4      	b.n	80098d0 <_dtoa_r+0x8f8>
 80098e6:	d082      	beq.n	80097ee <_dtoa_r+0x816>
 80098e8:	9a05      	ldr	r2, [sp, #20]
 80098ea:	331c      	adds	r3, #28
 80098ec:	441a      	add	r2, r3
 80098ee:	9205      	str	r2, [sp, #20]
 80098f0:	9a06      	ldr	r2, [sp, #24]
 80098f2:	441a      	add	r2, r3
 80098f4:	441d      	add	r5, r3
 80098f6:	9206      	str	r2, [sp, #24]
 80098f8:	e779      	b.n	80097ee <_dtoa_r+0x816>
 80098fa:	4603      	mov	r3, r0
 80098fc:	e7f4      	b.n	80098e8 <_dtoa_r+0x910>
 80098fe:	9b04      	ldr	r3, [sp, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	dc37      	bgt.n	8009974 <_dtoa_r+0x99c>
 8009904:	9b07      	ldr	r3, [sp, #28]
 8009906:	2b02      	cmp	r3, #2
 8009908:	dd34      	ble.n	8009974 <_dtoa_r+0x99c>
 800990a:	9b04      	ldr	r3, [sp, #16]
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	b963      	cbnz	r3, 800992c <_dtoa_r+0x954>
 8009912:	4631      	mov	r1, r6
 8009914:	2205      	movs	r2, #5
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fd68 	bl	800a3ec <__multadd>
 800991c:	4601      	mov	r1, r0
 800991e:	4606      	mov	r6, r0
 8009920:	4650      	mov	r0, sl
 8009922:	f000 ffc7 	bl	800a8b4 <__mcmp>
 8009926:	2800      	cmp	r0, #0
 8009928:	f73f adbb 	bgt.w	80094a2 <_dtoa_r+0x4ca>
 800992c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992e:	9d00      	ldr	r5, [sp, #0]
 8009930:	ea6f 0b03 	mvn.w	fp, r3
 8009934:	f04f 0800 	mov.w	r8, #0
 8009938:	4631      	mov	r1, r6
 800993a:	4620      	mov	r0, r4
 800993c:	f000 fd34 	bl	800a3a8 <_Bfree>
 8009940:	2f00      	cmp	r7, #0
 8009942:	f43f aeab 	beq.w	800969c <_dtoa_r+0x6c4>
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	d005      	beq.n	8009958 <_dtoa_r+0x980>
 800994c:	45b8      	cmp	r8, r7
 800994e:	d003      	beq.n	8009958 <_dtoa_r+0x980>
 8009950:	4641      	mov	r1, r8
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fd28 	bl	800a3a8 <_Bfree>
 8009958:	4639      	mov	r1, r7
 800995a:	4620      	mov	r0, r4
 800995c:	f000 fd24 	bl	800a3a8 <_Bfree>
 8009960:	e69c      	b.n	800969c <_dtoa_r+0x6c4>
 8009962:	2600      	movs	r6, #0
 8009964:	4637      	mov	r7, r6
 8009966:	e7e1      	b.n	800992c <_dtoa_r+0x954>
 8009968:	46bb      	mov	fp, r7
 800996a:	4637      	mov	r7, r6
 800996c:	e599      	b.n	80094a2 <_dtoa_r+0x4ca>
 800996e:	bf00      	nop
 8009970:	40240000 	.word	0x40240000
 8009974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 80c8 	beq.w	8009b0c <_dtoa_r+0xb34>
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	2d00      	cmp	r5, #0
 8009982:	dd05      	ble.n	8009990 <_dtoa_r+0x9b8>
 8009984:	4639      	mov	r1, r7
 8009986:	462a      	mov	r2, r5
 8009988:	4620      	mov	r0, r4
 800998a:	f000 ff27 	bl	800a7dc <__lshift>
 800998e:	4607      	mov	r7, r0
 8009990:	f1b8 0f00 	cmp.w	r8, #0
 8009994:	d05b      	beq.n	8009a4e <_dtoa_r+0xa76>
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fcc5 	bl	800a328 <_Balloc>
 800999e:	4605      	mov	r5, r0
 80099a0:	b928      	cbnz	r0, 80099ae <_dtoa_r+0x9d6>
 80099a2:	4b83      	ldr	r3, [pc, #524]	; (8009bb0 <_dtoa_r+0xbd8>)
 80099a4:	4602      	mov	r2, r0
 80099a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80099aa:	f7ff bb2e 	b.w	800900a <_dtoa_r+0x32>
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	3202      	adds	r2, #2
 80099b2:	0092      	lsls	r2, r2, #2
 80099b4:	f107 010c 	add.w	r1, r7, #12
 80099b8:	300c      	adds	r0, #12
 80099ba:	f7ff fa4a 	bl	8008e52 <memcpy>
 80099be:	2201      	movs	r2, #1
 80099c0:	4629      	mov	r1, r5
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 ff0a 	bl	800a7dc <__lshift>
 80099c8:	9b00      	ldr	r3, [sp, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d2:	4413      	add	r3, r2
 80099d4:	9308      	str	r3, [sp, #32]
 80099d6:	9b02      	ldr	r3, [sp, #8]
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	46b8      	mov	r8, r7
 80099de:	9306      	str	r3, [sp, #24]
 80099e0:	4607      	mov	r7, r0
 80099e2:	9b04      	ldr	r3, [sp, #16]
 80099e4:	4631      	mov	r1, r6
 80099e6:	3b01      	subs	r3, #1
 80099e8:	4650      	mov	r0, sl
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	f7ff fa6c 	bl	8008ec8 <quorem>
 80099f0:	4641      	mov	r1, r8
 80099f2:	9002      	str	r0, [sp, #8]
 80099f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80099f8:	4650      	mov	r0, sl
 80099fa:	f000 ff5b 	bl	800a8b4 <__mcmp>
 80099fe:	463a      	mov	r2, r7
 8009a00:	9005      	str	r0, [sp, #20]
 8009a02:	4631      	mov	r1, r6
 8009a04:	4620      	mov	r0, r4
 8009a06:	f000 ff71 	bl	800a8ec <__mdiff>
 8009a0a:	68c2      	ldr	r2, [r0, #12]
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	bb02      	cbnz	r2, 8009a52 <_dtoa_r+0xa7a>
 8009a10:	4601      	mov	r1, r0
 8009a12:	4650      	mov	r0, sl
 8009a14:	f000 ff4e 	bl	800a8b4 <__mcmp>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8009a20:	f000 fcc2 	bl	800a3a8 <_Bfree>
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a28:	9d04      	ldr	r5, [sp, #16]
 8009a2a:	ea43 0102 	orr.w	r1, r3, r2
 8009a2e:	9b06      	ldr	r3, [sp, #24]
 8009a30:	4319      	orrs	r1, r3
 8009a32:	d110      	bne.n	8009a56 <_dtoa_r+0xa7e>
 8009a34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a38:	d029      	beq.n	8009a8e <_dtoa_r+0xab6>
 8009a3a:	9b05      	ldr	r3, [sp, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dd02      	ble.n	8009a46 <_dtoa_r+0xa6e>
 8009a40:	9b02      	ldr	r3, [sp, #8]
 8009a42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	f883 9000 	strb.w	r9, [r3]
 8009a4c:	e774      	b.n	8009938 <_dtoa_r+0x960>
 8009a4e:	4638      	mov	r0, r7
 8009a50:	e7ba      	b.n	80099c8 <_dtoa_r+0x9f0>
 8009a52:	2201      	movs	r2, #1
 8009a54:	e7e1      	b.n	8009a1a <_dtoa_r+0xa42>
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	db04      	blt.n	8009a66 <_dtoa_r+0xa8e>
 8009a5c:	9907      	ldr	r1, [sp, #28]
 8009a5e:	430b      	orrs	r3, r1
 8009a60:	9906      	ldr	r1, [sp, #24]
 8009a62:	430b      	orrs	r3, r1
 8009a64:	d120      	bne.n	8009aa8 <_dtoa_r+0xad0>
 8009a66:	2a00      	cmp	r2, #0
 8009a68:	dded      	ble.n	8009a46 <_dtoa_r+0xa6e>
 8009a6a:	4651      	mov	r1, sl
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 feb4 	bl	800a7dc <__lshift>
 8009a74:	4631      	mov	r1, r6
 8009a76:	4682      	mov	sl, r0
 8009a78:	f000 ff1c 	bl	800a8b4 <__mcmp>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	dc03      	bgt.n	8009a88 <_dtoa_r+0xab0>
 8009a80:	d1e1      	bne.n	8009a46 <_dtoa_r+0xa6e>
 8009a82:	f019 0f01 	tst.w	r9, #1
 8009a86:	d0de      	beq.n	8009a46 <_dtoa_r+0xa6e>
 8009a88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a8c:	d1d8      	bne.n	8009a40 <_dtoa_r+0xa68>
 8009a8e:	9a01      	ldr	r2, [sp, #4]
 8009a90:	2339      	movs	r3, #57	; 0x39
 8009a92:	7013      	strb	r3, [r2, #0]
 8009a94:	462b      	mov	r3, r5
 8009a96:	461d      	mov	r5, r3
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a9e:	2a39      	cmp	r2, #57	; 0x39
 8009aa0:	d06c      	beq.n	8009b7c <_dtoa_r+0xba4>
 8009aa2:	3201      	adds	r2, #1
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	e747      	b.n	8009938 <_dtoa_r+0x960>
 8009aa8:	2a00      	cmp	r2, #0
 8009aaa:	dd07      	ble.n	8009abc <_dtoa_r+0xae4>
 8009aac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ab0:	d0ed      	beq.n	8009a8e <_dtoa_r+0xab6>
 8009ab2:	9a01      	ldr	r2, [sp, #4]
 8009ab4:	f109 0301 	add.w	r3, r9, #1
 8009ab8:	7013      	strb	r3, [r2, #0]
 8009aba:	e73d      	b.n	8009938 <_dtoa_r+0x960>
 8009abc:	9b04      	ldr	r3, [sp, #16]
 8009abe:	9a08      	ldr	r2, [sp, #32]
 8009ac0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d043      	beq.n	8009b50 <_dtoa_r+0xb78>
 8009ac8:	4651      	mov	r1, sl
 8009aca:	2300      	movs	r3, #0
 8009acc:	220a      	movs	r2, #10
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 fc8c 	bl	800a3ec <__multadd>
 8009ad4:	45b8      	cmp	r8, r7
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	f04f 0300 	mov.w	r3, #0
 8009adc:	f04f 020a 	mov.w	r2, #10
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	d107      	bne.n	8009af6 <_dtoa_r+0xb1e>
 8009ae6:	f000 fc81 	bl	800a3ec <__multadd>
 8009aea:	4680      	mov	r8, r0
 8009aec:	4607      	mov	r7, r0
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	3301      	adds	r3, #1
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	e775      	b.n	80099e2 <_dtoa_r+0xa0a>
 8009af6:	f000 fc79 	bl	800a3ec <__multadd>
 8009afa:	4639      	mov	r1, r7
 8009afc:	4680      	mov	r8, r0
 8009afe:	2300      	movs	r3, #0
 8009b00:	220a      	movs	r2, #10
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 fc72 	bl	800a3ec <__multadd>
 8009b08:	4607      	mov	r7, r0
 8009b0a:	e7f0      	b.n	8009aee <_dtoa_r+0xb16>
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	9301      	str	r3, [sp, #4]
 8009b10:	9d00      	ldr	r5, [sp, #0]
 8009b12:	4631      	mov	r1, r6
 8009b14:	4650      	mov	r0, sl
 8009b16:	f7ff f9d7 	bl	8008ec8 <quorem>
 8009b1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b1e:	9b00      	ldr	r3, [sp, #0]
 8009b20:	f805 9b01 	strb.w	r9, [r5], #1
 8009b24:	1aea      	subs	r2, r5, r3
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	dd07      	ble.n	8009b3c <_dtoa_r+0xb64>
 8009b2c:	4651      	mov	r1, sl
 8009b2e:	2300      	movs	r3, #0
 8009b30:	220a      	movs	r2, #10
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 fc5a 	bl	800a3ec <__multadd>
 8009b38:	4682      	mov	sl, r0
 8009b3a:	e7ea      	b.n	8009b12 <_dtoa_r+0xb3a>
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfc8      	it	gt
 8009b42:	461d      	movgt	r5, r3
 8009b44:	9b00      	ldr	r3, [sp, #0]
 8009b46:	bfd8      	it	le
 8009b48:	2501      	movle	r5, #1
 8009b4a:	441d      	add	r5, r3
 8009b4c:	f04f 0800 	mov.w	r8, #0
 8009b50:	4651      	mov	r1, sl
 8009b52:	2201      	movs	r2, #1
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 fe41 	bl	800a7dc <__lshift>
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4682      	mov	sl, r0
 8009b5e:	f000 fea9 	bl	800a8b4 <__mcmp>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	dc96      	bgt.n	8009a94 <_dtoa_r+0xabc>
 8009b66:	d102      	bne.n	8009b6e <_dtoa_r+0xb96>
 8009b68:	f019 0f01 	tst.w	r9, #1
 8009b6c:	d192      	bne.n	8009a94 <_dtoa_r+0xabc>
 8009b6e:	462b      	mov	r3, r5
 8009b70:	461d      	mov	r5, r3
 8009b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b76:	2a30      	cmp	r2, #48	; 0x30
 8009b78:	d0fa      	beq.n	8009b70 <_dtoa_r+0xb98>
 8009b7a:	e6dd      	b.n	8009938 <_dtoa_r+0x960>
 8009b7c:	9a00      	ldr	r2, [sp, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d189      	bne.n	8009a96 <_dtoa_r+0xabe>
 8009b82:	f10b 0b01 	add.w	fp, fp, #1
 8009b86:	2331      	movs	r3, #49	; 0x31
 8009b88:	e796      	b.n	8009ab8 <_dtoa_r+0xae0>
 8009b8a:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <_dtoa_r+0xbdc>)
 8009b8c:	f7ff ba99 	b.w	80090c2 <_dtoa_r+0xea>
 8009b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f47f aa6d 	bne.w	8009072 <_dtoa_r+0x9a>
 8009b98:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <_dtoa_r+0xbe0>)
 8009b9a:	f7ff ba92 	b.w	80090c2 <_dtoa_r+0xea>
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dcb5      	bgt.n	8009b10 <_dtoa_r+0xb38>
 8009ba4:	9b07      	ldr	r3, [sp, #28]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	f73f aeb1 	bgt.w	800990e <_dtoa_r+0x936>
 8009bac:	e7b0      	b.n	8009b10 <_dtoa_r+0xb38>
 8009bae:	bf00      	nop
 8009bb0:	0800baa9 	.word	0x0800baa9
 8009bb4:	0800b9c0 	.word	0x0800b9c0
 8009bb8:	0800ba2d 	.word	0x0800ba2d

08009bbc <_free_r>:
 8009bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	d044      	beq.n	8009c4c <_free_r+0x90>
 8009bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc6:	9001      	str	r0, [sp, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f1a1 0404 	sub.w	r4, r1, #4
 8009bce:	bfb8      	it	lt
 8009bd0:	18e4      	addlt	r4, r4, r3
 8009bd2:	f7fd f9df 	bl	8006f94 <__malloc_lock>
 8009bd6:	4a1e      	ldr	r2, [pc, #120]	; (8009c50 <_free_r+0x94>)
 8009bd8:	9801      	ldr	r0, [sp, #4]
 8009bda:	6813      	ldr	r3, [r2, #0]
 8009bdc:	b933      	cbnz	r3, 8009bec <_free_r+0x30>
 8009bde:	6063      	str	r3, [r4, #4]
 8009be0:	6014      	str	r4, [r2, #0]
 8009be2:	b003      	add	sp, #12
 8009be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009be8:	f7fd b9da 	b.w	8006fa0 <__malloc_unlock>
 8009bec:	42a3      	cmp	r3, r4
 8009bee:	d908      	bls.n	8009c02 <_free_r+0x46>
 8009bf0:	6825      	ldr	r5, [r4, #0]
 8009bf2:	1961      	adds	r1, r4, r5
 8009bf4:	428b      	cmp	r3, r1
 8009bf6:	bf01      	itttt	eq
 8009bf8:	6819      	ldreq	r1, [r3, #0]
 8009bfa:	685b      	ldreq	r3, [r3, #4]
 8009bfc:	1949      	addeq	r1, r1, r5
 8009bfe:	6021      	streq	r1, [r4, #0]
 8009c00:	e7ed      	b.n	8009bde <_free_r+0x22>
 8009c02:	461a      	mov	r2, r3
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	b10b      	cbz	r3, 8009c0c <_free_r+0x50>
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	d9fa      	bls.n	8009c02 <_free_r+0x46>
 8009c0c:	6811      	ldr	r1, [r2, #0]
 8009c0e:	1855      	adds	r5, r2, r1
 8009c10:	42a5      	cmp	r5, r4
 8009c12:	d10b      	bne.n	8009c2c <_free_r+0x70>
 8009c14:	6824      	ldr	r4, [r4, #0]
 8009c16:	4421      	add	r1, r4
 8009c18:	1854      	adds	r4, r2, r1
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	6011      	str	r1, [r2, #0]
 8009c1e:	d1e0      	bne.n	8009be2 <_free_r+0x26>
 8009c20:	681c      	ldr	r4, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	6053      	str	r3, [r2, #4]
 8009c26:	440c      	add	r4, r1
 8009c28:	6014      	str	r4, [r2, #0]
 8009c2a:	e7da      	b.n	8009be2 <_free_r+0x26>
 8009c2c:	d902      	bls.n	8009c34 <_free_r+0x78>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	6003      	str	r3, [r0, #0]
 8009c32:	e7d6      	b.n	8009be2 <_free_r+0x26>
 8009c34:	6825      	ldr	r5, [r4, #0]
 8009c36:	1961      	adds	r1, r4, r5
 8009c38:	428b      	cmp	r3, r1
 8009c3a:	bf04      	itt	eq
 8009c3c:	6819      	ldreq	r1, [r3, #0]
 8009c3e:	685b      	ldreq	r3, [r3, #4]
 8009c40:	6063      	str	r3, [r4, #4]
 8009c42:	bf04      	itt	eq
 8009c44:	1949      	addeq	r1, r1, r5
 8009c46:	6021      	streq	r1, [r4, #0]
 8009c48:	6054      	str	r4, [r2, #4]
 8009c4a:	e7ca      	b.n	8009be2 <_free_r+0x26>
 8009c4c:	b003      	add	sp, #12
 8009c4e:	bd30      	pop	{r4, r5, pc}
 8009c50:	20000500 	.word	0x20000500

08009c54 <rshift>:
 8009c54:	6903      	ldr	r3, [r0, #16]
 8009c56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c62:	f100 0414 	add.w	r4, r0, #20
 8009c66:	dd45      	ble.n	8009cf4 <rshift+0xa0>
 8009c68:	f011 011f 	ands.w	r1, r1, #31
 8009c6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c74:	d10c      	bne.n	8009c90 <rshift+0x3c>
 8009c76:	f100 0710 	add.w	r7, r0, #16
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	42b1      	cmp	r1, r6
 8009c7e:	d334      	bcc.n	8009cea <rshift+0x96>
 8009c80:	1a9b      	subs	r3, r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	1eea      	subs	r2, r5, #3
 8009c86:	4296      	cmp	r6, r2
 8009c88:	bf38      	it	cc
 8009c8a:	2300      	movcc	r3, #0
 8009c8c:	4423      	add	r3, r4
 8009c8e:	e015      	b.n	8009cbc <rshift+0x68>
 8009c90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c94:	f1c1 0820 	rsb	r8, r1, #32
 8009c98:	40cf      	lsrs	r7, r1
 8009c9a:	f105 0e04 	add.w	lr, r5, #4
 8009c9e:	46a1      	mov	r9, r4
 8009ca0:	4576      	cmp	r6, lr
 8009ca2:	46f4      	mov	ip, lr
 8009ca4:	d815      	bhi.n	8009cd2 <rshift+0x7e>
 8009ca6:	1a9a      	subs	r2, r3, r2
 8009ca8:	0092      	lsls	r2, r2, #2
 8009caa:	3a04      	subs	r2, #4
 8009cac:	3501      	adds	r5, #1
 8009cae:	42ae      	cmp	r6, r5
 8009cb0:	bf38      	it	cc
 8009cb2:	2200      	movcc	r2, #0
 8009cb4:	18a3      	adds	r3, r4, r2
 8009cb6:	50a7      	str	r7, [r4, r2]
 8009cb8:	b107      	cbz	r7, 8009cbc <rshift+0x68>
 8009cba:	3304      	adds	r3, #4
 8009cbc:	1b1a      	subs	r2, r3, r4
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009cc4:	bf08      	it	eq
 8009cc6:	2300      	moveq	r3, #0
 8009cc8:	6102      	str	r2, [r0, #16]
 8009cca:	bf08      	it	eq
 8009ccc:	6143      	streq	r3, [r0, #20]
 8009cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cd2:	f8dc c000 	ldr.w	ip, [ip]
 8009cd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009cda:	ea4c 0707 	orr.w	r7, ip, r7
 8009cde:	f849 7b04 	str.w	r7, [r9], #4
 8009ce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ce6:	40cf      	lsrs	r7, r1
 8009ce8:	e7da      	b.n	8009ca0 <rshift+0x4c>
 8009cea:	f851 cb04 	ldr.w	ip, [r1], #4
 8009cee:	f847 cf04 	str.w	ip, [r7, #4]!
 8009cf2:	e7c3      	b.n	8009c7c <rshift+0x28>
 8009cf4:	4623      	mov	r3, r4
 8009cf6:	e7e1      	b.n	8009cbc <rshift+0x68>

08009cf8 <__hexdig_fun>:
 8009cf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	d802      	bhi.n	8009d06 <__hexdig_fun+0xe>
 8009d00:	3820      	subs	r0, #32
 8009d02:	b2c0      	uxtb	r0, r0
 8009d04:	4770      	bx	lr
 8009d06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d0a:	2b05      	cmp	r3, #5
 8009d0c:	d801      	bhi.n	8009d12 <__hexdig_fun+0x1a>
 8009d0e:	3847      	subs	r0, #71	; 0x47
 8009d10:	e7f7      	b.n	8009d02 <__hexdig_fun+0xa>
 8009d12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	d801      	bhi.n	8009d1e <__hexdig_fun+0x26>
 8009d1a:	3827      	subs	r0, #39	; 0x27
 8009d1c:	e7f1      	b.n	8009d02 <__hexdig_fun+0xa>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	4770      	bx	lr
	...

08009d24 <__gethex>:
 8009d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	4617      	mov	r7, r2
 8009d2a:	680a      	ldr	r2, [r1, #0]
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	f102 0b02 	add.w	fp, r2, #2
 8009d32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009d36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009d3a:	4681      	mov	r9, r0
 8009d3c:	468a      	mov	sl, r1
 8009d3e:	9302      	str	r3, [sp, #8]
 8009d40:	32fe      	adds	r2, #254	; 0xfe
 8009d42:	eb02 030b 	add.w	r3, r2, fp
 8009d46:	46d8      	mov	r8, fp
 8009d48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	2830      	cmp	r0, #48	; 0x30
 8009d50:	d0f7      	beq.n	8009d42 <__gethex+0x1e>
 8009d52:	f7ff ffd1 	bl	8009cf8 <__hexdig_fun>
 8009d56:	4604      	mov	r4, r0
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d138      	bne.n	8009dce <__gethex+0xaa>
 8009d5c:	49a7      	ldr	r1, [pc, #668]	; (8009ffc <__gethex+0x2d8>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	4640      	mov	r0, r8
 8009d62:	f7fe ffdd 	bl	8008d20 <strncmp>
 8009d66:	4606      	mov	r6, r0
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d169      	bne.n	8009e40 <__gethex+0x11c>
 8009d6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009d70:	465d      	mov	r5, fp
 8009d72:	f7ff ffc1 	bl	8009cf8 <__hexdig_fun>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d064      	beq.n	8009e44 <__gethex+0x120>
 8009d7a:	465a      	mov	r2, fp
 8009d7c:	7810      	ldrb	r0, [r2, #0]
 8009d7e:	2830      	cmp	r0, #48	; 0x30
 8009d80:	4690      	mov	r8, r2
 8009d82:	f102 0201 	add.w	r2, r2, #1
 8009d86:	d0f9      	beq.n	8009d7c <__gethex+0x58>
 8009d88:	f7ff ffb6 	bl	8009cf8 <__hexdig_fun>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	fab0 f480 	clz	r4, r0
 8009d92:	0964      	lsrs	r4, r4, #5
 8009d94:	465e      	mov	r6, fp
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	4642      	mov	r2, r8
 8009d9a:	4615      	mov	r5, r2
 8009d9c:	3201      	adds	r2, #1
 8009d9e:	7828      	ldrb	r0, [r5, #0]
 8009da0:	f7ff ffaa 	bl	8009cf8 <__hexdig_fun>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d1f8      	bne.n	8009d9a <__gethex+0x76>
 8009da8:	4994      	ldr	r1, [pc, #592]	; (8009ffc <__gethex+0x2d8>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	4628      	mov	r0, r5
 8009dae:	f7fe ffb7 	bl	8008d20 <strncmp>
 8009db2:	b978      	cbnz	r0, 8009dd4 <__gethex+0xb0>
 8009db4:	b946      	cbnz	r6, 8009dc8 <__gethex+0xa4>
 8009db6:	1c6e      	adds	r6, r5, #1
 8009db8:	4632      	mov	r2, r6
 8009dba:	4615      	mov	r5, r2
 8009dbc:	3201      	adds	r2, #1
 8009dbe:	7828      	ldrb	r0, [r5, #0]
 8009dc0:	f7ff ff9a 	bl	8009cf8 <__hexdig_fun>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d1f8      	bne.n	8009dba <__gethex+0x96>
 8009dc8:	1b73      	subs	r3, r6, r5
 8009dca:	009e      	lsls	r6, r3, #2
 8009dcc:	e004      	b.n	8009dd8 <__gethex+0xb4>
 8009dce:	2400      	movs	r4, #0
 8009dd0:	4626      	mov	r6, r4
 8009dd2:	e7e1      	b.n	8009d98 <__gethex+0x74>
 8009dd4:	2e00      	cmp	r6, #0
 8009dd6:	d1f7      	bne.n	8009dc8 <__gethex+0xa4>
 8009dd8:	782b      	ldrb	r3, [r5, #0]
 8009dda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009dde:	2b50      	cmp	r3, #80	; 0x50
 8009de0:	d13d      	bne.n	8009e5e <__gethex+0x13a>
 8009de2:	786b      	ldrb	r3, [r5, #1]
 8009de4:	2b2b      	cmp	r3, #43	; 0x2b
 8009de6:	d02f      	beq.n	8009e48 <__gethex+0x124>
 8009de8:	2b2d      	cmp	r3, #45	; 0x2d
 8009dea:	d031      	beq.n	8009e50 <__gethex+0x12c>
 8009dec:	1c69      	adds	r1, r5, #1
 8009dee:	f04f 0b00 	mov.w	fp, #0
 8009df2:	7808      	ldrb	r0, [r1, #0]
 8009df4:	f7ff ff80 	bl	8009cf8 <__hexdig_fun>
 8009df8:	1e42      	subs	r2, r0, #1
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	2a18      	cmp	r2, #24
 8009dfe:	d82e      	bhi.n	8009e5e <__gethex+0x13a>
 8009e00:	f1a0 0210 	sub.w	r2, r0, #16
 8009e04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e08:	f7ff ff76 	bl	8009cf8 <__hexdig_fun>
 8009e0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e10:	fa5f fc8c 	uxtb.w	ip, ip
 8009e14:	f1bc 0f18 	cmp.w	ip, #24
 8009e18:	d91d      	bls.n	8009e56 <__gethex+0x132>
 8009e1a:	f1bb 0f00 	cmp.w	fp, #0
 8009e1e:	d000      	beq.n	8009e22 <__gethex+0xfe>
 8009e20:	4252      	negs	r2, r2
 8009e22:	4416      	add	r6, r2
 8009e24:	f8ca 1000 	str.w	r1, [sl]
 8009e28:	b1dc      	cbz	r4, 8009e62 <__gethex+0x13e>
 8009e2a:	9b01      	ldr	r3, [sp, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bf14      	ite	ne
 8009e30:	f04f 0800 	movne.w	r8, #0
 8009e34:	f04f 0806 	moveq.w	r8, #6
 8009e38:	4640      	mov	r0, r8
 8009e3a:	b005      	add	sp, #20
 8009e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e40:	4645      	mov	r5, r8
 8009e42:	4626      	mov	r6, r4
 8009e44:	2401      	movs	r4, #1
 8009e46:	e7c7      	b.n	8009dd8 <__gethex+0xb4>
 8009e48:	f04f 0b00 	mov.w	fp, #0
 8009e4c:	1ca9      	adds	r1, r5, #2
 8009e4e:	e7d0      	b.n	8009df2 <__gethex+0xce>
 8009e50:	f04f 0b01 	mov.w	fp, #1
 8009e54:	e7fa      	b.n	8009e4c <__gethex+0x128>
 8009e56:	230a      	movs	r3, #10
 8009e58:	fb03 0002 	mla	r0, r3, r2, r0
 8009e5c:	e7d0      	b.n	8009e00 <__gethex+0xdc>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	e7e0      	b.n	8009e24 <__gethex+0x100>
 8009e62:	eba5 0308 	sub.w	r3, r5, r8
 8009e66:	3b01      	subs	r3, #1
 8009e68:	4621      	mov	r1, r4
 8009e6a:	2b07      	cmp	r3, #7
 8009e6c:	dc0a      	bgt.n	8009e84 <__gethex+0x160>
 8009e6e:	4648      	mov	r0, r9
 8009e70:	f000 fa5a 	bl	800a328 <_Balloc>
 8009e74:	4604      	mov	r4, r0
 8009e76:	b940      	cbnz	r0, 8009e8a <__gethex+0x166>
 8009e78:	4b61      	ldr	r3, [pc, #388]	; (800a000 <__gethex+0x2dc>)
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	21e4      	movs	r1, #228	; 0xe4
 8009e7e:	4861      	ldr	r0, [pc, #388]	; (800a004 <__gethex+0x2e0>)
 8009e80:	f7ff f804 	bl	8008e8c <__assert_func>
 8009e84:	3101      	adds	r1, #1
 8009e86:	105b      	asrs	r3, r3, #1
 8009e88:	e7ef      	b.n	8009e6a <__gethex+0x146>
 8009e8a:	f100 0a14 	add.w	sl, r0, #20
 8009e8e:	2300      	movs	r3, #0
 8009e90:	495a      	ldr	r1, [pc, #360]	; (8009ffc <__gethex+0x2d8>)
 8009e92:	f8cd a004 	str.w	sl, [sp, #4]
 8009e96:	469b      	mov	fp, r3
 8009e98:	45a8      	cmp	r8, r5
 8009e9a:	d342      	bcc.n	8009f22 <__gethex+0x1fe>
 8009e9c:	9801      	ldr	r0, [sp, #4]
 8009e9e:	f840 bb04 	str.w	fp, [r0], #4
 8009ea2:	eba0 000a 	sub.w	r0, r0, sl
 8009ea6:	1080      	asrs	r0, r0, #2
 8009ea8:	6120      	str	r0, [r4, #16]
 8009eaa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009eae:	4658      	mov	r0, fp
 8009eb0:	f000 fb2c 	bl	800a50c <__hi0bits>
 8009eb4:	683d      	ldr	r5, [r7, #0]
 8009eb6:	eba8 0000 	sub.w	r0, r8, r0
 8009eba:	42a8      	cmp	r0, r5
 8009ebc:	dd59      	ble.n	8009f72 <__gethex+0x24e>
 8009ebe:	eba0 0805 	sub.w	r8, r0, r5
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 febb 	bl	800ac40 <__any_on>
 8009eca:	4683      	mov	fp, r0
 8009ecc:	b1b8      	cbz	r0, 8009efe <__gethex+0x1da>
 8009ece:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ed2:	1159      	asrs	r1, r3, #5
 8009ed4:	f003 021f 	and.w	r2, r3, #31
 8009ed8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009edc:	f04f 0b01 	mov.w	fp, #1
 8009ee0:	fa0b f202 	lsl.w	r2, fp, r2
 8009ee4:	420a      	tst	r2, r1
 8009ee6:	d00a      	beq.n	8009efe <__gethex+0x1da>
 8009ee8:	455b      	cmp	r3, fp
 8009eea:	dd06      	ble.n	8009efa <__gethex+0x1d6>
 8009eec:	f1a8 0102 	sub.w	r1, r8, #2
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 fea5 	bl	800ac40 <__any_on>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d138      	bne.n	8009f6c <__gethex+0x248>
 8009efa:	f04f 0b02 	mov.w	fp, #2
 8009efe:	4641      	mov	r1, r8
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7ff fea7 	bl	8009c54 <rshift>
 8009f06:	4446      	add	r6, r8
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	42b3      	cmp	r3, r6
 8009f0c:	da41      	bge.n	8009f92 <__gethex+0x26e>
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4648      	mov	r0, r9
 8009f12:	f000 fa49 	bl	800a3a8 <_Bfree>
 8009f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f18:	2300      	movs	r3, #0
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009f20:	e78a      	b.n	8009e38 <__gethex+0x114>
 8009f22:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009f26:	2a2e      	cmp	r2, #46	; 0x2e
 8009f28:	d014      	beq.n	8009f54 <__gethex+0x230>
 8009f2a:	2b20      	cmp	r3, #32
 8009f2c:	d106      	bne.n	8009f3c <__gethex+0x218>
 8009f2e:	9b01      	ldr	r3, [sp, #4]
 8009f30:	f843 bb04 	str.w	fp, [r3], #4
 8009f34:	f04f 0b00 	mov.w	fp, #0
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	465b      	mov	r3, fp
 8009f3c:	7828      	ldrb	r0, [r5, #0]
 8009f3e:	9303      	str	r3, [sp, #12]
 8009f40:	f7ff feda 	bl	8009cf8 <__hexdig_fun>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	f000 000f 	and.w	r0, r0, #15
 8009f4a:	4098      	lsls	r0, r3
 8009f4c:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f50:	3304      	adds	r3, #4
 8009f52:	e7a1      	b.n	8009e98 <__gethex+0x174>
 8009f54:	45a8      	cmp	r8, r5
 8009f56:	d8e8      	bhi.n	8009f2a <__gethex+0x206>
 8009f58:	2201      	movs	r2, #1
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	9303      	str	r3, [sp, #12]
 8009f5e:	f7fe fedf 	bl	8008d20 <strncmp>
 8009f62:	4926      	ldr	r1, [pc, #152]	; (8009ffc <__gethex+0x2d8>)
 8009f64:	9b03      	ldr	r3, [sp, #12]
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d1df      	bne.n	8009f2a <__gethex+0x206>
 8009f6a:	e795      	b.n	8009e98 <__gethex+0x174>
 8009f6c:	f04f 0b03 	mov.w	fp, #3
 8009f70:	e7c5      	b.n	8009efe <__gethex+0x1da>
 8009f72:	da0b      	bge.n	8009f8c <__gethex+0x268>
 8009f74:	eba5 0800 	sub.w	r8, r5, r0
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4642      	mov	r2, r8
 8009f7c:	4648      	mov	r0, r9
 8009f7e:	f000 fc2d 	bl	800a7dc <__lshift>
 8009f82:	eba6 0608 	sub.w	r6, r6, r8
 8009f86:	4604      	mov	r4, r0
 8009f88:	f100 0a14 	add.w	sl, r0, #20
 8009f8c:	f04f 0b00 	mov.w	fp, #0
 8009f90:	e7ba      	b.n	8009f08 <__gethex+0x1e4>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	42b3      	cmp	r3, r6
 8009f96:	dd73      	ble.n	800a080 <__gethex+0x35c>
 8009f98:	1b9e      	subs	r6, r3, r6
 8009f9a:	42b5      	cmp	r5, r6
 8009f9c:	dc34      	bgt.n	800a008 <__gethex+0x2e4>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d023      	beq.n	8009fec <__gethex+0x2c8>
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d025      	beq.n	8009ff4 <__gethex+0x2d0>
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d115      	bne.n	8009fd8 <__gethex+0x2b4>
 8009fac:	42b5      	cmp	r5, r6
 8009fae:	d113      	bne.n	8009fd8 <__gethex+0x2b4>
 8009fb0:	2d01      	cmp	r5, #1
 8009fb2:	d10b      	bne.n	8009fcc <__gethex+0x2a8>
 8009fb4:	9a02      	ldr	r2, [sp, #8]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	2301      	movs	r3, #1
 8009fbc:	6123      	str	r3, [r4, #16]
 8009fbe:	f8ca 3000 	str.w	r3, [sl]
 8009fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fc4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009fc8:	601c      	str	r4, [r3, #0]
 8009fca:	e735      	b.n	8009e38 <__gethex+0x114>
 8009fcc:	1e69      	subs	r1, r5, #1
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f000 fe36 	bl	800ac40 <__any_on>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d1ed      	bne.n	8009fb4 <__gethex+0x290>
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4648      	mov	r0, r9
 8009fdc:	f000 f9e4 	bl	800a3a8 <_Bfree>
 8009fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009fea:	e725      	b.n	8009e38 <__gethex+0x114>
 8009fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1f2      	bne.n	8009fd8 <__gethex+0x2b4>
 8009ff2:	e7df      	b.n	8009fb4 <__gethex+0x290>
 8009ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1dc      	bne.n	8009fb4 <__gethex+0x290>
 8009ffa:	e7ed      	b.n	8009fd8 <__gethex+0x2b4>
 8009ffc:	0800b958 	.word	0x0800b958
 800a000:	0800baa9 	.word	0x0800baa9
 800a004:	0800baba 	.word	0x0800baba
 800a008:	f106 38ff 	add.w	r8, r6, #4294967295
 800a00c:	f1bb 0f00 	cmp.w	fp, #0
 800a010:	d133      	bne.n	800a07a <__gethex+0x356>
 800a012:	f1b8 0f00 	cmp.w	r8, #0
 800a016:	d004      	beq.n	800a022 <__gethex+0x2fe>
 800a018:	4641      	mov	r1, r8
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 fe10 	bl	800ac40 <__any_on>
 800a020:	4683      	mov	fp, r0
 800a022:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a026:	2301      	movs	r3, #1
 800a028:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a02c:	f008 081f 	and.w	r8, r8, #31
 800a030:	fa03 f308 	lsl.w	r3, r3, r8
 800a034:	4213      	tst	r3, r2
 800a036:	4631      	mov	r1, r6
 800a038:	4620      	mov	r0, r4
 800a03a:	bf18      	it	ne
 800a03c:	f04b 0b02 	orrne.w	fp, fp, #2
 800a040:	1bad      	subs	r5, r5, r6
 800a042:	f7ff fe07 	bl	8009c54 <rshift>
 800a046:	687e      	ldr	r6, [r7, #4]
 800a048:	f04f 0802 	mov.w	r8, #2
 800a04c:	f1bb 0f00 	cmp.w	fp, #0
 800a050:	d04a      	beq.n	800a0e8 <__gethex+0x3c4>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d016      	beq.n	800a086 <__gethex+0x362>
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d018      	beq.n	800a08e <__gethex+0x36a>
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d109      	bne.n	800a074 <__gethex+0x350>
 800a060:	f01b 0f02 	tst.w	fp, #2
 800a064:	d006      	beq.n	800a074 <__gethex+0x350>
 800a066:	f8da 3000 	ldr.w	r3, [sl]
 800a06a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a06e:	f01b 0f01 	tst.w	fp, #1
 800a072:	d10f      	bne.n	800a094 <__gethex+0x370>
 800a074:	f048 0810 	orr.w	r8, r8, #16
 800a078:	e036      	b.n	800a0e8 <__gethex+0x3c4>
 800a07a:	f04f 0b01 	mov.w	fp, #1
 800a07e:	e7d0      	b.n	800a022 <__gethex+0x2fe>
 800a080:	f04f 0801 	mov.w	r8, #1
 800a084:	e7e2      	b.n	800a04c <__gethex+0x328>
 800a086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a088:	f1c3 0301 	rsb	r3, r3, #1
 800a08c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0ef      	beq.n	800a074 <__gethex+0x350>
 800a094:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a098:	f104 0214 	add.w	r2, r4, #20
 800a09c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4694      	mov	ip, r2
 800a0aa:	f852 1b04 	ldr.w	r1, [r2], #4
 800a0ae:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a0b2:	d01e      	beq.n	800a0f2 <__gethex+0x3ce>
 800a0b4:	3101      	adds	r1, #1
 800a0b6:	f8cc 1000 	str.w	r1, [ip]
 800a0ba:	f1b8 0f02 	cmp.w	r8, #2
 800a0be:	f104 0214 	add.w	r2, r4, #20
 800a0c2:	d13d      	bne.n	800a140 <__gethex+0x41c>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	42ab      	cmp	r3, r5
 800a0ca:	d10b      	bne.n	800a0e4 <__gethex+0x3c0>
 800a0cc:	1169      	asrs	r1, r5, #5
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f005 051f 	and.w	r5, r5, #31
 800a0d4:	fa03 f505 	lsl.w	r5, r3, r5
 800a0d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0dc:	421d      	tst	r5, r3
 800a0de:	bf18      	it	ne
 800a0e0:	f04f 0801 	movne.w	r8, #1
 800a0e4:	f048 0820 	orr.w	r8, r8, #32
 800a0e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0ea:	601c      	str	r4, [r3, #0]
 800a0ec:	9b02      	ldr	r3, [sp, #8]
 800a0ee:	601e      	str	r6, [r3, #0]
 800a0f0:	e6a2      	b.n	8009e38 <__gethex+0x114>
 800a0f2:	4290      	cmp	r0, r2
 800a0f4:	f842 3c04 	str.w	r3, [r2, #-4]
 800a0f8:	d8d6      	bhi.n	800a0a8 <__gethex+0x384>
 800a0fa:	68a2      	ldr	r2, [r4, #8]
 800a0fc:	4593      	cmp	fp, r2
 800a0fe:	db17      	blt.n	800a130 <__gethex+0x40c>
 800a100:	6861      	ldr	r1, [r4, #4]
 800a102:	4648      	mov	r0, r9
 800a104:	3101      	adds	r1, #1
 800a106:	f000 f90f 	bl	800a328 <_Balloc>
 800a10a:	4682      	mov	sl, r0
 800a10c:	b918      	cbnz	r0, 800a116 <__gethex+0x3f2>
 800a10e:	4b1b      	ldr	r3, [pc, #108]	; (800a17c <__gethex+0x458>)
 800a110:	4602      	mov	r2, r0
 800a112:	2184      	movs	r1, #132	; 0x84
 800a114:	e6b3      	b.n	8009e7e <__gethex+0x15a>
 800a116:	6922      	ldr	r2, [r4, #16]
 800a118:	3202      	adds	r2, #2
 800a11a:	f104 010c 	add.w	r1, r4, #12
 800a11e:	0092      	lsls	r2, r2, #2
 800a120:	300c      	adds	r0, #12
 800a122:	f7fe fe96 	bl	8008e52 <memcpy>
 800a126:	4621      	mov	r1, r4
 800a128:	4648      	mov	r0, r9
 800a12a:	f000 f93d 	bl	800a3a8 <_Bfree>
 800a12e:	4654      	mov	r4, sl
 800a130:	6922      	ldr	r2, [r4, #16]
 800a132:	1c51      	adds	r1, r2, #1
 800a134:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a138:	6121      	str	r1, [r4, #16]
 800a13a:	2101      	movs	r1, #1
 800a13c:	6151      	str	r1, [r2, #20]
 800a13e:	e7bc      	b.n	800a0ba <__gethex+0x396>
 800a140:	6921      	ldr	r1, [r4, #16]
 800a142:	4559      	cmp	r1, fp
 800a144:	dd0b      	ble.n	800a15e <__gethex+0x43a>
 800a146:	2101      	movs	r1, #1
 800a148:	4620      	mov	r0, r4
 800a14a:	f7ff fd83 	bl	8009c54 <rshift>
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	3601      	adds	r6, #1
 800a152:	42b3      	cmp	r3, r6
 800a154:	f6ff aedb 	blt.w	8009f0e <__gethex+0x1ea>
 800a158:	f04f 0801 	mov.w	r8, #1
 800a15c:	e7c2      	b.n	800a0e4 <__gethex+0x3c0>
 800a15e:	f015 051f 	ands.w	r5, r5, #31
 800a162:	d0f9      	beq.n	800a158 <__gethex+0x434>
 800a164:	9b01      	ldr	r3, [sp, #4]
 800a166:	441a      	add	r2, r3
 800a168:	f1c5 0520 	rsb	r5, r5, #32
 800a16c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a170:	f000 f9cc 	bl	800a50c <__hi0bits>
 800a174:	42a8      	cmp	r0, r5
 800a176:	dbe6      	blt.n	800a146 <__gethex+0x422>
 800a178:	e7ee      	b.n	800a158 <__gethex+0x434>
 800a17a:	bf00      	nop
 800a17c:	0800baa9 	.word	0x0800baa9

0800a180 <L_shift>:
 800a180:	f1c2 0208 	rsb	r2, r2, #8
 800a184:	0092      	lsls	r2, r2, #2
 800a186:	b570      	push	{r4, r5, r6, lr}
 800a188:	f1c2 0620 	rsb	r6, r2, #32
 800a18c:	6843      	ldr	r3, [r0, #4]
 800a18e:	6804      	ldr	r4, [r0, #0]
 800a190:	fa03 f506 	lsl.w	r5, r3, r6
 800a194:	432c      	orrs	r4, r5
 800a196:	40d3      	lsrs	r3, r2
 800a198:	6004      	str	r4, [r0, #0]
 800a19a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a19e:	4288      	cmp	r0, r1
 800a1a0:	d3f4      	bcc.n	800a18c <L_shift+0xc>
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}

0800a1a4 <__match>:
 800a1a4:	b530      	push	{r4, r5, lr}
 800a1a6:	6803      	ldr	r3, [r0, #0]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ae:	b914      	cbnz	r4, 800a1b6 <__match+0x12>
 800a1b0:	6003      	str	r3, [r0, #0]
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	bd30      	pop	{r4, r5, pc}
 800a1b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a1be:	2d19      	cmp	r5, #25
 800a1c0:	bf98      	it	ls
 800a1c2:	3220      	addls	r2, #32
 800a1c4:	42a2      	cmp	r2, r4
 800a1c6:	d0f0      	beq.n	800a1aa <__match+0x6>
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e7f3      	b.n	800a1b4 <__match+0x10>

0800a1cc <__hexnan>:
 800a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	680b      	ldr	r3, [r1, #0]
 800a1d2:	6801      	ldr	r1, [r0, #0]
 800a1d4:	115e      	asrs	r6, r3, #5
 800a1d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1da:	f013 031f 	ands.w	r3, r3, #31
 800a1de:	b087      	sub	sp, #28
 800a1e0:	bf18      	it	ne
 800a1e2:	3604      	addne	r6, #4
 800a1e4:	2500      	movs	r5, #0
 800a1e6:	1f37      	subs	r7, r6, #4
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	4690      	mov	r8, r2
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1f2:	46b9      	mov	r9, r7
 800a1f4:	463c      	mov	r4, r7
 800a1f6:	9502      	str	r5, [sp, #8]
 800a1f8:	46ab      	mov	fp, r5
 800a1fa:	784a      	ldrb	r2, [r1, #1]
 800a1fc:	1c4b      	adds	r3, r1, #1
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	b342      	cbz	r2, 800a254 <__hexnan+0x88>
 800a202:	4610      	mov	r0, r2
 800a204:	9105      	str	r1, [sp, #20]
 800a206:	9204      	str	r2, [sp, #16]
 800a208:	f7ff fd76 	bl	8009cf8 <__hexdig_fun>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d14f      	bne.n	800a2b0 <__hexnan+0xe4>
 800a210:	9a04      	ldr	r2, [sp, #16]
 800a212:	9905      	ldr	r1, [sp, #20]
 800a214:	2a20      	cmp	r2, #32
 800a216:	d818      	bhi.n	800a24a <__hexnan+0x7e>
 800a218:	9b02      	ldr	r3, [sp, #8]
 800a21a:	459b      	cmp	fp, r3
 800a21c:	dd13      	ble.n	800a246 <__hexnan+0x7a>
 800a21e:	454c      	cmp	r4, r9
 800a220:	d206      	bcs.n	800a230 <__hexnan+0x64>
 800a222:	2d07      	cmp	r5, #7
 800a224:	dc04      	bgt.n	800a230 <__hexnan+0x64>
 800a226:	462a      	mov	r2, r5
 800a228:	4649      	mov	r1, r9
 800a22a:	4620      	mov	r0, r4
 800a22c:	f7ff ffa8 	bl	800a180 <L_shift>
 800a230:	4544      	cmp	r4, r8
 800a232:	d950      	bls.n	800a2d6 <__hexnan+0x10a>
 800a234:	2300      	movs	r3, #0
 800a236:	f1a4 0904 	sub.w	r9, r4, #4
 800a23a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a23e:	f8cd b008 	str.w	fp, [sp, #8]
 800a242:	464c      	mov	r4, r9
 800a244:	461d      	mov	r5, r3
 800a246:	9903      	ldr	r1, [sp, #12]
 800a248:	e7d7      	b.n	800a1fa <__hexnan+0x2e>
 800a24a:	2a29      	cmp	r2, #41	; 0x29
 800a24c:	d155      	bne.n	800a2fa <__hexnan+0x12e>
 800a24e:	3102      	adds	r1, #2
 800a250:	f8ca 1000 	str.w	r1, [sl]
 800a254:	f1bb 0f00 	cmp.w	fp, #0
 800a258:	d04f      	beq.n	800a2fa <__hexnan+0x12e>
 800a25a:	454c      	cmp	r4, r9
 800a25c:	d206      	bcs.n	800a26c <__hexnan+0xa0>
 800a25e:	2d07      	cmp	r5, #7
 800a260:	dc04      	bgt.n	800a26c <__hexnan+0xa0>
 800a262:	462a      	mov	r2, r5
 800a264:	4649      	mov	r1, r9
 800a266:	4620      	mov	r0, r4
 800a268:	f7ff ff8a 	bl	800a180 <L_shift>
 800a26c:	4544      	cmp	r4, r8
 800a26e:	d934      	bls.n	800a2da <__hexnan+0x10e>
 800a270:	f1a8 0204 	sub.w	r2, r8, #4
 800a274:	4623      	mov	r3, r4
 800a276:	f853 1b04 	ldr.w	r1, [r3], #4
 800a27a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a27e:	429f      	cmp	r7, r3
 800a280:	d2f9      	bcs.n	800a276 <__hexnan+0xaa>
 800a282:	1b3b      	subs	r3, r7, r4
 800a284:	f023 0303 	bic.w	r3, r3, #3
 800a288:	3304      	adds	r3, #4
 800a28a:	3e03      	subs	r6, #3
 800a28c:	3401      	adds	r4, #1
 800a28e:	42a6      	cmp	r6, r4
 800a290:	bf38      	it	cc
 800a292:	2304      	movcc	r3, #4
 800a294:	4443      	add	r3, r8
 800a296:	2200      	movs	r2, #0
 800a298:	f843 2b04 	str.w	r2, [r3], #4
 800a29c:	429f      	cmp	r7, r3
 800a29e:	d2fb      	bcs.n	800a298 <__hexnan+0xcc>
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	b91b      	cbnz	r3, 800a2ac <__hexnan+0xe0>
 800a2a4:	4547      	cmp	r7, r8
 800a2a6:	d126      	bne.n	800a2f6 <__hexnan+0x12a>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	2005      	movs	r0, #5
 800a2ae:	e025      	b.n	800a2fc <__hexnan+0x130>
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	2d08      	cmp	r5, #8
 800a2b4:	f10b 0b01 	add.w	fp, fp, #1
 800a2b8:	dd06      	ble.n	800a2c8 <__hexnan+0xfc>
 800a2ba:	4544      	cmp	r4, r8
 800a2bc:	d9c3      	bls.n	800a246 <__hexnan+0x7a>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2c4:	2501      	movs	r5, #1
 800a2c6:	3c04      	subs	r4, #4
 800a2c8:	6822      	ldr	r2, [r4, #0]
 800a2ca:	f000 000f 	and.w	r0, r0, #15
 800a2ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2d2:	6020      	str	r0, [r4, #0]
 800a2d4:	e7b7      	b.n	800a246 <__hexnan+0x7a>
 800a2d6:	2508      	movs	r5, #8
 800a2d8:	e7b5      	b.n	800a246 <__hexnan+0x7a>
 800a2da:	9b01      	ldr	r3, [sp, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0df      	beq.n	800a2a0 <__hexnan+0xd4>
 800a2e0:	f1c3 0320 	rsb	r3, r3, #32
 800a2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e8:	40da      	lsrs	r2, r3
 800a2ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2f4:	e7d4      	b.n	800a2a0 <__hexnan+0xd4>
 800a2f6:	3f04      	subs	r7, #4
 800a2f8:	e7d2      	b.n	800a2a0 <__hexnan+0xd4>
 800a2fa:	2004      	movs	r0, #4
 800a2fc:	b007      	add	sp, #28
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a302 <__ascii_mbtowc>:
 800a302:	b082      	sub	sp, #8
 800a304:	b901      	cbnz	r1, 800a308 <__ascii_mbtowc+0x6>
 800a306:	a901      	add	r1, sp, #4
 800a308:	b142      	cbz	r2, 800a31c <__ascii_mbtowc+0x1a>
 800a30a:	b14b      	cbz	r3, 800a320 <__ascii_mbtowc+0x1e>
 800a30c:	7813      	ldrb	r3, [r2, #0]
 800a30e:	600b      	str	r3, [r1, #0]
 800a310:	7812      	ldrb	r2, [r2, #0]
 800a312:	1e10      	subs	r0, r2, #0
 800a314:	bf18      	it	ne
 800a316:	2001      	movne	r0, #1
 800a318:	b002      	add	sp, #8
 800a31a:	4770      	bx	lr
 800a31c:	4610      	mov	r0, r2
 800a31e:	e7fb      	b.n	800a318 <__ascii_mbtowc+0x16>
 800a320:	f06f 0001 	mvn.w	r0, #1
 800a324:	e7f8      	b.n	800a318 <__ascii_mbtowc+0x16>
	...

0800a328 <_Balloc>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	69c6      	ldr	r6, [r0, #28]
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	b976      	cbnz	r6, 800a350 <_Balloc+0x28>
 800a332:	2010      	movs	r0, #16
 800a334:	f7fc fd86 	bl	8006e44 <malloc>
 800a338:	4602      	mov	r2, r0
 800a33a:	61e0      	str	r0, [r4, #28]
 800a33c:	b920      	cbnz	r0, 800a348 <_Balloc+0x20>
 800a33e:	4b18      	ldr	r3, [pc, #96]	; (800a3a0 <_Balloc+0x78>)
 800a340:	4818      	ldr	r0, [pc, #96]	; (800a3a4 <_Balloc+0x7c>)
 800a342:	216b      	movs	r1, #107	; 0x6b
 800a344:	f7fe fda2 	bl	8008e8c <__assert_func>
 800a348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a34c:	6006      	str	r6, [r0, #0]
 800a34e:	60c6      	str	r6, [r0, #12]
 800a350:	69e6      	ldr	r6, [r4, #28]
 800a352:	68f3      	ldr	r3, [r6, #12]
 800a354:	b183      	cbz	r3, 800a378 <_Balloc+0x50>
 800a356:	69e3      	ldr	r3, [r4, #28]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a35e:	b9b8      	cbnz	r0, 800a390 <_Balloc+0x68>
 800a360:	2101      	movs	r1, #1
 800a362:	fa01 f605 	lsl.w	r6, r1, r5
 800a366:	1d72      	adds	r2, r6, #5
 800a368:	0092      	lsls	r2, r2, #2
 800a36a:	4620      	mov	r0, r4
 800a36c:	f001 f91d 	bl	800b5aa <_calloc_r>
 800a370:	b160      	cbz	r0, 800a38c <_Balloc+0x64>
 800a372:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a376:	e00e      	b.n	800a396 <_Balloc+0x6e>
 800a378:	2221      	movs	r2, #33	; 0x21
 800a37a:	2104      	movs	r1, #4
 800a37c:	4620      	mov	r0, r4
 800a37e:	f001 f914 	bl	800b5aa <_calloc_r>
 800a382:	69e3      	ldr	r3, [r4, #28]
 800a384:	60f0      	str	r0, [r6, #12]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e4      	bne.n	800a356 <_Balloc+0x2e>
 800a38c:	2000      	movs	r0, #0
 800a38e:	bd70      	pop	{r4, r5, r6, pc}
 800a390:	6802      	ldr	r2, [r0, #0]
 800a392:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a396:	2300      	movs	r3, #0
 800a398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a39c:	e7f7      	b.n	800a38e <_Balloc+0x66>
 800a39e:	bf00      	nop
 800a3a0:	0800ba3a 	.word	0x0800ba3a
 800a3a4:	0800bb1a 	.word	0x0800bb1a

0800a3a8 <_Bfree>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	69c6      	ldr	r6, [r0, #28]
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	b976      	cbnz	r6, 800a3d0 <_Bfree+0x28>
 800a3b2:	2010      	movs	r0, #16
 800a3b4:	f7fc fd46 	bl	8006e44 <malloc>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	61e8      	str	r0, [r5, #28]
 800a3bc:	b920      	cbnz	r0, 800a3c8 <_Bfree+0x20>
 800a3be:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <_Bfree+0x3c>)
 800a3c0:	4809      	ldr	r0, [pc, #36]	; (800a3e8 <_Bfree+0x40>)
 800a3c2:	218f      	movs	r1, #143	; 0x8f
 800a3c4:	f7fe fd62 	bl	8008e8c <__assert_func>
 800a3c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3cc:	6006      	str	r6, [r0, #0]
 800a3ce:	60c6      	str	r6, [r0, #12]
 800a3d0:	b13c      	cbz	r4, 800a3e2 <_Bfree+0x3a>
 800a3d2:	69eb      	ldr	r3, [r5, #28]
 800a3d4:	6862      	ldr	r2, [r4, #4]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3dc:	6021      	str	r1, [r4, #0]
 800a3de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	0800ba3a 	.word	0x0800ba3a
 800a3e8:	0800bb1a 	.word	0x0800bb1a

0800a3ec <__multadd>:
 800a3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f0:	690d      	ldr	r5, [r1, #16]
 800a3f2:	4607      	mov	r7, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	461e      	mov	r6, r3
 800a3f8:	f101 0c14 	add.w	ip, r1, #20
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	f8dc 3000 	ldr.w	r3, [ip]
 800a402:	b299      	uxth	r1, r3
 800a404:	fb02 6101 	mla	r1, r2, r1, r6
 800a408:	0c1e      	lsrs	r6, r3, #16
 800a40a:	0c0b      	lsrs	r3, r1, #16
 800a40c:	fb02 3306 	mla	r3, r2, r6, r3
 800a410:	b289      	uxth	r1, r1
 800a412:	3001      	adds	r0, #1
 800a414:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a418:	4285      	cmp	r5, r0
 800a41a:	f84c 1b04 	str.w	r1, [ip], #4
 800a41e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a422:	dcec      	bgt.n	800a3fe <__multadd+0x12>
 800a424:	b30e      	cbz	r6, 800a46a <__multadd+0x7e>
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	42ab      	cmp	r3, r5
 800a42a:	dc19      	bgt.n	800a460 <__multadd+0x74>
 800a42c:	6861      	ldr	r1, [r4, #4]
 800a42e:	4638      	mov	r0, r7
 800a430:	3101      	adds	r1, #1
 800a432:	f7ff ff79 	bl	800a328 <_Balloc>
 800a436:	4680      	mov	r8, r0
 800a438:	b928      	cbnz	r0, 800a446 <__multadd+0x5a>
 800a43a:	4602      	mov	r2, r0
 800a43c:	4b0c      	ldr	r3, [pc, #48]	; (800a470 <__multadd+0x84>)
 800a43e:	480d      	ldr	r0, [pc, #52]	; (800a474 <__multadd+0x88>)
 800a440:	21ba      	movs	r1, #186	; 0xba
 800a442:	f7fe fd23 	bl	8008e8c <__assert_func>
 800a446:	6922      	ldr	r2, [r4, #16]
 800a448:	3202      	adds	r2, #2
 800a44a:	f104 010c 	add.w	r1, r4, #12
 800a44e:	0092      	lsls	r2, r2, #2
 800a450:	300c      	adds	r0, #12
 800a452:	f7fe fcfe 	bl	8008e52 <memcpy>
 800a456:	4621      	mov	r1, r4
 800a458:	4638      	mov	r0, r7
 800a45a:	f7ff ffa5 	bl	800a3a8 <_Bfree>
 800a45e:	4644      	mov	r4, r8
 800a460:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a464:	3501      	adds	r5, #1
 800a466:	615e      	str	r6, [r3, #20]
 800a468:	6125      	str	r5, [r4, #16]
 800a46a:	4620      	mov	r0, r4
 800a46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a470:	0800baa9 	.word	0x0800baa9
 800a474:	0800bb1a 	.word	0x0800bb1a

0800a478 <__s2b>:
 800a478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	460c      	mov	r4, r1
 800a47e:	4615      	mov	r5, r2
 800a480:	461f      	mov	r7, r3
 800a482:	2209      	movs	r2, #9
 800a484:	3308      	adds	r3, #8
 800a486:	4606      	mov	r6, r0
 800a488:	fb93 f3f2 	sdiv	r3, r3, r2
 800a48c:	2100      	movs	r1, #0
 800a48e:	2201      	movs	r2, #1
 800a490:	429a      	cmp	r2, r3
 800a492:	db09      	blt.n	800a4a8 <__s2b+0x30>
 800a494:	4630      	mov	r0, r6
 800a496:	f7ff ff47 	bl	800a328 <_Balloc>
 800a49a:	b940      	cbnz	r0, 800a4ae <__s2b+0x36>
 800a49c:	4602      	mov	r2, r0
 800a49e:	4b19      	ldr	r3, [pc, #100]	; (800a504 <__s2b+0x8c>)
 800a4a0:	4819      	ldr	r0, [pc, #100]	; (800a508 <__s2b+0x90>)
 800a4a2:	21d3      	movs	r1, #211	; 0xd3
 800a4a4:	f7fe fcf2 	bl	8008e8c <__assert_func>
 800a4a8:	0052      	lsls	r2, r2, #1
 800a4aa:	3101      	adds	r1, #1
 800a4ac:	e7f0      	b.n	800a490 <__s2b+0x18>
 800a4ae:	9b08      	ldr	r3, [sp, #32]
 800a4b0:	6143      	str	r3, [r0, #20]
 800a4b2:	2d09      	cmp	r5, #9
 800a4b4:	f04f 0301 	mov.w	r3, #1
 800a4b8:	6103      	str	r3, [r0, #16]
 800a4ba:	dd16      	ble.n	800a4ea <__s2b+0x72>
 800a4bc:	f104 0909 	add.w	r9, r4, #9
 800a4c0:	46c8      	mov	r8, r9
 800a4c2:	442c      	add	r4, r5
 800a4c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	3b30      	subs	r3, #48	; 0x30
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f7ff ff8c 	bl	800a3ec <__multadd>
 800a4d4:	45a0      	cmp	r8, r4
 800a4d6:	d1f5      	bne.n	800a4c4 <__s2b+0x4c>
 800a4d8:	f1a5 0408 	sub.w	r4, r5, #8
 800a4dc:	444c      	add	r4, r9
 800a4de:	1b2d      	subs	r5, r5, r4
 800a4e0:	1963      	adds	r3, r4, r5
 800a4e2:	42bb      	cmp	r3, r7
 800a4e4:	db04      	blt.n	800a4f0 <__s2b+0x78>
 800a4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ea:	340a      	adds	r4, #10
 800a4ec:	2509      	movs	r5, #9
 800a4ee:	e7f6      	b.n	800a4de <__s2b+0x66>
 800a4f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4f4:	4601      	mov	r1, r0
 800a4f6:	3b30      	subs	r3, #48	; 0x30
 800a4f8:	220a      	movs	r2, #10
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f7ff ff76 	bl	800a3ec <__multadd>
 800a500:	e7ee      	b.n	800a4e0 <__s2b+0x68>
 800a502:	bf00      	nop
 800a504:	0800baa9 	.word	0x0800baa9
 800a508:	0800bb1a 	.word	0x0800bb1a

0800a50c <__hi0bits>:
 800a50c:	0c03      	lsrs	r3, r0, #16
 800a50e:	041b      	lsls	r3, r3, #16
 800a510:	b9d3      	cbnz	r3, 800a548 <__hi0bits+0x3c>
 800a512:	0400      	lsls	r0, r0, #16
 800a514:	2310      	movs	r3, #16
 800a516:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a51a:	bf04      	itt	eq
 800a51c:	0200      	lsleq	r0, r0, #8
 800a51e:	3308      	addeq	r3, #8
 800a520:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a524:	bf04      	itt	eq
 800a526:	0100      	lsleq	r0, r0, #4
 800a528:	3304      	addeq	r3, #4
 800a52a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a52e:	bf04      	itt	eq
 800a530:	0080      	lsleq	r0, r0, #2
 800a532:	3302      	addeq	r3, #2
 800a534:	2800      	cmp	r0, #0
 800a536:	db05      	blt.n	800a544 <__hi0bits+0x38>
 800a538:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a53c:	f103 0301 	add.w	r3, r3, #1
 800a540:	bf08      	it	eq
 800a542:	2320      	moveq	r3, #32
 800a544:	4618      	mov	r0, r3
 800a546:	4770      	bx	lr
 800a548:	2300      	movs	r3, #0
 800a54a:	e7e4      	b.n	800a516 <__hi0bits+0xa>

0800a54c <__lo0bits>:
 800a54c:	6803      	ldr	r3, [r0, #0]
 800a54e:	f013 0207 	ands.w	r2, r3, #7
 800a552:	d00c      	beq.n	800a56e <__lo0bits+0x22>
 800a554:	07d9      	lsls	r1, r3, #31
 800a556:	d422      	bmi.n	800a59e <__lo0bits+0x52>
 800a558:	079a      	lsls	r2, r3, #30
 800a55a:	bf49      	itett	mi
 800a55c:	085b      	lsrmi	r3, r3, #1
 800a55e:	089b      	lsrpl	r3, r3, #2
 800a560:	6003      	strmi	r3, [r0, #0]
 800a562:	2201      	movmi	r2, #1
 800a564:	bf5c      	itt	pl
 800a566:	6003      	strpl	r3, [r0, #0]
 800a568:	2202      	movpl	r2, #2
 800a56a:	4610      	mov	r0, r2
 800a56c:	4770      	bx	lr
 800a56e:	b299      	uxth	r1, r3
 800a570:	b909      	cbnz	r1, 800a576 <__lo0bits+0x2a>
 800a572:	0c1b      	lsrs	r3, r3, #16
 800a574:	2210      	movs	r2, #16
 800a576:	b2d9      	uxtb	r1, r3
 800a578:	b909      	cbnz	r1, 800a57e <__lo0bits+0x32>
 800a57a:	3208      	adds	r2, #8
 800a57c:	0a1b      	lsrs	r3, r3, #8
 800a57e:	0719      	lsls	r1, r3, #28
 800a580:	bf04      	itt	eq
 800a582:	091b      	lsreq	r3, r3, #4
 800a584:	3204      	addeq	r2, #4
 800a586:	0799      	lsls	r1, r3, #30
 800a588:	bf04      	itt	eq
 800a58a:	089b      	lsreq	r3, r3, #2
 800a58c:	3202      	addeq	r2, #2
 800a58e:	07d9      	lsls	r1, r3, #31
 800a590:	d403      	bmi.n	800a59a <__lo0bits+0x4e>
 800a592:	085b      	lsrs	r3, r3, #1
 800a594:	f102 0201 	add.w	r2, r2, #1
 800a598:	d003      	beq.n	800a5a2 <__lo0bits+0x56>
 800a59a:	6003      	str	r3, [r0, #0]
 800a59c:	e7e5      	b.n	800a56a <__lo0bits+0x1e>
 800a59e:	2200      	movs	r2, #0
 800a5a0:	e7e3      	b.n	800a56a <__lo0bits+0x1e>
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	e7e1      	b.n	800a56a <__lo0bits+0x1e>
	...

0800a5a8 <__i2b>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	f7ff febb 	bl	800a328 <_Balloc>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	b928      	cbnz	r0, 800a5c2 <__i2b+0x1a>
 800a5b6:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <__i2b+0x24>)
 800a5b8:	4805      	ldr	r0, [pc, #20]	; (800a5d0 <__i2b+0x28>)
 800a5ba:	f240 1145 	movw	r1, #325	; 0x145
 800a5be:	f7fe fc65 	bl	8008e8c <__assert_func>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	6144      	str	r4, [r0, #20]
 800a5c6:	6103      	str	r3, [r0, #16]
 800a5c8:	bd10      	pop	{r4, pc}
 800a5ca:	bf00      	nop
 800a5cc:	0800baa9 	.word	0x0800baa9
 800a5d0:	0800bb1a 	.word	0x0800bb1a

0800a5d4 <__multiply>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	4691      	mov	r9, r2
 800a5da:	690a      	ldr	r2, [r1, #16]
 800a5dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	bfb8      	it	lt
 800a5e4:	460b      	movlt	r3, r1
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	bfbc      	itt	lt
 800a5ea:	464c      	movlt	r4, r9
 800a5ec:	4699      	movlt	r9, r3
 800a5ee:	6927      	ldr	r7, [r4, #16]
 800a5f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5f4:	68a3      	ldr	r3, [r4, #8]
 800a5f6:	6861      	ldr	r1, [r4, #4]
 800a5f8:	eb07 060a 	add.w	r6, r7, sl
 800a5fc:	42b3      	cmp	r3, r6
 800a5fe:	b085      	sub	sp, #20
 800a600:	bfb8      	it	lt
 800a602:	3101      	addlt	r1, #1
 800a604:	f7ff fe90 	bl	800a328 <_Balloc>
 800a608:	b930      	cbnz	r0, 800a618 <__multiply+0x44>
 800a60a:	4602      	mov	r2, r0
 800a60c:	4b44      	ldr	r3, [pc, #272]	; (800a720 <__multiply+0x14c>)
 800a60e:	4845      	ldr	r0, [pc, #276]	; (800a724 <__multiply+0x150>)
 800a610:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a614:	f7fe fc3a 	bl	8008e8c <__assert_func>
 800a618:	f100 0514 	add.w	r5, r0, #20
 800a61c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a620:	462b      	mov	r3, r5
 800a622:	2200      	movs	r2, #0
 800a624:	4543      	cmp	r3, r8
 800a626:	d321      	bcc.n	800a66c <__multiply+0x98>
 800a628:	f104 0314 	add.w	r3, r4, #20
 800a62c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a630:	f109 0314 	add.w	r3, r9, #20
 800a634:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a638:	9202      	str	r2, [sp, #8]
 800a63a:	1b3a      	subs	r2, r7, r4
 800a63c:	3a15      	subs	r2, #21
 800a63e:	f022 0203 	bic.w	r2, r2, #3
 800a642:	3204      	adds	r2, #4
 800a644:	f104 0115 	add.w	r1, r4, #21
 800a648:	428f      	cmp	r7, r1
 800a64a:	bf38      	it	cc
 800a64c:	2204      	movcc	r2, #4
 800a64e:	9201      	str	r2, [sp, #4]
 800a650:	9a02      	ldr	r2, [sp, #8]
 800a652:	9303      	str	r3, [sp, #12]
 800a654:	429a      	cmp	r2, r3
 800a656:	d80c      	bhi.n	800a672 <__multiply+0x9e>
 800a658:	2e00      	cmp	r6, #0
 800a65a:	dd03      	ble.n	800a664 <__multiply+0x90>
 800a65c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a660:	2b00      	cmp	r3, #0
 800a662:	d05b      	beq.n	800a71c <__multiply+0x148>
 800a664:	6106      	str	r6, [r0, #16]
 800a666:	b005      	add	sp, #20
 800a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66c:	f843 2b04 	str.w	r2, [r3], #4
 800a670:	e7d8      	b.n	800a624 <__multiply+0x50>
 800a672:	f8b3 a000 	ldrh.w	sl, [r3]
 800a676:	f1ba 0f00 	cmp.w	sl, #0
 800a67a:	d024      	beq.n	800a6c6 <__multiply+0xf2>
 800a67c:	f104 0e14 	add.w	lr, r4, #20
 800a680:	46a9      	mov	r9, r5
 800a682:	f04f 0c00 	mov.w	ip, #0
 800a686:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a68a:	f8d9 1000 	ldr.w	r1, [r9]
 800a68e:	fa1f fb82 	uxth.w	fp, r2
 800a692:	b289      	uxth	r1, r1
 800a694:	fb0a 110b 	mla	r1, sl, fp, r1
 800a698:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a69c:	f8d9 2000 	ldr.w	r2, [r9]
 800a6a0:	4461      	add	r1, ip
 800a6a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6ae:	b289      	uxth	r1, r1
 800a6b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6b4:	4577      	cmp	r7, lr
 800a6b6:	f849 1b04 	str.w	r1, [r9], #4
 800a6ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6be:	d8e2      	bhi.n	800a686 <__multiply+0xb2>
 800a6c0:	9a01      	ldr	r2, [sp, #4]
 800a6c2:	f845 c002 	str.w	ip, [r5, r2]
 800a6c6:	9a03      	ldr	r2, [sp, #12]
 800a6c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	f1b9 0f00 	cmp.w	r9, #0
 800a6d2:	d021      	beq.n	800a718 <__multiply+0x144>
 800a6d4:	6829      	ldr	r1, [r5, #0]
 800a6d6:	f104 0c14 	add.w	ip, r4, #20
 800a6da:	46ae      	mov	lr, r5
 800a6dc:	f04f 0a00 	mov.w	sl, #0
 800a6e0:	f8bc b000 	ldrh.w	fp, [ip]
 800a6e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6e8:	fb09 220b 	mla	r2, r9, fp, r2
 800a6ec:	4452      	add	r2, sl
 800a6ee:	b289      	uxth	r1, r1
 800a6f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6f4:	f84e 1b04 	str.w	r1, [lr], #4
 800a6f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a700:	f8be 1000 	ldrh.w	r1, [lr]
 800a704:	fb09 110a 	mla	r1, r9, sl, r1
 800a708:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a70c:	4567      	cmp	r7, ip
 800a70e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a712:	d8e5      	bhi.n	800a6e0 <__multiply+0x10c>
 800a714:	9a01      	ldr	r2, [sp, #4]
 800a716:	50a9      	str	r1, [r5, r2]
 800a718:	3504      	adds	r5, #4
 800a71a:	e799      	b.n	800a650 <__multiply+0x7c>
 800a71c:	3e01      	subs	r6, #1
 800a71e:	e79b      	b.n	800a658 <__multiply+0x84>
 800a720:	0800baa9 	.word	0x0800baa9
 800a724:	0800bb1a 	.word	0x0800bb1a

0800a728 <__pow5mult>:
 800a728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a72c:	4615      	mov	r5, r2
 800a72e:	f012 0203 	ands.w	r2, r2, #3
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	d007      	beq.n	800a748 <__pow5mult+0x20>
 800a738:	4c25      	ldr	r4, [pc, #148]	; (800a7d0 <__pow5mult+0xa8>)
 800a73a:	3a01      	subs	r2, #1
 800a73c:	2300      	movs	r3, #0
 800a73e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a742:	f7ff fe53 	bl	800a3ec <__multadd>
 800a746:	4607      	mov	r7, r0
 800a748:	10ad      	asrs	r5, r5, #2
 800a74a:	d03d      	beq.n	800a7c8 <__pow5mult+0xa0>
 800a74c:	69f4      	ldr	r4, [r6, #28]
 800a74e:	b97c      	cbnz	r4, 800a770 <__pow5mult+0x48>
 800a750:	2010      	movs	r0, #16
 800a752:	f7fc fb77 	bl	8006e44 <malloc>
 800a756:	4602      	mov	r2, r0
 800a758:	61f0      	str	r0, [r6, #28]
 800a75a:	b928      	cbnz	r0, 800a768 <__pow5mult+0x40>
 800a75c:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <__pow5mult+0xac>)
 800a75e:	481e      	ldr	r0, [pc, #120]	; (800a7d8 <__pow5mult+0xb0>)
 800a760:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a764:	f7fe fb92 	bl	8008e8c <__assert_func>
 800a768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a76c:	6004      	str	r4, [r0, #0]
 800a76e:	60c4      	str	r4, [r0, #12]
 800a770:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a778:	b94c      	cbnz	r4, 800a78e <__pow5mult+0x66>
 800a77a:	f240 2171 	movw	r1, #625	; 0x271
 800a77e:	4630      	mov	r0, r6
 800a780:	f7ff ff12 	bl	800a5a8 <__i2b>
 800a784:	2300      	movs	r3, #0
 800a786:	f8c8 0008 	str.w	r0, [r8, #8]
 800a78a:	4604      	mov	r4, r0
 800a78c:	6003      	str	r3, [r0, #0]
 800a78e:	f04f 0900 	mov.w	r9, #0
 800a792:	07eb      	lsls	r3, r5, #31
 800a794:	d50a      	bpl.n	800a7ac <__pow5mult+0x84>
 800a796:	4639      	mov	r1, r7
 800a798:	4622      	mov	r2, r4
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7ff ff1a 	bl	800a5d4 <__multiply>
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f7ff fdff 	bl	800a3a8 <_Bfree>
 800a7aa:	4647      	mov	r7, r8
 800a7ac:	106d      	asrs	r5, r5, #1
 800a7ae:	d00b      	beq.n	800a7c8 <__pow5mult+0xa0>
 800a7b0:	6820      	ldr	r0, [r4, #0]
 800a7b2:	b938      	cbnz	r0, 800a7c4 <__pow5mult+0x9c>
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7ff ff0b 	bl	800a5d4 <__multiply>
 800a7be:	6020      	str	r0, [r4, #0]
 800a7c0:	f8c0 9000 	str.w	r9, [r0]
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	e7e4      	b.n	800a792 <__pow5mult+0x6a>
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ce:	bf00      	nop
 800a7d0:	0800bc68 	.word	0x0800bc68
 800a7d4:	0800ba3a 	.word	0x0800ba3a
 800a7d8:	0800bb1a 	.word	0x0800bb1a

0800a7dc <__lshift>:
 800a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	6849      	ldr	r1, [r1, #4]
 800a7e4:	6923      	ldr	r3, [r4, #16]
 800a7e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7ea:	68a3      	ldr	r3, [r4, #8]
 800a7ec:	4607      	mov	r7, r0
 800a7ee:	4691      	mov	r9, r2
 800a7f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7f4:	f108 0601 	add.w	r6, r8, #1
 800a7f8:	42b3      	cmp	r3, r6
 800a7fa:	db0b      	blt.n	800a814 <__lshift+0x38>
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f7ff fd93 	bl	800a328 <_Balloc>
 800a802:	4605      	mov	r5, r0
 800a804:	b948      	cbnz	r0, 800a81a <__lshift+0x3e>
 800a806:	4602      	mov	r2, r0
 800a808:	4b28      	ldr	r3, [pc, #160]	; (800a8ac <__lshift+0xd0>)
 800a80a:	4829      	ldr	r0, [pc, #164]	; (800a8b0 <__lshift+0xd4>)
 800a80c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a810:	f7fe fb3c 	bl	8008e8c <__assert_func>
 800a814:	3101      	adds	r1, #1
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	e7ee      	b.n	800a7f8 <__lshift+0x1c>
 800a81a:	2300      	movs	r3, #0
 800a81c:	f100 0114 	add.w	r1, r0, #20
 800a820:	f100 0210 	add.w	r2, r0, #16
 800a824:	4618      	mov	r0, r3
 800a826:	4553      	cmp	r3, sl
 800a828:	db33      	blt.n	800a892 <__lshift+0xb6>
 800a82a:	6920      	ldr	r0, [r4, #16]
 800a82c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a830:	f104 0314 	add.w	r3, r4, #20
 800a834:	f019 091f 	ands.w	r9, r9, #31
 800a838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a83c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a840:	d02b      	beq.n	800a89a <__lshift+0xbe>
 800a842:	f1c9 0e20 	rsb	lr, r9, #32
 800a846:	468a      	mov	sl, r1
 800a848:	2200      	movs	r2, #0
 800a84a:	6818      	ldr	r0, [r3, #0]
 800a84c:	fa00 f009 	lsl.w	r0, r0, r9
 800a850:	4310      	orrs	r0, r2
 800a852:	f84a 0b04 	str.w	r0, [sl], #4
 800a856:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85a:	459c      	cmp	ip, r3
 800a85c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a860:	d8f3      	bhi.n	800a84a <__lshift+0x6e>
 800a862:	ebac 0304 	sub.w	r3, ip, r4
 800a866:	3b15      	subs	r3, #21
 800a868:	f023 0303 	bic.w	r3, r3, #3
 800a86c:	3304      	adds	r3, #4
 800a86e:	f104 0015 	add.w	r0, r4, #21
 800a872:	4584      	cmp	ip, r0
 800a874:	bf38      	it	cc
 800a876:	2304      	movcc	r3, #4
 800a878:	50ca      	str	r2, [r1, r3]
 800a87a:	b10a      	cbz	r2, 800a880 <__lshift+0xa4>
 800a87c:	f108 0602 	add.w	r6, r8, #2
 800a880:	3e01      	subs	r6, #1
 800a882:	4638      	mov	r0, r7
 800a884:	612e      	str	r6, [r5, #16]
 800a886:	4621      	mov	r1, r4
 800a888:	f7ff fd8e 	bl	800a3a8 <_Bfree>
 800a88c:	4628      	mov	r0, r5
 800a88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a892:	f842 0f04 	str.w	r0, [r2, #4]!
 800a896:	3301      	adds	r3, #1
 800a898:	e7c5      	b.n	800a826 <__lshift+0x4a>
 800a89a:	3904      	subs	r1, #4
 800a89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8a4:	459c      	cmp	ip, r3
 800a8a6:	d8f9      	bhi.n	800a89c <__lshift+0xc0>
 800a8a8:	e7ea      	b.n	800a880 <__lshift+0xa4>
 800a8aa:	bf00      	nop
 800a8ac:	0800baa9 	.word	0x0800baa9
 800a8b0:	0800bb1a 	.word	0x0800bb1a

0800a8b4 <__mcmp>:
 800a8b4:	b530      	push	{r4, r5, lr}
 800a8b6:	6902      	ldr	r2, [r0, #16]
 800a8b8:	690c      	ldr	r4, [r1, #16]
 800a8ba:	1b12      	subs	r2, r2, r4
 800a8bc:	d10e      	bne.n	800a8dc <__mcmp+0x28>
 800a8be:	f100 0314 	add.w	r3, r0, #20
 800a8c2:	3114      	adds	r1, #20
 800a8c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8d4:	42a5      	cmp	r5, r4
 800a8d6:	d003      	beq.n	800a8e0 <__mcmp+0x2c>
 800a8d8:	d305      	bcc.n	800a8e6 <__mcmp+0x32>
 800a8da:	2201      	movs	r2, #1
 800a8dc:	4610      	mov	r0, r2
 800a8de:	bd30      	pop	{r4, r5, pc}
 800a8e0:	4283      	cmp	r3, r0
 800a8e2:	d3f3      	bcc.n	800a8cc <__mcmp+0x18>
 800a8e4:	e7fa      	b.n	800a8dc <__mcmp+0x28>
 800a8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ea:	e7f7      	b.n	800a8dc <__mcmp+0x28>

0800a8ec <__mdiff>:
 800a8ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4690      	mov	r8, r2
 800a8fa:	f7ff ffdb 	bl	800a8b4 <__mcmp>
 800a8fe:	1e05      	subs	r5, r0, #0
 800a900:	d110      	bne.n	800a924 <__mdiff+0x38>
 800a902:	4629      	mov	r1, r5
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff fd0f 	bl	800a328 <_Balloc>
 800a90a:	b930      	cbnz	r0, 800a91a <__mdiff+0x2e>
 800a90c:	4b3a      	ldr	r3, [pc, #232]	; (800a9f8 <__mdiff+0x10c>)
 800a90e:	4602      	mov	r2, r0
 800a910:	f240 2137 	movw	r1, #567	; 0x237
 800a914:	4839      	ldr	r0, [pc, #228]	; (800a9fc <__mdiff+0x110>)
 800a916:	f7fe fab9 	bl	8008e8c <__assert_func>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a924:	bfa4      	itt	ge
 800a926:	4643      	movge	r3, r8
 800a928:	46a0      	movge	r8, r4
 800a92a:	4630      	mov	r0, r6
 800a92c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a930:	bfa6      	itte	ge
 800a932:	461c      	movge	r4, r3
 800a934:	2500      	movge	r5, #0
 800a936:	2501      	movlt	r5, #1
 800a938:	f7ff fcf6 	bl	800a328 <_Balloc>
 800a93c:	b920      	cbnz	r0, 800a948 <__mdiff+0x5c>
 800a93e:	4b2e      	ldr	r3, [pc, #184]	; (800a9f8 <__mdiff+0x10c>)
 800a940:	4602      	mov	r2, r0
 800a942:	f240 2145 	movw	r1, #581	; 0x245
 800a946:	e7e5      	b.n	800a914 <__mdiff+0x28>
 800a948:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a94c:	6926      	ldr	r6, [r4, #16]
 800a94e:	60c5      	str	r5, [r0, #12]
 800a950:	f104 0914 	add.w	r9, r4, #20
 800a954:	f108 0514 	add.w	r5, r8, #20
 800a958:	f100 0e14 	add.w	lr, r0, #20
 800a95c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a960:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a964:	f108 0210 	add.w	r2, r8, #16
 800a968:	46f2      	mov	sl, lr
 800a96a:	2100      	movs	r1, #0
 800a96c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a970:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a974:	fa11 f88b 	uxtah	r8, r1, fp
 800a978:	b299      	uxth	r1, r3
 800a97a:	0c1b      	lsrs	r3, r3, #16
 800a97c:	eba8 0801 	sub.w	r8, r8, r1
 800a980:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a984:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a988:	fa1f f888 	uxth.w	r8, r8
 800a98c:	1419      	asrs	r1, r3, #16
 800a98e:	454e      	cmp	r6, r9
 800a990:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a994:	f84a 3b04 	str.w	r3, [sl], #4
 800a998:	d8e8      	bhi.n	800a96c <__mdiff+0x80>
 800a99a:	1b33      	subs	r3, r6, r4
 800a99c:	3b15      	subs	r3, #21
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	3415      	adds	r4, #21
 800a9a6:	42a6      	cmp	r6, r4
 800a9a8:	bf38      	it	cc
 800a9aa:	2304      	movcc	r3, #4
 800a9ac:	441d      	add	r5, r3
 800a9ae:	4473      	add	r3, lr
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	462e      	mov	r6, r5
 800a9b4:	4566      	cmp	r6, ip
 800a9b6:	d30e      	bcc.n	800a9d6 <__mdiff+0xea>
 800a9b8:	f10c 0203 	add.w	r2, ip, #3
 800a9bc:	1b52      	subs	r2, r2, r5
 800a9be:	f022 0203 	bic.w	r2, r2, #3
 800a9c2:	3d03      	subs	r5, #3
 800a9c4:	45ac      	cmp	ip, r5
 800a9c6:	bf38      	it	cc
 800a9c8:	2200      	movcc	r2, #0
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a9d0:	b17a      	cbz	r2, 800a9f2 <__mdiff+0x106>
 800a9d2:	6107      	str	r7, [r0, #16]
 800a9d4:	e7a4      	b.n	800a920 <__mdiff+0x34>
 800a9d6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9da:	fa11 f288 	uxtah	r2, r1, r8
 800a9de:	1414      	asrs	r4, r2, #16
 800a9e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9e4:	b292      	uxth	r2, r2
 800a9e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9ea:	f84e 2b04 	str.w	r2, [lr], #4
 800a9ee:	1421      	asrs	r1, r4, #16
 800a9f0:	e7e0      	b.n	800a9b4 <__mdiff+0xc8>
 800a9f2:	3f01      	subs	r7, #1
 800a9f4:	e7ea      	b.n	800a9cc <__mdiff+0xe0>
 800a9f6:	bf00      	nop
 800a9f8:	0800baa9 	.word	0x0800baa9
 800a9fc:	0800bb1a 	.word	0x0800bb1a

0800aa00 <__ulp>:
 800aa00:	b082      	sub	sp, #8
 800aa02:	ed8d 0b00 	vstr	d0, [sp]
 800aa06:	9a01      	ldr	r2, [sp, #4]
 800aa08:	4b0f      	ldr	r3, [pc, #60]	; (800aa48 <__ulp+0x48>)
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dc08      	bgt.n	800aa26 <__ulp+0x26>
 800aa14:	425b      	negs	r3, r3
 800aa16:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aa1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa1e:	da04      	bge.n	800aa2a <__ulp+0x2a>
 800aa20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa24:	4113      	asrs	r3, r2
 800aa26:	2200      	movs	r2, #0
 800aa28:	e008      	b.n	800aa3c <__ulp+0x3c>
 800aa2a:	f1a2 0314 	sub.w	r3, r2, #20
 800aa2e:	2b1e      	cmp	r3, #30
 800aa30:	bfda      	itte	le
 800aa32:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aa36:	40da      	lsrle	r2, r3
 800aa38:	2201      	movgt	r2, #1
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	ec41 0b10 	vmov	d0, r0, r1
 800aa44:	b002      	add	sp, #8
 800aa46:	4770      	bx	lr
 800aa48:	7ff00000 	.word	0x7ff00000

0800aa4c <__b2d>:
 800aa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa50:	6906      	ldr	r6, [r0, #16]
 800aa52:	f100 0814 	add.w	r8, r0, #20
 800aa56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa5a:	1f37      	subs	r7, r6, #4
 800aa5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa60:	4610      	mov	r0, r2
 800aa62:	f7ff fd53 	bl	800a50c <__hi0bits>
 800aa66:	f1c0 0320 	rsb	r3, r0, #32
 800aa6a:	280a      	cmp	r0, #10
 800aa6c:	600b      	str	r3, [r1, #0]
 800aa6e:	491b      	ldr	r1, [pc, #108]	; (800aadc <__b2d+0x90>)
 800aa70:	dc15      	bgt.n	800aa9e <__b2d+0x52>
 800aa72:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa76:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa7a:	45b8      	cmp	r8, r7
 800aa7c:	ea43 0501 	orr.w	r5, r3, r1
 800aa80:	bf34      	ite	cc
 800aa82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa86:	2300      	movcs	r3, #0
 800aa88:	3015      	adds	r0, #21
 800aa8a:	fa02 f000 	lsl.w	r0, r2, r0
 800aa8e:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa92:	4303      	orrs	r3, r0
 800aa94:	461c      	mov	r4, r3
 800aa96:	ec45 4b10 	vmov	d0, r4, r5
 800aa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa9e:	45b8      	cmp	r8, r7
 800aaa0:	bf3a      	itte	cc
 800aaa2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aaa6:	f1a6 0708 	subcc.w	r7, r6, #8
 800aaaa:	2300      	movcs	r3, #0
 800aaac:	380b      	subs	r0, #11
 800aaae:	d012      	beq.n	800aad6 <__b2d+0x8a>
 800aab0:	f1c0 0120 	rsb	r1, r0, #32
 800aab4:	fa23 f401 	lsr.w	r4, r3, r1
 800aab8:	4082      	lsls	r2, r0
 800aaba:	4322      	orrs	r2, r4
 800aabc:	4547      	cmp	r7, r8
 800aabe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aac2:	bf8c      	ite	hi
 800aac4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aac8:	2200      	movls	r2, #0
 800aaca:	4083      	lsls	r3, r0
 800aacc:	40ca      	lsrs	r2, r1
 800aace:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aad2:	4313      	orrs	r3, r2
 800aad4:	e7de      	b.n	800aa94 <__b2d+0x48>
 800aad6:	ea42 0501 	orr.w	r5, r2, r1
 800aada:	e7db      	b.n	800aa94 <__b2d+0x48>
 800aadc:	3ff00000 	.word	0x3ff00000

0800aae0 <__d2b>:
 800aae0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aae4:	460f      	mov	r7, r1
 800aae6:	2101      	movs	r1, #1
 800aae8:	ec59 8b10 	vmov	r8, r9, d0
 800aaec:	4616      	mov	r6, r2
 800aaee:	f7ff fc1b 	bl	800a328 <_Balloc>
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	b930      	cbnz	r0, 800ab04 <__d2b+0x24>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	4b24      	ldr	r3, [pc, #144]	; (800ab8c <__d2b+0xac>)
 800aafa:	4825      	ldr	r0, [pc, #148]	; (800ab90 <__d2b+0xb0>)
 800aafc:	f240 310f 	movw	r1, #783	; 0x30f
 800ab00:	f7fe f9c4 	bl	8008e8c <__assert_func>
 800ab04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab0c:	bb2d      	cbnz	r5, 800ab5a <__d2b+0x7a>
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	f1b8 0300 	subs.w	r3, r8, #0
 800ab14:	d026      	beq.n	800ab64 <__d2b+0x84>
 800ab16:	4668      	mov	r0, sp
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	f7ff fd17 	bl	800a54c <__lo0bits>
 800ab1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab22:	b1e8      	cbz	r0, 800ab60 <__d2b+0x80>
 800ab24:	f1c0 0320 	rsb	r3, r0, #32
 800ab28:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2c:	430b      	orrs	r3, r1
 800ab2e:	40c2      	lsrs	r2, r0
 800ab30:	6163      	str	r3, [r4, #20]
 800ab32:	9201      	str	r2, [sp, #4]
 800ab34:	9b01      	ldr	r3, [sp, #4]
 800ab36:	61a3      	str	r3, [r4, #24]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	bf14      	ite	ne
 800ab3c:	2202      	movne	r2, #2
 800ab3e:	2201      	moveq	r2, #1
 800ab40:	6122      	str	r2, [r4, #16]
 800ab42:	b1bd      	cbz	r5, 800ab74 <__d2b+0x94>
 800ab44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab48:	4405      	add	r5, r0
 800ab4a:	603d      	str	r5, [r7, #0]
 800ab4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab50:	6030      	str	r0, [r6, #0]
 800ab52:	4620      	mov	r0, r4
 800ab54:	b003      	add	sp, #12
 800ab56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab5e:	e7d6      	b.n	800ab0e <__d2b+0x2e>
 800ab60:	6161      	str	r1, [r4, #20]
 800ab62:	e7e7      	b.n	800ab34 <__d2b+0x54>
 800ab64:	a801      	add	r0, sp, #4
 800ab66:	f7ff fcf1 	bl	800a54c <__lo0bits>
 800ab6a:	9b01      	ldr	r3, [sp, #4]
 800ab6c:	6163      	str	r3, [r4, #20]
 800ab6e:	3020      	adds	r0, #32
 800ab70:	2201      	movs	r2, #1
 800ab72:	e7e5      	b.n	800ab40 <__d2b+0x60>
 800ab74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab7c:	6038      	str	r0, [r7, #0]
 800ab7e:	6918      	ldr	r0, [r3, #16]
 800ab80:	f7ff fcc4 	bl	800a50c <__hi0bits>
 800ab84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab88:	e7e2      	b.n	800ab50 <__d2b+0x70>
 800ab8a:	bf00      	nop
 800ab8c:	0800baa9 	.word	0x0800baa9
 800ab90:	0800bb1a 	.word	0x0800bb1a

0800ab94 <__ratio>:
 800ab94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab98:	4688      	mov	r8, r1
 800ab9a:	4669      	mov	r1, sp
 800ab9c:	4681      	mov	r9, r0
 800ab9e:	f7ff ff55 	bl	800aa4c <__b2d>
 800aba2:	a901      	add	r1, sp, #4
 800aba4:	4640      	mov	r0, r8
 800aba6:	ec55 4b10 	vmov	r4, r5, d0
 800abaa:	f7ff ff4f 	bl	800aa4c <__b2d>
 800abae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800abb6:	eba3 0c02 	sub.w	ip, r3, r2
 800abba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abbe:	1a9b      	subs	r3, r3, r2
 800abc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800abc4:	ec51 0b10 	vmov	r0, r1, d0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bfd6      	itet	le
 800abcc:	460a      	movle	r2, r1
 800abce:	462a      	movgt	r2, r5
 800abd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abd4:	468b      	mov	fp, r1
 800abd6:	462f      	mov	r7, r5
 800abd8:	bfd4      	ite	le
 800abda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800abde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abe2:	4620      	mov	r0, r4
 800abe4:	ee10 2a10 	vmov	r2, s0
 800abe8:	465b      	mov	r3, fp
 800abea:	4639      	mov	r1, r7
 800abec:	f7f5 fe36 	bl	800085c <__aeabi_ddiv>
 800abf0:	ec41 0b10 	vmov	d0, r0, r1
 800abf4:	b003      	add	sp, #12
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abfa <__copybits>:
 800abfa:	3901      	subs	r1, #1
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	1149      	asrs	r1, r1, #5
 800ac00:	6914      	ldr	r4, [r2, #16]
 800ac02:	3101      	adds	r1, #1
 800ac04:	f102 0314 	add.w	r3, r2, #20
 800ac08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac10:	1f05      	subs	r5, r0, #4
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	d30c      	bcc.n	800ac30 <__copybits+0x36>
 800ac16:	1aa3      	subs	r3, r4, r2
 800ac18:	3b11      	subs	r3, #17
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	3211      	adds	r2, #17
 800ac20:	42a2      	cmp	r2, r4
 800ac22:	bf88      	it	hi
 800ac24:	2300      	movhi	r3, #0
 800ac26:	4418      	add	r0, r3
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4288      	cmp	r0, r1
 800ac2c:	d305      	bcc.n	800ac3a <__copybits+0x40>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac34:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac38:	e7eb      	b.n	800ac12 <__copybits+0x18>
 800ac3a:	f840 3b04 	str.w	r3, [r0], #4
 800ac3e:	e7f4      	b.n	800ac2a <__copybits+0x30>

0800ac40 <__any_on>:
 800ac40:	f100 0214 	add.w	r2, r0, #20
 800ac44:	6900      	ldr	r0, [r0, #16]
 800ac46:	114b      	asrs	r3, r1, #5
 800ac48:	4298      	cmp	r0, r3
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	db11      	blt.n	800ac72 <__any_on+0x32>
 800ac4e:	dd0a      	ble.n	800ac66 <__any_on+0x26>
 800ac50:	f011 011f 	ands.w	r1, r1, #31
 800ac54:	d007      	beq.n	800ac66 <__any_on+0x26>
 800ac56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac5a:	fa24 f001 	lsr.w	r0, r4, r1
 800ac5e:	fa00 f101 	lsl.w	r1, r0, r1
 800ac62:	428c      	cmp	r4, r1
 800ac64:	d10b      	bne.n	800ac7e <__any_on+0x3e>
 800ac66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d803      	bhi.n	800ac76 <__any_on+0x36>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	bd10      	pop	{r4, pc}
 800ac72:	4603      	mov	r3, r0
 800ac74:	e7f7      	b.n	800ac66 <__any_on+0x26>
 800ac76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	d0f5      	beq.n	800ac6a <__any_on+0x2a>
 800ac7e:	2001      	movs	r0, #1
 800ac80:	e7f6      	b.n	800ac70 <__any_on+0x30>
	...

0800ac84 <_strtol_l.constprop.0>:
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8a:	d001      	beq.n	800ac90 <_strtol_l.constprop.0+0xc>
 800ac8c:	2b24      	cmp	r3, #36	; 0x24
 800ac8e:	d906      	bls.n	800ac9e <_strtol_l.constprop.0+0x1a>
 800ac90:	f7fe f8b2 	bl	8008df8 <__errno>
 800ac94:	2316      	movs	r3, #22
 800ac96:	6003      	str	r3, [r0, #0]
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad84 <_strtol_l.constprop.0+0x100>
 800aca2:	460d      	mov	r5, r1
 800aca4:	462e      	mov	r6, r5
 800aca6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acaa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800acae:	f017 0708 	ands.w	r7, r7, #8
 800acb2:	d1f7      	bne.n	800aca4 <_strtol_l.constprop.0+0x20>
 800acb4:	2c2d      	cmp	r4, #45	; 0x2d
 800acb6:	d132      	bne.n	800ad1e <_strtol_l.constprop.0+0x9a>
 800acb8:	782c      	ldrb	r4, [r5, #0]
 800acba:	2701      	movs	r7, #1
 800acbc:	1cb5      	adds	r5, r6, #2
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d05b      	beq.n	800ad7a <_strtol_l.constprop.0+0xf6>
 800acc2:	2b10      	cmp	r3, #16
 800acc4:	d109      	bne.n	800acda <_strtol_l.constprop.0+0x56>
 800acc6:	2c30      	cmp	r4, #48	; 0x30
 800acc8:	d107      	bne.n	800acda <_strtol_l.constprop.0+0x56>
 800acca:	782c      	ldrb	r4, [r5, #0]
 800accc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800acd0:	2c58      	cmp	r4, #88	; 0x58
 800acd2:	d14d      	bne.n	800ad70 <_strtol_l.constprop.0+0xec>
 800acd4:	786c      	ldrb	r4, [r5, #1]
 800acd6:	2310      	movs	r3, #16
 800acd8:	3502      	adds	r5, #2
 800acda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800acde:	f108 38ff 	add.w	r8, r8, #4294967295
 800ace2:	f04f 0e00 	mov.w	lr, #0
 800ace6:	fbb8 f9f3 	udiv	r9, r8, r3
 800acea:	4676      	mov	r6, lr
 800acec:	fb03 8a19 	mls	sl, r3, r9, r8
 800acf0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800acf4:	f1bc 0f09 	cmp.w	ip, #9
 800acf8:	d816      	bhi.n	800ad28 <_strtol_l.constprop.0+0xa4>
 800acfa:	4664      	mov	r4, ip
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	dd24      	ble.n	800ad4a <_strtol_l.constprop.0+0xc6>
 800ad00:	f1be 3fff 	cmp.w	lr, #4294967295
 800ad04:	d008      	beq.n	800ad18 <_strtol_l.constprop.0+0x94>
 800ad06:	45b1      	cmp	r9, r6
 800ad08:	d31c      	bcc.n	800ad44 <_strtol_l.constprop.0+0xc0>
 800ad0a:	d101      	bne.n	800ad10 <_strtol_l.constprop.0+0x8c>
 800ad0c:	45a2      	cmp	sl, r4
 800ad0e:	db19      	blt.n	800ad44 <_strtol_l.constprop.0+0xc0>
 800ad10:	fb06 4603 	mla	r6, r6, r3, r4
 800ad14:	f04f 0e01 	mov.w	lr, #1
 800ad18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad1c:	e7e8      	b.n	800acf0 <_strtol_l.constprop.0+0x6c>
 800ad1e:	2c2b      	cmp	r4, #43	; 0x2b
 800ad20:	bf04      	itt	eq
 800ad22:	782c      	ldrbeq	r4, [r5, #0]
 800ad24:	1cb5      	addeq	r5, r6, #2
 800ad26:	e7ca      	b.n	800acbe <_strtol_l.constprop.0+0x3a>
 800ad28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ad2c:	f1bc 0f19 	cmp.w	ip, #25
 800ad30:	d801      	bhi.n	800ad36 <_strtol_l.constprop.0+0xb2>
 800ad32:	3c37      	subs	r4, #55	; 0x37
 800ad34:	e7e2      	b.n	800acfc <_strtol_l.constprop.0+0x78>
 800ad36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ad3a:	f1bc 0f19 	cmp.w	ip, #25
 800ad3e:	d804      	bhi.n	800ad4a <_strtol_l.constprop.0+0xc6>
 800ad40:	3c57      	subs	r4, #87	; 0x57
 800ad42:	e7db      	b.n	800acfc <_strtol_l.constprop.0+0x78>
 800ad44:	f04f 3eff 	mov.w	lr, #4294967295
 800ad48:	e7e6      	b.n	800ad18 <_strtol_l.constprop.0+0x94>
 800ad4a:	f1be 3fff 	cmp.w	lr, #4294967295
 800ad4e:	d105      	bne.n	800ad5c <_strtol_l.constprop.0+0xd8>
 800ad50:	2322      	movs	r3, #34	; 0x22
 800ad52:	6003      	str	r3, [r0, #0]
 800ad54:	4646      	mov	r6, r8
 800ad56:	b942      	cbnz	r2, 800ad6a <_strtol_l.constprop.0+0xe6>
 800ad58:	4630      	mov	r0, r6
 800ad5a:	e79e      	b.n	800ac9a <_strtol_l.constprop.0+0x16>
 800ad5c:	b107      	cbz	r7, 800ad60 <_strtol_l.constprop.0+0xdc>
 800ad5e:	4276      	negs	r6, r6
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	d0f9      	beq.n	800ad58 <_strtol_l.constprop.0+0xd4>
 800ad64:	f1be 0f00 	cmp.w	lr, #0
 800ad68:	d000      	beq.n	800ad6c <_strtol_l.constprop.0+0xe8>
 800ad6a:	1e69      	subs	r1, r5, #1
 800ad6c:	6011      	str	r1, [r2, #0]
 800ad6e:	e7f3      	b.n	800ad58 <_strtol_l.constprop.0+0xd4>
 800ad70:	2430      	movs	r4, #48	; 0x30
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1b1      	bne.n	800acda <_strtol_l.constprop.0+0x56>
 800ad76:	2308      	movs	r3, #8
 800ad78:	e7af      	b.n	800acda <_strtol_l.constprop.0+0x56>
 800ad7a:	2c30      	cmp	r4, #48	; 0x30
 800ad7c:	d0a5      	beq.n	800acca <_strtol_l.constprop.0+0x46>
 800ad7e:	230a      	movs	r3, #10
 800ad80:	e7ab      	b.n	800acda <_strtol_l.constprop.0+0x56>
 800ad82:	bf00      	nop
 800ad84:	0800bc75 	.word	0x0800bc75

0800ad88 <_strtol_r>:
 800ad88:	f7ff bf7c 	b.w	800ac84 <_strtol_l.constprop.0>

0800ad8c <__ascii_wctomb>:
 800ad8c:	b149      	cbz	r1, 800ada2 <__ascii_wctomb+0x16>
 800ad8e:	2aff      	cmp	r2, #255	; 0xff
 800ad90:	bf85      	ittet	hi
 800ad92:	238a      	movhi	r3, #138	; 0x8a
 800ad94:	6003      	strhi	r3, [r0, #0]
 800ad96:	700a      	strbls	r2, [r1, #0]
 800ad98:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad9c:	bf98      	it	ls
 800ad9e:	2001      	movls	r0, #1
 800ada0:	4770      	bx	lr
 800ada2:	4608      	mov	r0, r1
 800ada4:	4770      	bx	lr

0800ada6 <__ssputs_r>:
 800ada6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adaa:	688e      	ldr	r6, [r1, #8]
 800adac:	461f      	mov	r7, r3
 800adae:	42be      	cmp	r6, r7
 800adb0:	680b      	ldr	r3, [r1, #0]
 800adb2:	4682      	mov	sl, r0
 800adb4:	460c      	mov	r4, r1
 800adb6:	4690      	mov	r8, r2
 800adb8:	d82c      	bhi.n	800ae14 <__ssputs_r+0x6e>
 800adba:	898a      	ldrh	r2, [r1, #12]
 800adbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adc0:	d026      	beq.n	800ae10 <__ssputs_r+0x6a>
 800adc2:	6965      	ldr	r5, [r4, #20]
 800adc4:	6909      	ldr	r1, [r1, #16]
 800adc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adca:	eba3 0901 	sub.w	r9, r3, r1
 800adce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800add2:	1c7b      	adds	r3, r7, #1
 800add4:	444b      	add	r3, r9
 800add6:	106d      	asrs	r5, r5, #1
 800add8:	429d      	cmp	r5, r3
 800adda:	bf38      	it	cc
 800addc:	461d      	movcc	r5, r3
 800adde:	0553      	lsls	r3, r2, #21
 800ade0:	d527      	bpl.n	800ae32 <__ssputs_r+0x8c>
 800ade2:	4629      	mov	r1, r5
 800ade4:	f7fc f856 	bl	8006e94 <_malloc_r>
 800ade8:	4606      	mov	r6, r0
 800adea:	b360      	cbz	r0, 800ae46 <__ssputs_r+0xa0>
 800adec:	6921      	ldr	r1, [r4, #16]
 800adee:	464a      	mov	r2, r9
 800adf0:	f7fe f82f 	bl	8008e52 <memcpy>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	6126      	str	r6, [r4, #16]
 800ae02:	6165      	str	r5, [r4, #20]
 800ae04:	444e      	add	r6, r9
 800ae06:	eba5 0509 	sub.w	r5, r5, r9
 800ae0a:	6026      	str	r6, [r4, #0]
 800ae0c:	60a5      	str	r5, [r4, #8]
 800ae0e:	463e      	mov	r6, r7
 800ae10:	42be      	cmp	r6, r7
 800ae12:	d900      	bls.n	800ae16 <__ssputs_r+0x70>
 800ae14:	463e      	mov	r6, r7
 800ae16:	6820      	ldr	r0, [r4, #0]
 800ae18:	4632      	mov	r2, r6
 800ae1a:	4641      	mov	r1, r8
 800ae1c:	f000 fb82 	bl	800b524 <memmove>
 800ae20:	68a3      	ldr	r3, [r4, #8]
 800ae22:	1b9b      	subs	r3, r3, r6
 800ae24:	60a3      	str	r3, [r4, #8]
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	4433      	add	r3, r6
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae32:	462a      	mov	r2, r5
 800ae34:	f000 fbcf 	bl	800b5d6 <_realloc_r>
 800ae38:	4606      	mov	r6, r0
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d1e0      	bne.n	800ae00 <__ssputs_r+0x5a>
 800ae3e:	6921      	ldr	r1, [r4, #16]
 800ae40:	4650      	mov	r0, sl
 800ae42:	f7fe febb 	bl	8009bbc <_free_r>
 800ae46:	230c      	movs	r3, #12
 800ae48:	f8ca 3000 	str.w	r3, [sl]
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	e7e9      	b.n	800ae2e <__ssputs_r+0x88>
	...

0800ae5c <_svfiprintf_r>:
 800ae5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae60:	4698      	mov	r8, r3
 800ae62:	898b      	ldrh	r3, [r1, #12]
 800ae64:	061b      	lsls	r3, r3, #24
 800ae66:	b09d      	sub	sp, #116	; 0x74
 800ae68:	4607      	mov	r7, r0
 800ae6a:	460d      	mov	r5, r1
 800ae6c:	4614      	mov	r4, r2
 800ae6e:	d50e      	bpl.n	800ae8e <_svfiprintf_r+0x32>
 800ae70:	690b      	ldr	r3, [r1, #16]
 800ae72:	b963      	cbnz	r3, 800ae8e <_svfiprintf_r+0x32>
 800ae74:	2140      	movs	r1, #64	; 0x40
 800ae76:	f7fc f80d 	bl	8006e94 <_malloc_r>
 800ae7a:	6028      	str	r0, [r5, #0]
 800ae7c:	6128      	str	r0, [r5, #16]
 800ae7e:	b920      	cbnz	r0, 800ae8a <_svfiprintf_r+0x2e>
 800ae80:	230c      	movs	r3, #12
 800ae82:	603b      	str	r3, [r7, #0]
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	e0d0      	b.n	800b02c <_svfiprintf_r+0x1d0>
 800ae8a:	2340      	movs	r3, #64	; 0x40
 800ae8c:	616b      	str	r3, [r5, #20]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9309      	str	r3, [sp, #36]	; 0x24
 800ae92:	2320      	movs	r3, #32
 800ae94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae9c:	2330      	movs	r3, #48	; 0x30
 800ae9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b044 <_svfiprintf_r+0x1e8>
 800aea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aea6:	f04f 0901 	mov.w	r9, #1
 800aeaa:	4623      	mov	r3, r4
 800aeac:	469a      	mov	sl, r3
 800aeae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeb2:	b10a      	cbz	r2, 800aeb8 <_svfiprintf_r+0x5c>
 800aeb4:	2a25      	cmp	r2, #37	; 0x25
 800aeb6:	d1f9      	bne.n	800aeac <_svfiprintf_r+0x50>
 800aeb8:	ebba 0b04 	subs.w	fp, sl, r4
 800aebc:	d00b      	beq.n	800aed6 <_svfiprintf_r+0x7a>
 800aebe:	465b      	mov	r3, fp
 800aec0:	4622      	mov	r2, r4
 800aec2:	4629      	mov	r1, r5
 800aec4:	4638      	mov	r0, r7
 800aec6:	f7ff ff6e 	bl	800ada6 <__ssputs_r>
 800aeca:	3001      	adds	r0, #1
 800aecc:	f000 80a9 	beq.w	800b022 <_svfiprintf_r+0x1c6>
 800aed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed2:	445a      	add	r2, fp
 800aed4:	9209      	str	r2, [sp, #36]	; 0x24
 800aed6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 80a1 	beq.w	800b022 <_svfiprintf_r+0x1c6>
 800aee0:	2300      	movs	r3, #0
 800aee2:	f04f 32ff 	mov.w	r2, #4294967295
 800aee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeea:	f10a 0a01 	add.w	sl, sl, #1
 800aeee:	9304      	str	r3, [sp, #16]
 800aef0:	9307      	str	r3, [sp, #28]
 800aef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aef6:	931a      	str	r3, [sp, #104]	; 0x68
 800aef8:	4654      	mov	r4, sl
 800aefa:	2205      	movs	r2, #5
 800aefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af00:	4850      	ldr	r0, [pc, #320]	; (800b044 <_svfiprintf_r+0x1e8>)
 800af02:	f7f5 f96d 	bl	80001e0 <memchr>
 800af06:	9a04      	ldr	r2, [sp, #16]
 800af08:	b9d8      	cbnz	r0, 800af42 <_svfiprintf_r+0xe6>
 800af0a:	06d0      	lsls	r0, r2, #27
 800af0c:	bf44      	itt	mi
 800af0e:	2320      	movmi	r3, #32
 800af10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af14:	0711      	lsls	r1, r2, #28
 800af16:	bf44      	itt	mi
 800af18:	232b      	movmi	r3, #43	; 0x2b
 800af1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af1e:	f89a 3000 	ldrb.w	r3, [sl]
 800af22:	2b2a      	cmp	r3, #42	; 0x2a
 800af24:	d015      	beq.n	800af52 <_svfiprintf_r+0xf6>
 800af26:	9a07      	ldr	r2, [sp, #28]
 800af28:	4654      	mov	r4, sl
 800af2a:	2000      	movs	r0, #0
 800af2c:	f04f 0c0a 	mov.w	ip, #10
 800af30:	4621      	mov	r1, r4
 800af32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af36:	3b30      	subs	r3, #48	; 0x30
 800af38:	2b09      	cmp	r3, #9
 800af3a:	d94d      	bls.n	800afd8 <_svfiprintf_r+0x17c>
 800af3c:	b1b0      	cbz	r0, 800af6c <_svfiprintf_r+0x110>
 800af3e:	9207      	str	r2, [sp, #28]
 800af40:	e014      	b.n	800af6c <_svfiprintf_r+0x110>
 800af42:	eba0 0308 	sub.w	r3, r0, r8
 800af46:	fa09 f303 	lsl.w	r3, r9, r3
 800af4a:	4313      	orrs	r3, r2
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	46a2      	mov	sl, r4
 800af50:	e7d2      	b.n	800aef8 <_svfiprintf_r+0x9c>
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	1d19      	adds	r1, r3, #4
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	9103      	str	r1, [sp, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	bfbb      	ittet	lt
 800af5e:	425b      	neglt	r3, r3
 800af60:	f042 0202 	orrlt.w	r2, r2, #2
 800af64:	9307      	strge	r3, [sp, #28]
 800af66:	9307      	strlt	r3, [sp, #28]
 800af68:	bfb8      	it	lt
 800af6a:	9204      	strlt	r2, [sp, #16]
 800af6c:	7823      	ldrb	r3, [r4, #0]
 800af6e:	2b2e      	cmp	r3, #46	; 0x2e
 800af70:	d10c      	bne.n	800af8c <_svfiprintf_r+0x130>
 800af72:	7863      	ldrb	r3, [r4, #1]
 800af74:	2b2a      	cmp	r3, #42	; 0x2a
 800af76:	d134      	bne.n	800afe2 <_svfiprintf_r+0x186>
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	1d1a      	adds	r2, r3, #4
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	9203      	str	r2, [sp, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	bfb8      	it	lt
 800af84:	f04f 33ff 	movlt.w	r3, #4294967295
 800af88:	3402      	adds	r4, #2
 800af8a:	9305      	str	r3, [sp, #20]
 800af8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b054 <_svfiprintf_r+0x1f8>
 800af90:	7821      	ldrb	r1, [r4, #0]
 800af92:	2203      	movs	r2, #3
 800af94:	4650      	mov	r0, sl
 800af96:	f7f5 f923 	bl	80001e0 <memchr>
 800af9a:	b138      	cbz	r0, 800afac <_svfiprintf_r+0x150>
 800af9c:	9b04      	ldr	r3, [sp, #16]
 800af9e:	eba0 000a 	sub.w	r0, r0, sl
 800afa2:	2240      	movs	r2, #64	; 0x40
 800afa4:	4082      	lsls	r2, r0
 800afa6:	4313      	orrs	r3, r2
 800afa8:	3401      	adds	r4, #1
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb0:	4825      	ldr	r0, [pc, #148]	; (800b048 <_svfiprintf_r+0x1ec>)
 800afb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afb6:	2206      	movs	r2, #6
 800afb8:	f7f5 f912 	bl	80001e0 <memchr>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d038      	beq.n	800b032 <_svfiprintf_r+0x1d6>
 800afc0:	4b22      	ldr	r3, [pc, #136]	; (800b04c <_svfiprintf_r+0x1f0>)
 800afc2:	bb1b      	cbnz	r3, 800b00c <_svfiprintf_r+0x1b0>
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	3307      	adds	r3, #7
 800afc8:	f023 0307 	bic.w	r3, r3, #7
 800afcc:	3308      	adds	r3, #8
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd2:	4433      	add	r3, r6
 800afd4:	9309      	str	r3, [sp, #36]	; 0x24
 800afd6:	e768      	b.n	800aeaa <_svfiprintf_r+0x4e>
 800afd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800afdc:	460c      	mov	r4, r1
 800afde:	2001      	movs	r0, #1
 800afe0:	e7a6      	b.n	800af30 <_svfiprintf_r+0xd4>
 800afe2:	2300      	movs	r3, #0
 800afe4:	3401      	adds	r4, #1
 800afe6:	9305      	str	r3, [sp, #20]
 800afe8:	4619      	mov	r1, r3
 800afea:	f04f 0c0a 	mov.w	ip, #10
 800afee:	4620      	mov	r0, r4
 800aff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff4:	3a30      	subs	r2, #48	; 0x30
 800aff6:	2a09      	cmp	r2, #9
 800aff8:	d903      	bls.n	800b002 <_svfiprintf_r+0x1a6>
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0c6      	beq.n	800af8c <_svfiprintf_r+0x130>
 800affe:	9105      	str	r1, [sp, #20]
 800b000:	e7c4      	b.n	800af8c <_svfiprintf_r+0x130>
 800b002:	fb0c 2101 	mla	r1, ip, r1, r2
 800b006:	4604      	mov	r4, r0
 800b008:	2301      	movs	r3, #1
 800b00a:	e7f0      	b.n	800afee <_svfiprintf_r+0x192>
 800b00c:	ab03      	add	r3, sp, #12
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	462a      	mov	r2, r5
 800b012:	4b0f      	ldr	r3, [pc, #60]	; (800b050 <_svfiprintf_r+0x1f4>)
 800b014:	a904      	add	r1, sp, #16
 800b016:	4638      	mov	r0, r7
 800b018:	f7fc fe7c 	bl	8007d14 <_printf_float>
 800b01c:	1c42      	adds	r2, r0, #1
 800b01e:	4606      	mov	r6, r0
 800b020:	d1d6      	bne.n	800afd0 <_svfiprintf_r+0x174>
 800b022:	89ab      	ldrh	r3, [r5, #12]
 800b024:	065b      	lsls	r3, r3, #25
 800b026:	f53f af2d 	bmi.w	800ae84 <_svfiprintf_r+0x28>
 800b02a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b02c:	b01d      	add	sp, #116	; 0x74
 800b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b032:	ab03      	add	r3, sp, #12
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	462a      	mov	r2, r5
 800b038:	4b05      	ldr	r3, [pc, #20]	; (800b050 <_svfiprintf_r+0x1f4>)
 800b03a:	a904      	add	r1, sp, #16
 800b03c:	4638      	mov	r0, r7
 800b03e:	f7fd f90d 	bl	800825c <_printf_i>
 800b042:	e7eb      	b.n	800b01c <_svfiprintf_r+0x1c0>
 800b044:	0800bd75 	.word	0x0800bd75
 800b048:	0800bd7f 	.word	0x0800bd7f
 800b04c:	08007d15 	.word	0x08007d15
 800b050:	0800ada7 	.word	0x0800ada7
 800b054:	0800bd7b 	.word	0x0800bd7b

0800b058 <__sfputc_r>:
 800b058:	6893      	ldr	r3, [r2, #8]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	b410      	push	{r4}
 800b060:	6093      	str	r3, [r2, #8]
 800b062:	da08      	bge.n	800b076 <__sfputc_r+0x1e>
 800b064:	6994      	ldr	r4, [r2, #24]
 800b066:	42a3      	cmp	r3, r4
 800b068:	db01      	blt.n	800b06e <__sfputc_r+0x16>
 800b06a:	290a      	cmp	r1, #10
 800b06c:	d103      	bne.n	800b076 <__sfputc_r+0x1e>
 800b06e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b072:	f7fd bdb8 	b.w	8008be6 <__swbuf_r>
 800b076:	6813      	ldr	r3, [r2, #0]
 800b078:	1c58      	adds	r0, r3, #1
 800b07a:	6010      	str	r0, [r2, #0]
 800b07c:	7019      	strb	r1, [r3, #0]
 800b07e:	4608      	mov	r0, r1
 800b080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <__sfputs_r>:
 800b086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b088:	4606      	mov	r6, r0
 800b08a:	460f      	mov	r7, r1
 800b08c:	4614      	mov	r4, r2
 800b08e:	18d5      	adds	r5, r2, r3
 800b090:	42ac      	cmp	r4, r5
 800b092:	d101      	bne.n	800b098 <__sfputs_r+0x12>
 800b094:	2000      	movs	r0, #0
 800b096:	e007      	b.n	800b0a8 <__sfputs_r+0x22>
 800b098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b09c:	463a      	mov	r2, r7
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7ff ffda 	bl	800b058 <__sfputc_r>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d1f3      	bne.n	800b090 <__sfputs_r+0xa>
 800b0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0ac <_vfiprintf_r>:
 800b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b0:	460d      	mov	r5, r1
 800b0b2:	b09d      	sub	sp, #116	; 0x74
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	4698      	mov	r8, r3
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	b118      	cbz	r0, 800b0c4 <_vfiprintf_r+0x18>
 800b0bc:	6a03      	ldr	r3, [r0, #32]
 800b0be:	b90b      	cbnz	r3, 800b0c4 <_vfiprintf_r+0x18>
 800b0c0:	f7fd fc8a 	bl	80089d8 <__sinit>
 800b0c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0c6:	07d9      	lsls	r1, r3, #31
 800b0c8:	d405      	bmi.n	800b0d6 <_vfiprintf_r+0x2a>
 800b0ca:	89ab      	ldrh	r3, [r5, #12]
 800b0cc:	059a      	lsls	r2, r3, #22
 800b0ce:	d402      	bmi.n	800b0d6 <_vfiprintf_r+0x2a>
 800b0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0d2:	f7fd febc 	bl	8008e4e <__retarget_lock_acquire_recursive>
 800b0d6:	89ab      	ldrh	r3, [r5, #12]
 800b0d8:	071b      	lsls	r3, r3, #28
 800b0da:	d501      	bpl.n	800b0e0 <_vfiprintf_r+0x34>
 800b0dc:	692b      	ldr	r3, [r5, #16]
 800b0de:	b99b      	cbnz	r3, 800b108 <_vfiprintf_r+0x5c>
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7fd fdbc 	bl	8008c60 <__swsetup_r>
 800b0e8:	b170      	cbz	r0, 800b108 <_vfiprintf_r+0x5c>
 800b0ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ec:	07dc      	lsls	r4, r3, #31
 800b0ee:	d504      	bpl.n	800b0fa <_vfiprintf_r+0x4e>
 800b0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f4:	b01d      	add	sp, #116	; 0x74
 800b0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	0598      	lsls	r0, r3, #22
 800b0fe:	d4f7      	bmi.n	800b0f0 <_vfiprintf_r+0x44>
 800b100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b102:	f7fd fea5 	bl	8008e50 <__retarget_lock_release_recursive>
 800b106:	e7f3      	b.n	800b0f0 <_vfiprintf_r+0x44>
 800b108:	2300      	movs	r3, #0
 800b10a:	9309      	str	r3, [sp, #36]	; 0x24
 800b10c:	2320      	movs	r3, #32
 800b10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b112:	f8cd 800c 	str.w	r8, [sp, #12]
 800b116:	2330      	movs	r3, #48	; 0x30
 800b118:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b2cc <_vfiprintf_r+0x220>
 800b11c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b120:	f04f 0901 	mov.w	r9, #1
 800b124:	4623      	mov	r3, r4
 800b126:	469a      	mov	sl, r3
 800b128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b12c:	b10a      	cbz	r2, 800b132 <_vfiprintf_r+0x86>
 800b12e:	2a25      	cmp	r2, #37	; 0x25
 800b130:	d1f9      	bne.n	800b126 <_vfiprintf_r+0x7a>
 800b132:	ebba 0b04 	subs.w	fp, sl, r4
 800b136:	d00b      	beq.n	800b150 <_vfiprintf_r+0xa4>
 800b138:	465b      	mov	r3, fp
 800b13a:	4622      	mov	r2, r4
 800b13c:	4629      	mov	r1, r5
 800b13e:	4630      	mov	r0, r6
 800b140:	f7ff ffa1 	bl	800b086 <__sfputs_r>
 800b144:	3001      	adds	r0, #1
 800b146:	f000 80a9 	beq.w	800b29c <_vfiprintf_r+0x1f0>
 800b14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b14c:	445a      	add	r2, fp
 800b14e:	9209      	str	r2, [sp, #36]	; 0x24
 800b150:	f89a 3000 	ldrb.w	r3, [sl]
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 80a1 	beq.w	800b29c <_vfiprintf_r+0x1f0>
 800b15a:	2300      	movs	r3, #0
 800b15c:	f04f 32ff 	mov.w	r2, #4294967295
 800b160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b164:	f10a 0a01 	add.w	sl, sl, #1
 800b168:	9304      	str	r3, [sp, #16]
 800b16a:	9307      	str	r3, [sp, #28]
 800b16c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b170:	931a      	str	r3, [sp, #104]	; 0x68
 800b172:	4654      	mov	r4, sl
 800b174:	2205      	movs	r2, #5
 800b176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b17a:	4854      	ldr	r0, [pc, #336]	; (800b2cc <_vfiprintf_r+0x220>)
 800b17c:	f7f5 f830 	bl	80001e0 <memchr>
 800b180:	9a04      	ldr	r2, [sp, #16]
 800b182:	b9d8      	cbnz	r0, 800b1bc <_vfiprintf_r+0x110>
 800b184:	06d1      	lsls	r1, r2, #27
 800b186:	bf44      	itt	mi
 800b188:	2320      	movmi	r3, #32
 800b18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b18e:	0713      	lsls	r3, r2, #28
 800b190:	bf44      	itt	mi
 800b192:	232b      	movmi	r3, #43	; 0x2b
 800b194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b198:	f89a 3000 	ldrb.w	r3, [sl]
 800b19c:	2b2a      	cmp	r3, #42	; 0x2a
 800b19e:	d015      	beq.n	800b1cc <_vfiprintf_r+0x120>
 800b1a0:	9a07      	ldr	r2, [sp, #28]
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	f04f 0c0a 	mov.w	ip, #10
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1b0:	3b30      	subs	r3, #48	; 0x30
 800b1b2:	2b09      	cmp	r3, #9
 800b1b4:	d94d      	bls.n	800b252 <_vfiprintf_r+0x1a6>
 800b1b6:	b1b0      	cbz	r0, 800b1e6 <_vfiprintf_r+0x13a>
 800b1b8:	9207      	str	r2, [sp, #28]
 800b1ba:	e014      	b.n	800b1e6 <_vfiprintf_r+0x13a>
 800b1bc:	eba0 0308 	sub.w	r3, r0, r8
 800b1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	9304      	str	r3, [sp, #16]
 800b1c8:	46a2      	mov	sl, r4
 800b1ca:	e7d2      	b.n	800b172 <_vfiprintf_r+0xc6>
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	1d19      	adds	r1, r3, #4
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	9103      	str	r1, [sp, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bfbb      	ittet	lt
 800b1d8:	425b      	neglt	r3, r3
 800b1da:	f042 0202 	orrlt.w	r2, r2, #2
 800b1de:	9307      	strge	r3, [sp, #28]
 800b1e0:	9307      	strlt	r3, [sp, #28]
 800b1e2:	bfb8      	it	lt
 800b1e4:	9204      	strlt	r2, [sp, #16]
 800b1e6:	7823      	ldrb	r3, [r4, #0]
 800b1e8:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ea:	d10c      	bne.n	800b206 <_vfiprintf_r+0x15a>
 800b1ec:	7863      	ldrb	r3, [r4, #1]
 800b1ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f0:	d134      	bne.n	800b25c <_vfiprintf_r+0x1b0>
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	1d1a      	adds	r2, r3, #4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	9203      	str	r2, [sp, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfb8      	it	lt
 800b1fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800b202:	3402      	adds	r4, #2
 800b204:	9305      	str	r3, [sp, #20]
 800b206:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b2dc <_vfiprintf_r+0x230>
 800b20a:	7821      	ldrb	r1, [r4, #0]
 800b20c:	2203      	movs	r2, #3
 800b20e:	4650      	mov	r0, sl
 800b210:	f7f4 ffe6 	bl	80001e0 <memchr>
 800b214:	b138      	cbz	r0, 800b226 <_vfiprintf_r+0x17a>
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	eba0 000a 	sub.w	r0, r0, sl
 800b21c:	2240      	movs	r2, #64	; 0x40
 800b21e:	4082      	lsls	r2, r0
 800b220:	4313      	orrs	r3, r2
 800b222:	3401      	adds	r4, #1
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b22a:	4829      	ldr	r0, [pc, #164]	; (800b2d0 <_vfiprintf_r+0x224>)
 800b22c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b230:	2206      	movs	r2, #6
 800b232:	f7f4 ffd5 	bl	80001e0 <memchr>
 800b236:	2800      	cmp	r0, #0
 800b238:	d03f      	beq.n	800b2ba <_vfiprintf_r+0x20e>
 800b23a:	4b26      	ldr	r3, [pc, #152]	; (800b2d4 <_vfiprintf_r+0x228>)
 800b23c:	bb1b      	cbnz	r3, 800b286 <_vfiprintf_r+0x1da>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	3307      	adds	r3, #7
 800b242:	f023 0307 	bic.w	r3, r3, #7
 800b246:	3308      	adds	r3, #8
 800b248:	9303      	str	r3, [sp, #12]
 800b24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24c:	443b      	add	r3, r7
 800b24e:	9309      	str	r3, [sp, #36]	; 0x24
 800b250:	e768      	b.n	800b124 <_vfiprintf_r+0x78>
 800b252:	fb0c 3202 	mla	r2, ip, r2, r3
 800b256:	460c      	mov	r4, r1
 800b258:	2001      	movs	r0, #1
 800b25a:	e7a6      	b.n	800b1aa <_vfiprintf_r+0xfe>
 800b25c:	2300      	movs	r3, #0
 800b25e:	3401      	adds	r4, #1
 800b260:	9305      	str	r3, [sp, #20]
 800b262:	4619      	mov	r1, r3
 800b264:	f04f 0c0a 	mov.w	ip, #10
 800b268:	4620      	mov	r0, r4
 800b26a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b26e:	3a30      	subs	r2, #48	; 0x30
 800b270:	2a09      	cmp	r2, #9
 800b272:	d903      	bls.n	800b27c <_vfiprintf_r+0x1d0>
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0c6      	beq.n	800b206 <_vfiprintf_r+0x15a>
 800b278:	9105      	str	r1, [sp, #20]
 800b27a:	e7c4      	b.n	800b206 <_vfiprintf_r+0x15a>
 800b27c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b280:	4604      	mov	r4, r0
 800b282:	2301      	movs	r3, #1
 800b284:	e7f0      	b.n	800b268 <_vfiprintf_r+0x1bc>
 800b286:	ab03      	add	r3, sp, #12
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	462a      	mov	r2, r5
 800b28c:	4b12      	ldr	r3, [pc, #72]	; (800b2d8 <_vfiprintf_r+0x22c>)
 800b28e:	a904      	add	r1, sp, #16
 800b290:	4630      	mov	r0, r6
 800b292:	f7fc fd3f 	bl	8007d14 <_printf_float>
 800b296:	4607      	mov	r7, r0
 800b298:	1c78      	adds	r0, r7, #1
 800b29a:	d1d6      	bne.n	800b24a <_vfiprintf_r+0x19e>
 800b29c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b29e:	07d9      	lsls	r1, r3, #31
 800b2a0:	d405      	bmi.n	800b2ae <_vfiprintf_r+0x202>
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	059a      	lsls	r2, r3, #22
 800b2a6:	d402      	bmi.n	800b2ae <_vfiprintf_r+0x202>
 800b2a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2aa:	f7fd fdd1 	bl	8008e50 <__retarget_lock_release_recursive>
 800b2ae:	89ab      	ldrh	r3, [r5, #12]
 800b2b0:	065b      	lsls	r3, r3, #25
 800b2b2:	f53f af1d 	bmi.w	800b0f0 <_vfiprintf_r+0x44>
 800b2b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2b8:	e71c      	b.n	800b0f4 <_vfiprintf_r+0x48>
 800b2ba:	ab03      	add	r3, sp, #12
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	462a      	mov	r2, r5
 800b2c0:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <_vfiprintf_r+0x22c>)
 800b2c2:	a904      	add	r1, sp, #16
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f7fc ffc9 	bl	800825c <_printf_i>
 800b2ca:	e7e4      	b.n	800b296 <_vfiprintf_r+0x1ea>
 800b2cc:	0800bd75 	.word	0x0800bd75
 800b2d0:	0800bd7f 	.word	0x0800bd7f
 800b2d4:	08007d15 	.word	0x08007d15
 800b2d8:	0800b087 	.word	0x0800b087
 800b2dc:	0800bd7b 	.word	0x0800bd7b

0800b2e0 <__sflush_r>:
 800b2e0:	898a      	ldrh	r2, [r1, #12]
 800b2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	0710      	lsls	r0, r2, #28
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	d458      	bmi.n	800b3a0 <__sflush_r+0xc0>
 800b2ee:	684b      	ldr	r3, [r1, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	dc05      	bgt.n	800b300 <__sflush_r+0x20>
 800b2f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	dc02      	bgt.n	800b300 <__sflush_r+0x20>
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b302:	2e00      	cmp	r6, #0
 800b304:	d0f9      	beq.n	800b2fa <__sflush_r+0x1a>
 800b306:	2300      	movs	r3, #0
 800b308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b30c:	682f      	ldr	r7, [r5, #0]
 800b30e:	6a21      	ldr	r1, [r4, #32]
 800b310:	602b      	str	r3, [r5, #0]
 800b312:	d032      	beq.n	800b37a <__sflush_r+0x9a>
 800b314:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	075a      	lsls	r2, r3, #29
 800b31a:	d505      	bpl.n	800b328 <__sflush_r+0x48>
 800b31c:	6863      	ldr	r3, [r4, #4]
 800b31e:	1ac0      	subs	r0, r0, r3
 800b320:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b322:	b10b      	cbz	r3, 800b328 <__sflush_r+0x48>
 800b324:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b326:	1ac0      	subs	r0, r0, r3
 800b328:	2300      	movs	r3, #0
 800b32a:	4602      	mov	r2, r0
 800b32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b32e:	6a21      	ldr	r1, [r4, #32]
 800b330:	4628      	mov	r0, r5
 800b332:	47b0      	blx	r6
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	d106      	bne.n	800b348 <__sflush_r+0x68>
 800b33a:	6829      	ldr	r1, [r5, #0]
 800b33c:	291d      	cmp	r1, #29
 800b33e:	d82b      	bhi.n	800b398 <__sflush_r+0xb8>
 800b340:	4a29      	ldr	r2, [pc, #164]	; (800b3e8 <__sflush_r+0x108>)
 800b342:	410a      	asrs	r2, r1
 800b344:	07d6      	lsls	r6, r2, #31
 800b346:	d427      	bmi.n	800b398 <__sflush_r+0xb8>
 800b348:	2200      	movs	r2, #0
 800b34a:	6062      	str	r2, [r4, #4]
 800b34c:	04d9      	lsls	r1, r3, #19
 800b34e:	6922      	ldr	r2, [r4, #16]
 800b350:	6022      	str	r2, [r4, #0]
 800b352:	d504      	bpl.n	800b35e <__sflush_r+0x7e>
 800b354:	1c42      	adds	r2, r0, #1
 800b356:	d101      	bne.n	800b35c <__sflush_r+0x7c>
 800b358:	682b      	ldr	r3, [r5, #0]
 800b35a:	b903      	cbnz	r3, 800b35e <__sflush_r+0x7e>
 800b35c:	6560      	str	r0, [r4, #84]	; 0x54
 800b35e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b360:	602f      	str	r7, [r5, #0]
 800b362:	2900      	cmp	r1, #0
 800b364:	d0c9      	beq.n	800b2fa <__sflush_r+0x1a>
 800b366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b36a:	4299      	cmp	r1, r3
 800b36c:	d002      	beq.n	800b374 <__sflush_r+0x94>
 800b36e:	4628      	mov	r0, r5
 800b370:	f7fe fc24 	bl	8009bbc <_free_r>
 800b374:	2000      	movs	r0, #0
 800b376:	6360      	str	r0, [r4, #52]	; 0x34
 800b378:	e7c0      	b.n	800b2fc <__sflush_r+0x1c>
 800b37a:	2301      	movs	r3, #1
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b0      	blx	r6
 800b380:	1c41      	adds	r1, r0, #1
 800b382:	d1c8      	bne.n	800b316 <__sflush_r+0x36>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d0c5      	beq.n	800b316 <__sflush_r+0x36>
 800b38a:	2b1d      	cmp	r3, #29
 800b38c:	d001      	beq.n	800b392 <__sflush_r+0xb2>
 800b38e:	2b16      	cmp	r3, #22
 800b390:	d101      	bne.n	800b396 <__sflush_r+0xb6>
 800b392:	602f      	str	r7, [r5, #0]
 800b394:	e7b1      	b.n	800b2fa <__sflush_r+0x1a>
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	e7ad      	b.n	800b2fc <__sflush_r+0x1c>
 800b3a0:	690f      	ldr	r7, [r1, #16]
 800b3a2:	2f00      	cmp	r7, #0
 800b3a4:	d0a9      	beq.n	800b2fa <__sflush_r+0x1a>
 800b3a6:	0793      	lsls	r3, r2, #30
 800b3a8:	680e      	ldr	r6, [r1, #0]
 800b3aa:	bf08      	it	eq
 800b3ac:	694b      	ldreq	r3, [r1, #20]
 800b3ae:	600f      	str	r7, [r1, #0]
 800b3b0:	bf18      	it	ne
 800b3b2:	2300      	movne	r3, #0
 800b3b4:	eba6 0807 	sub.w	r8, r6, r7
 800b3b8:	608b      	str	r3, [r1, #8]
 800b3ba:	f1b8 0f00 	cmp.w	r8, #0
 800b3be:	dd9c      	ble.n	800b2fa <__sflush_r+0x1a>
 800b3c0:	6a21      	ldr	r1, [r4, #32]
 800b3c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3c4:	4643      	mov	r3, r8
 800b3c6:	463a      	mov	r2, r7
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	47b0      	blx	r6
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	dc06      	bgt.n	800b3de <__sflush_r+0xfe>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3dc:	e78e      	b.n	800b2fc <__sflush_r+0x1c>
 800b3de:	4407      	add	r7, r0
 800b3e0:	eba8 0800 	sub.w	r8, r8, r0
 800b3e4:	e7e9      	b.n	800b3ba <__sflush_r+0xda>
 800b3e6:	bf00      	nop
 800b3e8:	dfbffffe 	.word	0xdfbffffe

0800b3ec <_fflush_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	690b      	ldr	r3, [r1, #16]
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	b913      	cbnz	r3, 800b3fc <_fflush_r+0x10>
 800b3f6:	2500      	movs	r5, #0
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	b118      	cbz	r0, 800b406 <_fflush_r+0x1a>
 800b3fe:	6a03      	ldr	r3, [r0, #32]
 800b400:	b90b      	cbnz	r3, 800b406 <_fflush_r+0x1a>
 800b402:	f7fd fae9 	bl	80089d8 <__sinit>
 800b406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d0f3      	beq.n	800b3f6 <_fflush_r+0xa>
 800b40e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b410:	07d0      	lsls	r0, r2, #31
 800b412:	d404      	bmi.n	800b41e <_fflush_r+0x32>
 800b414:	0599      	lsls	r1, r3, #22
 800b416:	d402      	bmi.n	800b41e <_fflush_r+0x32>
 800b418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b41a:	f7fd fd18 	bl	8008e4e <__retarget_lock_acquire_recursive>
 800b41e:	4628      	mov	r0, r5
 800b420:	4621      	mov	r1, r4
 800b422:	f7ff ff5d 	bl	800b2e0 <__sflush_r>
 800b426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b428:	07da      	lsls	r2, r3, #31
 800b42a:	4605      	mov	r5, r0
 800b42c:	d4e4      	bmi.n	800b3f8 <_fflush_r+0xc>
 800b42e:	89a3      	ldrh	r3, [r4, #12]
 800b430:	059b      	lsls	r3, r3, #22
 800b432:	d4e1      	bmi.n	800b3f8 <_fflush_r+0xc>
 800b434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b436:	f7fd fd0b 	bl	8008e50 <__retarget_lock_release_recursive>
 800b43a:	e7dd      	b.n	800b3f8 <_fflush_r+0xc>

0800b43c <fiprintf>:
 800b43c:	b40e      	push	{r1, r2, r3}
 800b43e:	b503      	push	{r0, r1, lr}
 800b440:	4601      	mov	r1, r0
 800b442:	ab03      	add	r3, sp, #12
 800b444:	4805      	ldr	r0, [pc, #20]	; (800b45c <fiprintf+0x20>)
 800b446:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	f7ff fe2d 	bl	800b0ac <_vfiprintf_r>
 800b452:	b002      	add	sp, #8
 800b454:	f85d eb04 	ldr.w	lr, [sp], #4
 800b458:	b003      	add	sp, #12
 800b45a:	4770      	bx	lr
 800b45c:	200001e0 	.word	0x200001e0

0800b460 <__swhatbuf_r>:
 800b460:	b570      	push	{r4, r5, r6, lr}
 800b462:	460c      	mov	r4, r1
 800b464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b468:	2900      	cmp	r1, #0
 800b46a:	b096      	sub	sp, #88	; 0x58
 800b46c:	4615      	mov	r5, r2
 800b46e:	461e      	mov	r6, r3
 800b470:	da0d      	bge.n	800b48e <__swhatbuf_r+0x2e>
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b478:	f04f 0100 	mov.w	r1, #0
 800b47c:	bf0c      	ite	eq
 800b47e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b482:	2340      	movne	r3, #64	; 0x40
 800b484:	2000      	movs	r0, #0
 800b486:	6031      	str	r1, [r6, #0]
 800b488:	602b      	str	r3, [r5, #0]
 800b48a:	b016      	add	sp, #88	; 0x58
 800b48c:	bd70      	pop	{r4, r5, r6, pc}
 800b48e:	466a      	mov	r2, sp
 800b490:	f000 f862 	bl	800b558 <_fstat_r>
 800b494:	2800      	cmp	r0, #0
 800b496:	dbec      	blt.n	800b472 <__swhatbuf_r+0x12>
 800b498:	9901      	ldr	r1, [sp, #4]
 800b49a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b49e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b4a2:	4259      	negs	r1, r3
 800b4a4:	4159      	adcs	r1, r3
 800b4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4aa:	e7eb      	b.n	800b484 <__swhatbuf_r+0x24>

0800b4ac <__smakebuf_r>:
 800b4ac:	898b      	ldrh	r3, [r1, #12]
 800b4ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4b0:	079d      	lsls	r5, r3, #30
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	d507      	bpl.n	800b4c8 <__smakebuf_r+0x1c>
 800b4b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	6123      	str	r3, [r4, #16]
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	6163      	str	r3, [r4, #20]
 800b4c4:	b002      	add	sp, #8
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	ab01      	add	r3, sp, #4
 800b4ca:	466a      	mov	r2, sp
 800b4cc:	f7ff ffc8 	bl	800b460 <__swhatbuf_r>
 800b4d0:	9900      	ldr	r1, [sp, #0]
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	f7fb fcdd 	bl	8006e94 <_malloc_r>
 800b4da:	b948      	cbnz	r0, 800b4f0 <__smakebuf_r+0x44>
 800b4dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e0:	059a      	lsls	r2, r3, #22
 800b4e2:	d4ef      	bmi.n	800b4c4 <__smakebuf_r+0x18>
 800b4e4:	f023 0303 	bic.w	r3, r3, #3
 800b4e8:	f043 0302 	orr.w	r3, r3, #2
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	e7e3      	b.n	800b4b8 <__smakebuf_r+0xc>
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	6020      	str	r0, [r4, #0]
 800b4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	9b00      	ldr	r3, [sp, #0]
 800b4fc:	6163      	str	r3, [r4, #20]
 800b4fe:	9b01      	ldr	r3, [sp, #4]
 800b500:	6120      	str	r0, [r4, #16]
 800b502:	b15b      	cbz	r3, 800b51c <__smakebuf_r+0x70>
 800b504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b508:	4630      	mov	r0, r6
 800b50a:	f000 f837 	bl	800b57c <_isatty_r>
 800b50e:	b128      	cbz	r0, 800b51c <__smakebuf_r+0x70>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	f023 0303 	bic.w	r3, r3, #3
 800b516:	f043 0301 	orr.w	r3, r3, #1
 800b51a:	81a3      	strh	r3, [r4, #12]
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	431d      	orrs	r5, r3
 800b520:	81a5      	strh	r5, [r4, #12]
 800b522:	e7cf      	b.n	800b4c4 <__smakebuf_r+0x18>

0800b524 <memmove>:
 800b524:	4288      	cmp	r0, r1
 800b526:	b510      	push	{r4, lr}
 800b528:	eb01 0402 	add.w	r4, r1, r2
 800b52c:	d902      	bls.n	800b534 <memmove+0x10>
 800b52e:	4284      	cmp	r4, r0
 800b530:	4623      	mov	r3, r4
 800b532:	d807      	bhi.n	800b544 <memmove+0x20>
 800b534:	1e43      	subs	r3, r0, #1
 800b536:	42a1      	cmp	r1, r4
 800b538:	d008      	beq.n	800b54c <memmove+0x28>
 800b53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b53e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b542:	e7f8      	b.n	800b536 <memmove+0x12>
 800b544:	4402      	add	r2, r0
 800b546:	4601      	mov	r1, r0
 800b548:	428a      	cmp	r2, r1
 800b54a:	d100      	bne.n	800b54e <memmove+0x2a>
 800b54c:	bd10      	pop	{r4, pc}
 800b54e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b556:	e7f7      	b.n	800b548 <memmove+0x24>

0800b558 <_fstat_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d07      	ldr	r5, [pc, #28]	; (800b578 <_fstat_r+0x20>)
 800b55c:	2300      	movs	r3, #0
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	4611      	mov	r1, r2
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	f7f7 fb90 	bl	8002c8a <_fstat>
 800b56a:	1c43      	adds	r3, r0, #1
 800b56c:	d102      	bne.n	800b574 <_fstat_r+0x1c>
 800b56e:	682b      	ldr	r3, [r5, #0]
 800b570:	b103      	cbz	r3, 800b574 <_fstat_r+0x1c>
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	bd38      	pop	{r3, r4, r5, pc}
 800b576:	bf00      	nop
 800b578:	20000644 	.word	0x20000644

0800b57c <_isatty_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d06      	ldr	r5, [pc, #24]	; (800b598 <_isatty_r+0x1c>)
 800b580:	2300      	movs	r3, #0
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	602b      	str	r3, [r5, #0]
 800b588:	f7f7 fb8f 	bl	8002caa <_isatty>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_isatty_r+0x1a>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_isatty_r+0x1a>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	20000644 	.word	0x20000644

0800b59c <abort>:
 800b59c:	b508      	push	{r3, lr}
 800b59e:	2006      	movs	r0, #6
 800b5a0:	f000 f870 	bl	800b684 <raise>
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	f7f7 fb21 	bl	8002bec <_exit>

0800b5aa <_calloc_r>:
 800b5aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ac:	fba1 2402 	umull	r2, r4, r1, r2
 800b5b0:	b94c      	cbnz	r4, 800b5c6 <_calloc_r+0x1c>
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	9201      	str	r2, [sp, #4]
 800b5b6:	f7fb fc6d 	bl	8006e94 <_malloc_r>
 800b5ba:	9a01      	ldr	r2, [sp, #4]
 800b5bc:	4605      	mov	r5, r0
 800b5be:	b930      	cbnz	r0, 800b5ce <_calloc_r+0x24>
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	b003      	add	sp, #12
 800b5c4:	bd30      	pop	{r4, r5, pc}
 800b5c6:	220c      	movs	r2, #12
 800b5c8:	6002      	str	r2, [r0, #0]
 800b5ca:	2500      	movs	r5, #0
 800b5cc:	e7f8      	b.n	800b5c0 <_calloc_r+0x16>
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	f7fd fb9e 	bl	8008d10 <memset>
 800b5d4:	e7f4      	b.n	800b5c0 <_calloc_r+0x16>

0800b5d6 <_realloc_r>:
 800b5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5da:	4680      	mov	r8, r0
 800b5dc:	4614      	mov	r4, r2
 800b5de:	460e      	mov	r6, r1
 800b5e0:	b921      	cbnz	r1, 800b5ec <_realloc_r+0x16>
 800b5e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	f7fb bc54 	b.w	8006e94 <_malloc_r>
 800b5ec:	b92a      	cbnz	r2, 800b5fa <_realloc_r+0x24>
 800b5ee:	f7fe fae5 	bl	8009bbc <_free_r>
 800b5f2:	4625      	mov	r5, r4
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fa:	f000 f85f 	bl	800b6bc <_malloc_usable_size_r>
 800b5fe:	4284      	cmp	r4, r0
 800b600:	4607      	mov	r7, r0
 800b602:	d802      	bhi.n	800b60a <_realloc_r+0x34>
 800b604:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b608:	d812      	bhi.n	800b630 <_realloc_r+0x5a>
 800b60a:	4621      	mov	r1, r4
 800b60c:	4640      	mov	r0, r8
 800b60e:	f7fb fc41 	bl	8006e94 <_malloc_r>
 800b612:	4605      	mov	r5, r0
 800b614:	2800      	cmp	r0, #0
 800b616:	d0ed      	beq.n	800b5f4 <_realloc_r+0x1e>
 800b618:	42bc      	cmp	r4, r7
 800b61a:	4622      	mov	r2, r4
 800b61c:	4631      	mov	r1, r6
 800b61e:	bf28      	it	cs
 800b620:	463a      	movcs	r2, r7
 800b622:	f7fd fc16 	bl	8008e52 <memcpy>
 800b626:	4631      	mov	r1, r6
 800b628:	4640      	mov	r0, r8
 800b62a:	f7fe fac7 	bl	8009bbc <_free_r>
 800b62e:	e7e1      	b.n	800b5f4 <_realloc_r+0x1e>
 800b630:	4635      	mov	r5, r6
 800b632:	e7df      	b.n	800b5f4 <_realloc_r+0x1e>

0800b634 <_raise_r>:
 800b634:	291f      	cmp	r1, #31
 800b636:	b538      	push	{r3, r4, r5, lr}
 800b638:	4604      	mov	r4, r0
 800b63a:	460d      	mov	r5, r1
 800b63c:	d904      	bls.n	800b648 <_raise_r+0x14>
 800b63e:	2316      	movs	r3, #22
 800b640:	6003      	str	r3, [r0, #0]
 800b642:	f04f 30ff 	mov.w	r0, #4294967295
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b64a:	b112      	cbz	r2, 800b652 <_raise_r+0x1e>
 800b64c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b650:	b94b      	cbnz	r3, 800b666 <_raise_r+0x32>
 800b652:	4620      	mov	r0, r4
 800b654:	f000 f830 	bl	800b6b8 <_getpid_r>
 800b658:	462a      	mov	r2, r5
 800b65a:	4601      	mov	r1, r0
 800b65c:	4620      	mov	r0, r4
 800b65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b662:	f000 b817 	b.w	800b694 <_kill_r>
 800b666:	2b01      	cmp	r3, #1
 800b668:	d00a      	beq.n	800b680 <_raise_r+0x4c>
 800b66a:	1c59      	adds	r1, r3, #1
 800b66c:	d103      	bne.n	800b676 <_raise_r+0x42>
 800b66e:	2316      	movs	r3, #22
 800b670:	6003      	str	r3, [r0, #0]
 800b672:	2001      	movs	r0, #1
 800b674:	e7e7      	b.n	800b646 <_raise_r+0x12>
 800b676:	2400      	movs	r4, #0
 800b678:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b67c:	4628      	mov	r0, r5
 800b67e:	4798      	blx	r3
 800b680:	2000      	movs	r0, #0
 800b682:	e7e0      	b.n	800b646 <_raise_r+0x12>

0800b684 <raise>:
 800b684:	4b02      	ldr	r3, [pc, #8]	; (800b690 <raise+0xc>)
 800b686:	4601      	mov	r1, r0
 800b688:	6818      	ldr	r0, [r3, #0]
 800b68a:	f7ff bfd3 	b.w	800b634 <_raise_r>
 800b68e:	bf00      	nop
 800b690:	200001e0 	.word	0x200001e0

0800b694 <_kill_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d07      	ldr	r5, [pc, #28]	; (800b6b4 <_kill_r+0x20>)
 800b698:	2300      	movs	r3, #0
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	4611      	mov	r1, r2
 800b6a0:	602b      	str	r3, [r5, #0]
 800b6a2:	f7f7 fa93 	bl	8002bcc <_kill>
 800b6a6:	1c43      	adds	r3, r0, #1
 800b6a8:	d102      	bne.n	800b6b0 <_kill_r+0x1c>
 800b6aa:	682b      	ldr	r3, [r5, #0]
 800b6ac:	b103      	cbz	r3, 800b6b0 <_kill_r+0x1c>
 800b6ae:	6023      	str	r3, [r4, #0]
 800b6b0:	bd38      	pop	{r3, r4, r5, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000644 	.word	0x20000644

0800b6b8 <_getpid_r>:
 800b6b8:	f7f7 ba80 	b.w	8002bbc <_getpid>

0800b6bc <_malloc_usable_size_r>:
 800b6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c0:	1f18      	subs	r0, r3, #4
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	bfbc      	itt	lt
 800b6c6:	580b      	ldrlt	r3, [r1, r0]
 800b6c8:	18c0      	addlt	r0, r0, r3
 800b6ca:	4770      	bx	lr

0800b6cc <_init>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	bf00      	nop
 800b6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d2:	bc08      	pop	{r3}
 800b6d4:	469e      	mov	lr, r3
 800b6d6:	4770      	bx	lr

0800b6d8 <_fini>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	bf00      	nop
 800b6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6de:	bc08      	pop	{r3}
 800b6e0:	469e      	mov	lr, r3
 800b6e2:	4770      	bx	lr
